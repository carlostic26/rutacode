import 'package:flutter/material.dart';
import 'package:rutacode/features/level/data/datasources/level_local_database.dart';
import 'package:sqflite_common/sqlite_api.dart';

class DetailJrLocalDatabaseHelper {
  LevelLocalDatabaseHelper dbHelper = LevelLocalDatabaseHelper();

  Future<void> createDetailTable(Database db) async {
    await db.execute('''
      CREATE TABLE detail(
        id INTEGER,  
        module TEXT,
        subtopic_id TEXT,
        definition TEXT,
        img_url TEXT,
        code_example TEXT,          
        PRIMARY KEY (module, subtopic_id, id), -- Clave primaria compuesta
        FOREIGN KEY (module, subtopic_id) REFERENCES subtopic(module, id) ON DELETE CASCADE
      );
    ''');

    insertDetailsJr(db);
  }

  Future<void> insertDetailsJr(Database db) async {
    try {
      await insertDetailsJrLevel1(db);
      await insertDetailsJrLevel2(db);
      await insertDetailsJrLevel3(db);
      await insertDetailsJrLevel4(db);
      await insertDetailsJrLevel5(db);
      await insertDetailsJrLevel6(db);
      await insertDetailsJrLevel7(db);
      await insertDetailsJrLevel8(db);
      await insertDetailsJrLevel9(db);
    } catch (e) {
      //print("Error inserting details jr: $e");
    }
  }

  Future<void> insertDetailsJrLevel1(Database db) async {
    try {
      await _insertDetailsJrTopic1Level1(db);
      await _insertDetailsJrTopic2Level1(db);
      await _insertDetailsJrTopic3Level1(db);
      await _insertDetailsJrTopic4Level1(db);
      await _insertDetailsJrTopic5Level1(db);
    } catch (e) {
      //print("Error inserting details jr level  1: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level1(db) async {
    // Detalle para 'var'
    await db.insert('detail', {
      'id': 1,
      'subtopic_id': 's01t01l01', // Subtopic 'var'
      'module': 'Jr',
      'definition': 'La palabra clave `var` se utiliza para declarar una variable sin especificar su tipo expl√≠citamente. El tipo se infiere en tiempo de compilaci√≥n.\n\n'
          'En otras palabras... üòÖ\n\n'
          'Imag√≠nate que entras a una tienda y le dices al vendedor: ‚ÄúQuiero comprar algo, pero todav√≠a no s√© qu√©‚Äù. En lugar de forzarte a elegir de inmediato, el vendedor te deja agarrar lo que necesites y luego te cobra seg√∫n el producto que elijas. As√≠ funciona `var` en programaci√≥n.\n\n'
          'Cuando usas `var`, le est√°s diciendo al compilador: ‚ÄúVoy a guardar algo aqu√≠, pero ya ver√°s de qu√© tipo es cuando lo asigne‚Äù. Por ejemplo, si escribes `var edad = 25`, el compilador autom√°ticamente entiende que `edad` es un n√∫mero entero (`int`). Si en cambio escribes `var nombre = "Carlos"`, sabe que es un `String`.\n\n'
          'As√≠ que recuerda: `var` te da flexibilidad al inicio, pero sigue teniendo reglas. √ösalo sabiamente y deja que el compilador haga su magia. ‚ú®',
      'img_url': '',
      'code_example': '''
void main() {
  var edad = 25;
  var nombre = "Carlos";

 debugPrint("Nombre: \$nombre, Edad: \$edad");
}
''',
    });

    // Detalle para 'final'
    await db.insert('detail', {
      'id': 2,
      'subtopic_id': 's02t01l01', // Subtopic 'final'
      'module': 'Jr',
      'definition': 'La palabra clave `final` se utiliza para declarar una variable que solo puede ser asignada una vez. Su valor no puede cambiar despu√©s de la asignaci√≥n inicial.\n\n'
          '¬øTe quedaron dudas? ü§î\n\n'
          'Piensa en `final` como un tatuaje: una vez que lo tienes, no puedes cambiarlo (a menos que quieras pasar por un doloroso proceso de eliminaci√≥n). En programaci√≥n, `final` te permite declarar una variable que solo puede ser asignada una vez. Despu√©s de eso, su valor es inmutable.\n\n'
          'Por ejemplo, si escribes `final pi = 3.1416`, no podr√°s cambiar el valor de `pi` m√°s adelante en el c√≥digo. ¬°Es como decirle al compilador: ‚ÄúEste valor es sagrado, no lo toques!‚Äù üôè\n\n'
          'Usa `final` cuando est√©s seguro de que el valor no cambiar√°. Te ayudar√° a evitar errores y a mantener tu c√≥digo m√°s seguro.',
      'img_url': '',
      'code_example': '''
void main() {
  final pi = 3.1416;
  final nombre = "Alice";

 debugPrint("El valor de pi es: \$pi");
 debugPrint("Nombre: \$nombre");
}
''',
    });

    // Detalle para 'const'
    await db.insert('detail', {
      'id': 3,
      'subtopic_id': 's03t01l01', // Subtopic 'const'
      'module': 'Jr',
      'definition': 'La palabra clave `const` se utiliza para declarar una variable constante cuyo valor debe ser conocido en tiempo de compilaci√≥n y no puede cambiar en tiempo de ejecuci√≥n.\n\n'
          '¬øPero qu√© significa esto? ü§®\n\n'
          'Imaginemos que `const` es como una promesa que haces al compilador: ‚ÄúEste valor no cambiar√° nunca, y lo sabes desde el momento en que escribes el c√≥digo‚Äù. A diferencia de `final`, que permite asignar un valor en tiempo de ejecuci√≥n, `const` exige que el valor sea conocido en tiempo de compilaci√≥n.\n\n'
          'Por ejemplo, si escribes `const pi = 3.1416`, est√°s diciendo: ‚ÄúEste valor es constante y no cambiar√° en ning√∫n momento‚Äù. Si intentas cambiar `pi` m√°s adelante, el compilador te detendr√° con un error. üö´\n\n'
          'Usa `const` para valores que sabes que nunca cambiar√°n, como constantes matem√°ticas o configuraciones fijas.',
      'img_url': '',
      'code_example': '''
void main() {
  const pi = 3.1416;
  const diasSemana = 7;

 debugPrint("El valor de pi es: \$pi");
 debugPrint("D√≠as en una semana: \$diasSemana");
}
''',
    });

    // Detalle para 'int'
    await db.insert('detail', {
      'id': 4,
      'subtopic_id': 's04t01l01', // Subtopic 'int'
      'module': 'Jr',
      'definition':
          'El tipo `int` se utiliza para representar n√∫meros enteros, es decir, n√∫meros sin decimales.\n\n'
              '¬øA√∫n no te queda claro? ü§∑‚Äç‚ôÇÔ∏è\n\n'
              'Piensa en `int` como una caja donde solo puedes guardar n√∫meros completos, como 1, 42 o -7. Por ejemplo, si escribes `int edad = 25`, est√°s declarando una variable que solo puede almacenar n√∫meros enteros. Si intentas asignarle un n√∫mero con decimales, como `edad = 25.5`, el compilador te dir√°: ‚Äú¬°Eh, esto no es un entero!‚Äù üö®\n\n'
              'Usa `int` cuando necesites trabajar con cantidades discretas, como la edad de una persona, el n√∫mero de p√°ginas de un libro o la cantidad de likes en una publicaci√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  int edad = 25;
  int cantidadLikes = 100;

 debugPrint("Edad: \$edad");
 debugPrint("Likes: \$cantidadLikes");
}
''',
    });

    // Detalle para 'double'
    await db.insert('detail', {
      'id': 5,
      'subtopic_id': 's05t01l01', // Subtopic 'double'
      'module': 'Jr',
      'definition':
          'El tipo `double` se utiliza para representar n√∫meros de punto flotante, es decir, n√∫meros con decimales.\n\n'
              '¬øTe quedaron dudas? ü§î\n\n'
              'Piensa en `double` como una caja donde puedes guardar n√∫meros como 3.14, -0.5 o 42.0. Por ejemplo, si escribes `double pi = 3.1416`, est√°s declarando una variable que puede almacenar n√∫meros con decimales. Si intentas asignarle un n√∫mero entero, como `pi = 3`, el compilador lo aceptar√°, pero lo convertir√° autom√°ticamente a `3.0`.\n\n'
              'Usa `double` cuando necesites trabajar con cantidades precisas, como el valor de œÄ, el precio de un producto o la temperatura de un lugar.',
      'img_url': '',
      'code_example': '''
void main() {
  double pi = 3.1416;
  double precio = 19.99;

 debugPrint("El valor de pi es: \$pi");
 debugPrint("Precio: \$precio");

  pi = 3;
}
''',
    });

    // Detalle para 'bool'
    await db.insert('detail', {
      'id': 6,
      'subtopic_id': 's06t01l01', // Subtopic 'bool'
      'module': 'Jr',
      'definition':
          'El tipo `bool` se utiliza para representar valores booleanos, que pueden ser `true` (verdadero) o `false` (falso).\n\n'
              '¬øPero qu√© significa esto? ü§®\n\n'
              'Piensa en `bool` como un interruptor de luz: solo tiene dos posiciones, encendido (`true`) o apagado (`false`). Por ejemplo, si escribes `bool isActive = true`, est√°s declarando una variable que puede ser verdadera o falsa. Esta variable es √∫til para tomar decisiones en tu c√≥digo, como mostrar un mensaje si un usuario est√° activo o no.\n\n'
              'Usa `bool` cuando necesites trabajar con condiciones l√≥gicas, como verificar si un usuario est√° conectado, si un n√∫mero es mayor que otro o si una tarea est√° completada.',
      'img_url': '',
      'code_example': '''
void main() {
  bool isActive = true;
  bool isCompleted = false;

  if (isActive) {
   debugPrint("El usuario est√° activo.");
  } else {
   debugPrint("El usuario no est√° activo.");
  }
}
''',
    });

    // Detalle para 'String'
    await db.insert('detail', {
      'id': 7,
      'subtopic_id': 's07t01l01', // Subtopic 'String'
      'module': 'Jr',
      'definition':
          'El tipo `String` se utiliza para representar cadenas de texto, es decir, secuencias de caracteres.\n\n'
              '¬øA√∫n no te queda claro? ü§∑‚Äç‚ôÇÔ∏è\n\n'
              'Piensa en `String` como una caja donde puedes guardar palabras, frases o incluso p√°rrafos completos. Por ejemplo, si escribes `String nombre = "Alice"`, est√°s declarando una variable que puede almacenar texto. Puedes usar `String` para almacenar nombres, mensajes, direcciones o cualquier otro tipo de informaci√≥n textual.\n\n'
              'Usa `String` cuando necesites trabajar con texto en tu c√≥digo, como mostrar un mensaje de bienvenida, almacenar el nombre de un usuario o concatenar varias palabras.',
      'img_url': '',
      'code_example': '''
void main() {
  String nombre = "Alice";
  String mensaje = "¬°Hola, mundo!";

 debugPrint("Nombre: \$nombre");
 debugPrint("Mensaje: \$mensaje");

  String saludo = "Hola, " + nombre + "!";
 debugPrint(saludo);
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level1(db) async {
    // Detalle para 'Listas'
    await db.insert('detail', {
      'id': 8,
      'subtopic_id': 's01t02l01', // Subtopic 'Listas'
      'module': 'Jr',
      'definition': 'Una lista en Dart es una colecci√≥n ordenada de elementos que pueden ser de cualquier tipo. Puedes pensar en una lista como una fila de cajas, donde cada caja contiene un valor.\n\n'
          'Ya, pero ¬øqu√© es una lista? ü§î\n\n'
          'Imaginemos que tienes una lista de compras. En esa lista, puedes agregar, eliminar o modificar elementos. En Dart, una lista funciona de la misma manera. Puedes agregar elementos, eliminarlos o acceder a ellos usando su posici√≥n (√≠ndice).\n\n'
          'Por ejemplo, si escribes `List<String> frutas = ["manzana", "banana"]`, est√°s creando una lista de cadenas de texto. Puedes acceder a los elementos usando su √≠ndice, como `frutas[0]` para obtener "manzana".\n\n'
          'Las listas son una de las estructuras de datos m√°s comunes en programaci√≥n. √ösalas cuando necesites almacenar y manipular una colecci√≥n de elementos.',
      'img_url': '',
      'code_example': '''
void main() {
  List<String> frutas = ["manzana", "banana", "naranja"]; // Lista de cadenas
 debugPrint("Mi fruta favorita es: \${frutas[0]}"); // Acceso por √≠ndice

  frutas.add("uva"); // Agregar un elemento
 debugPrint("Todas las frutas: \$frutas");
}
''',
    });

    // Detalle para 'M√©todos y propiedades de listas'
    await db.insert('detail', {
      'id': 9,
      'subtopic_id': 's02t02l01', // Subtopic 'M√©todos y propiedades de listas'
      'module': 'Jr',
      'definition': 'Las listas en Dart tienen varios m√©todos y propiedades que te permiten manipular y obtener informaci√≥n sobre sus elementos.\n\n'
          '¬øQu√© puedes hacer con una lista? üõ†Ô∏è\n\n'
          'Imaginemos que tienes una lista de tareas pendientes. Con los m√©todos y propiedades de las listas, puedes agregar tareas, eliminar las completadas, ordenarlas o incluso ver cu√°ntas tienes. En Dart, las listas tienen m√©todos como `add`, `remove`, `sort` y propiedades como `length`.\n\n'
          'Por ejemplo, si escribes `frutas.length`, obtienes la cantidad de elementos en la lista. Si usas `frutas.sort()`, la lista se ordena alfab√©ticamente.\n\n'
          'Estos m√©todos y propiedades hacen que trabajar con listas sea m√°s f√°cil y eficiente.',
      'img_url': '',
      'code_example': '''
void main() {
  List<String> frutas = ["manzana", "banana", "naranja"];

 debugPrint("N√∫mero de frutas: \${frutas.length}"); // Propiedad length

  frutas.add("uva"); // M√©todo add
  frutas.remove("banana"); // M√©todo remove
  frutas.sort(); // M√©todo sort

 debugPrint("Frutas actualizadas: \$frutas");
}
''',
    });

    // Detalle para 'Mapas'
    await db.insert('detail', {
      'id': 10,
      'subtopic_id': 's03t02l01', // Subtopic 'Mapas'
      'module': 'Jr',
      'definition': 'Un mapa en Dart es una colecci√≥n de pares clave-valor, donde cada clave es √∫nica y se asocia a un valor espec√≠fico.\n\n'
          '¬øPero qu√© es un mapa? üó∫Ô∏è\n\n'
          'Imaginemos que tienes un diccionario. Cada palabra (clave) tiene un significado (valor). En Dart, un mapa funciona de la misma manera. Puedes usar una clave para acceder a su valor correspondiente.\n\n'
          'Por ejemplo, si escribes `Map<String, int> edades = {"Alice": 25, "Bob": 30}`, est√°s creando un mapa donde las claves son nombres y los valores son edades. Puedes acceder a la edad de Alice usando `edades["Alice"]`.\n\n'
          'Los mapas son √∫tiles cuando necesitas almacenar y buscar datos de manera eficiente usando claves √∫nicas.',
      'img_url': '',
      'code_example': '''
void main() {
  Map<String, int> edades = {
    "Alice": 25,
    "Bob": 30,
  };

 debugPrint("La edad de Alice es: \${edades["Alice"]}"); // Acceso por clave

  edades["Carlos"] = 28; // Agregar un nuevo par clave-valor
 debugPrint("Todas las edades: \$edades");
}
''',
    });

    // Detalle para 'M√©todos y propiedades de mapas'
    await db.insert('detail', {
      'id': 11,
      'subtopic_id': 's04t02l01', // Subtopic 'M√©todos y propiedades de mapas'
      'module': 'Jr',
      'definition': 'Los mapas en Dart tienen varios m√©todos y propiedades que te permiten manipular y obtener informaci√≥n sobre sus pares clave-valor.\n\n'
          '¬øQu√© puedes hacer con un mapa? üõ†Ô∏è\n\n'
          'Imaginemos que tienes un mapa de tesoros. Con los m√©todos y propiedades de los mapas, puedes agregar nuevos tesoros, eliminar los que ya encontraste o ver cu√°ntos te faltan. En Dart, los mapas tienen m√©todos como `putIfAbsent`, `remove` y propiedades como `keys` y `values`.\n\n'
          'Por ejemplo, si escribes `edades.keys`, obtienes una lista de todas las claves en el mapa. Si usas `edades.remove("Alice")`, eliminas el par clave-valor asociado a "Alice".\n\n'
          'Estos m√©todos y propiedades hacen que trabajar con mapas sea m√°s f√°cil y eficiente.',
      'img_url': '',
      'code_example': '''
void main() {
  Map<String, int> edades = {
    "Alice": 25,
    "Bob": 30,
  };

 debugPrint("Claves del mapa: \${edades.keys}"); // Propiedad keys
 debugPrint("Valores del mapa: \${edades.values}"); // Propiedad values

  edades.remove("Alice"); // M√©todo remove
  edades.putIfAbsent("Carlos", () => 28); // M√©todo putIfAbsent

 debugPrint("Mapa actualizado: \$edades");
}
''',
    });

    // Detalle para 'Sets'
    await db.insert('detail', {
      'id': 12,
      'subtopic_id': 's05t02l01', // Subtopic 'Sets'
      'module': 'Jr',
      'definition': 'Un set en Dart es una colecci√≥n de elementos √∫nicos, es decir, no permite duplicados.\n\n'
          'Vamos de nuevo. üé≤\n\n'
          'Imaginemos que tienes una caja de crayones. No puedes tener dos crayones del mismo color. En Dart, un set funciona de la misma manera. Solo puedes agregar elementos √∫nicos, y si intentas agregar un duplicado, simplemente se ignora.\n\n'
          'Por ejemplo, si escribes `Set<String> colores = {"rojo", "verde", "azul"}`, est√°s creando un set de colores. Si intentas agregar "rojo" de nuevo, el set no cambiar√°.\n\n'
          'Los sets son √∫tiles cuando necesitas asegurarte de que no haya elementos duplicados en una colecci√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  Set<String> colores = {"rojo", "verde", "azul"}; // Set de colores

  colores.add("amarillo"); // Agregar un nuevo color
  colores.add("rojo"); // Intentar agregar un duplicado (no se agrega)

 debugPrint("Colores disponibles: \$colores");
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic3Level1(db) async {
    // Detalle para 'Introducci√≥n a las funciones'
    await db.insert('detail', {
      'id': 13,
      'subtopic_id': 's01t03l01',
      'module': 'Jr',
      'definition': 'Una funci√≥n en Dart es un bloque de c√≥digo que realiza una tarea espec√≠fica y puede ser reutilizado en diferentes partes de un programa.\n\n'
          '¬øPero qu√© es realmente una funci√≥n? ü§î\n\n'
          'Imaginemos que tienes una receta de cocina. En lugar de repetir los mismos pasos cada vez que quieres cocinar, simplemente sigues la receta. En Dart, una funci√≥n es como esa receta: defines una serie de pasos (c√≥digo) que se ejecutan cada vez que la llamas.\n\n'
          'Por ejemplo, si escribes una funci√≥n para saludar, puedes usarla cada vez que necesites mostrar un mensaje de bienvenida. Esto hace que tu c√≥digo sea m√°s organizado y f√°cil de mantener.\n\n'
          'Las funciones son una parte fundamental de la programaci√≥n. √ösalas para dividir tu c√≥digo en tareas m√°s peque√±as y manejables.',
      'img_url': '',
      'code_example': '''
void main() {
  // Llamada a la funci√≥n saludar
  saludar();
}

// Definici√≥n de la funci√≥n saludar
void saludar() {
 debugPrint("¬°Hola, bienvenido a RutaCode!");
}
''',
    });

    // Detalle para 'Declaraci√≥n y llamada'
    await db.insert('detail', {
      'id': 14,
      'subtopic_id': 's02t03l01', // Subtopic 'Declaraci√≥n y llamada'
      'module': 'Jr',
      'definition': 'Declarar una funci√≥n en Dart implica definir su nombre, par√°metros y el c√≥digo que ejecutar√°. Llamar a una funci√≥n significa ejecutar ese c√≥digo en cualquier parte del programa.\n\n'
          '¬øC√≥mo se declara y llama una funci√≥n? üõ†Ô∏è\n\n'
          'Imaginemos que tienes una m√°quina de caf√©. Primero, defines c√≥mo funciona la m√°quina (declaraci√≥n). Luego, cada vez que quieres un caf√©, simplemente presionas un bot√≥n (llamada). En Dart, declarar una funci√≥n es como configurar la m√°quina, y llamarla es como presionar el bot√≥n.\n\n'
          'Por ejemplo, si declaras una funci√≥n `sumar`, puedes llamarla cada vez que necesites realizar una suma. Esto evita repetir el mismo c√≥digo una y otra vez.\n\n'
          'Declarar y llamar funciones es una de las habilidades m√°s importantes en programaci√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  // Llamada a la funci√≥n sumar
  int resultado = sumar(5, 3);
 debugPrint("El resultado es: \$resultado");
}

// Declaraci√≥n de la funci√≥n sumar
int sumar(int a, int b) {
  return a + b;
}
''',
    });

    // Detalle para 'Par√°metros y retorno'
    await db.insert('detail', {
      'id': 15,
      'subtopic_id': 's03t03l01', // Subtopic 'Par√°metros y retorno'
      'module': 'Jr',
      'definition': 'Los par√°metros son valores que se pasan a una funci√≥n para que los use en su ejecuci√≥n. El retorno es el valor que la funci√≥n devuelve despu√©s de realizar su tarea.\n\n'
          '¬øQu√© son los par√°metros y el retorno? üéØ\n\n'
          'Imaginemos que tienes una calculadora. Los n√∫meros que ingresas son los par√°metros, y el resultado que muestra es el retorno. En Dart, los par√°metros son como los n√∫meros que le das a la funci√≥n, y el retorno es el resultado que obtienes despu√©s de ejecutarla.\n\n'
          'Por ejemplo, si escribes una funci√≥n `multiplicar`, puedes pasarle dos n√∫meros como par√°metros y obtener su producto como retorno. Esto hace que las funciones sean flexibles y reutilizables.\n\n'
          'Los par√°metros y el retorno son herramientas poderosas para crear funciones din√°micas y √∫tiles.',
      'img_url': '',
      'code_example': '''
void main() {
  // Llamada a la funci√≥n multiplicar
  int resultado = multiplicar(4, 7);
 debugPrint("El producto es: \$resultado");
}

// Declaraci√≥n de la funci√≥n multiplicar
int multiplicar(int a, int b) {
  return a * b;
}
''',
    });

    // Detalle para 'Funciones an√≥nimas y lambdas'
    await db.insert('detail', {
      'id': 16,
      'subtopic_id': 's04t03l01', // Subtopic 'Funciones an√≥nimas y lambdas'
      'module': 'Jr',
      'definition': 'Una funci√≥n an√≥nima en Dart es una funci√≥n que no tiene nombre y se define directamente donde se necesita. Las lambdas son una forma abreviada de escribir funciones an√≥nimas.\n\n'
          '¬øQu√© son las funciones an√≥nimas y lambdas? üé≠\n\n'
          'Imaginemos que tienes una nota adhesiva. En lugar de escribir una receta completa, simplemente anotas los pasos clave. En Dart, una funci√≥n an√≥nima es como esa nota: no tiene un nombre formal, pero hace su trabajo en el momento.\n\n'
          'Por ejemplo, si necesitas una funci√≥n r√°pida para sumar dos n√∫meros, puedes usar una lambda como `(a, b) => a + b`. Esto es √∫til cuando no necesitas reutilizar la funci√≥n en otro lugar.\n\n'
          'Las funciones an√≥nimas y lambdas son ideales para tareas r√°pidas y espec√≠ficas.',
      'img_url': '',
      'code_example': '''
void main() {
  // Uso de una funci√≥n an√≥nima
  var sumar = (int a, int b) {
    return a + b;
  };

 debugPrint("Suma: \${sumar(5, 3)}");

  // Uso de una lambda
  var multiplicar = (int a, int b) => a * b;
 debugPrint("Multiplicaci√≥n: \${multiplicar(4, 7)}");
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic4Level1(db) async {
    // Detalle para 'Operadores Aritm√©ticos: +, -, *, /, %'
    await db.insert('detail', {
      'id': 17,
      'subtopic_id': 's01t04l01', // Subtopic 'Operadores Aritm√©ticos'
      'module': 'Jr',
      'definition': 'Los operadores aritm√©ticos en Dart se utilizan para realizar operaciones matem√°ticas b√°sicas como suma, resta, multiplicaci√≥n, divisi√≥n y m√≥dulo.\n\n'
          '¬øQu√© son los operadores aritm√©ticos? üßÆ\n\n'
          'Imaginemos que tienes una calculadora. Los operadores aritm√©ticos son como los botones que usas para sumar, restar, multiplicar o dividir n√∫meros. En Dart, estos operadores te permiten hacer c√°lculos directamente en tu c√≥digo.\n\n'
          'Por ejemplo, si escribes `5 + 3`, obtienes `8`. Si usas `10 % 3`, obtienes `1` (el resto de la divisi√≥n). Estos operadores son fundamentales para realizar c√°lculos en tus programas.\n\n'
          'Los operadores aritm√©ticos son herramientas b√°sicas pero poderosas en programaci√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  int a = 10;
  int b = 3;

 debugPrint("Suma: \${a + b}"); // 13
 debugPrint("Resta: \${a - b}"); // 7
 debugPrint("Multiplicaci√≥n: \${a * b}"); // 30
 debugPrint("Divisi√≥n: \${a / b}"); // 3.333...
 debugPrint("M√≥dulo: \${a % b}"); // 1
}
''',
    });

    // Detalle para 'Operadores de Comparaci√≥n: ==, !=, >, <, >=, <='
    await db.insert('detail', {
      'id': 18,
      'subtopic_id': 's02t04l01', // Subtopic 'Operadores de Comparaci√≥n'
      'module': 'Jr',
      'definition': 'Los operadores de comparaci√≥n en Dart se utilizan para comparar dos valores y devolver un resultado booleano (`true` o `false`).\n\n'
          '¬øQu√© son los operadores de comparaci√≥n? üîç\n\n'
          'Imaginemos que tienes una balanza. Los operadores de comparaci√≥n son como las pesas que te ayudan a determinar si un lado es m√°s pesado, m√°s ligero o igual que el otro. En Dart, estos operadores te permiten comparar valores y tomar decisiones basadas en el resultado.\n\n'
          'Por ejemplo, si escribes `5 > 3`, obtienes `true`. Si usas `10 == 10`, tambi√©n obtienes `true`. Estos operadores son esenciales para controlar el flujo de tu programa.\n\n'
          'Los operadores de comparaci√≥n son clave para tomar decisiones en tu c√≥digo.',
      'img_url': '',
      'code_example': '''
void main() {
  int a = 10;
  int b = 3;

 debugPrint("¬øa es igual a b? \${a == b}"); // false
 debugPrint("¬øa es diferente de b? \${a != b}"); // true
 debugPrint("¬øa es mayor que b? \${a > b}"); // true
 debugPrint("¬øa es menor que b? \${a < b}"); // false
 debugPrint("¬øa es mayor o igual que b? \${a >= b}"); // true
 debugPrint("¬øa es menor o igual que b? \${a <= b}"); // false
}
''',
    });

    // Detalle para 'Operadores L√≥gicos: &&, ||, !'
    await db.insert('detail', {
      'id': 19,
      'subtopic_id': 's03t04l01', // Subtopic 'Operadores L√≥gicos'
      'module': 'Jr',
      'definition': 'Los operadores l√≥gicos en Dart se utilizan para combinar o invertir expresiones booleanas. Los principales son `&&` (AND), `||` (OR) y `!` (NOT).\n\n'
          '¬øQu√© son los operadores l√≥gicos? üß†\n\n'
          'Imaginemos que tienes dos interruptores de luz. El operador `&&` (AND) enciende la luz solo si ambos interruptores est√°n activados. El operador `||` (OR) enciende la luz si al menos uno est√° activado. El operador `!` (NOT) invierte el estado: si la luz est√° encendida, la apaga, y viceversa.\n\n'
          'Por ejemplo, si escribes `true && false`, obtienes `false`. Si usas `true || false`, obtienes `true`. Estos operadores son esenciales para crear condiciones complejas en tu c√≥digo.\n\n'
          'Los operadores l√≥gicos te permiten tomar decisiones m√°s sofisticadas en tus programas.',
      'img_url': '',
      'code_example': '''
void main() {
  bool a = true;
  bool b = false;

 debugPrint("AND: \${a && b}"); // false
 debugPrint("OR: \${a || b}"); // true
 debugPrint("NOT: \${!a}"); // false
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic5Level1(db) async {
    // Detalle para 'if'
    await db.insert('detail', {
      'id': 20,
      'subtopic_id': 's01t05l01', // Subtopic 'if'
      'module': 'Jr',
      'definition': 'La sentencia `if` en Dart se utiliza para ejecutar un bloque de c√≥digo solo si una condici√≥n es verdadera (`true`).\n\n'
          '¬øQu√© es un `if`? ü§î\n\n'
          'Imaginemos que tienes un sem√°foro. Si la luz est√° en verde (`true`), puedes cruzar la calle. Si est√° en rojo (`false`), debes detenerte. En Dart, el `if` funciona de la misma manera: ejecuta un bloque de c√≥digo solo si la condici√≥n es verdadera.\n\n'
          'Por ejemplo, si escribes `if (edad >= 18) {debugPrint("Eres mayor de edad"); }`, el mensaje se mostrar√° solo si la condici√≥n `edad >= 18` es verdadera.\n\n'
          'El `if` es una de las estructuras de control m√°s b√°sicas y esenciales en programaci√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  int edad = 20;

  if (edad >= 18) {
   debugPrint("Eres mayor de edad");
  }
}
''',
    });

    // Detalle para 'else'
    await db.insert('detail', {
      'id': 21,
      'subtopic_id': 's02t05l01', // Subtopic 'else'
      'module': 'Jr',
      'definition':
          'La sentencia `else` en Dart se utiliza junto con `if` para ejecutar un bloque de c√≥digo cuando la condici√≥n del `if` es falsa (`false`).\n\n'
              '¬øQu√© es un `else`? ü§∑‚Äç‚ôÇÔ∏è\n\n'
              'Imaginemos que el sem√°foro est√° en rojo. Si no puedes cruzar (`if` es falso), entonces debes esperar (`else`). En Dart, el `else` te permite definir qu√© hacer cuando la condici√≥n del `if` no se cumple.\n\n'
              'Por ejemplo, si escribes `if (edad >= 18) {debugPrint("Eres mayor de edad"); } else {debugPrint("Eres menor de edad"); }`, el mensaje "Eres menor de edad" se mostrar√° si la condici√≥n `edad >= 18` es falsa.\n\n'
              'El `else` es √∫til para manejar casos alternativos en tu c√≥digo.',
      'img_url': '',
      'code_example': '''
void main() {
  int edad = 15;

  if (edad >= 18) {
   debugPrint("Eres mayor de edad");
  } else {
   debugPrint("Eres menor de edad");
  }
}
''',
    });

    // Detalle para 'else if'
    await db.insert('detail', {
      'id': 22,
      'subtopic_id': 's03t05l01', // Subtopic 'else if'
      'module': 'Jr',
      'definition': 'La sentencia `else if` en Dart se utiliza para verificar m√∫ltiples condiciones en secuencia despu√©s de un `if`.\n\n'
          '¬øQu√© es un `else if`? ü§®\n\n'
          'Imaginemos que tienes un sem√°foro con tres luces: verde, amarillo y rojo. Si no es verde (`if` es falso), verificas si es amarillo (`else if`). Si tampoco es amarillo, entonces es rojo (`else`). En Dart, el `else if` te permite manejar m√∫ltiples condiciones de manera ordenada.\n\n'
          'Por ejemplo, si escribes `if (nota >= 90) {debugPrint("Excelente"); } else if (nota >= 70) {debugPrint("Aprobado"); } else {debugPrint("Reprobado"); }`, el programa evaluar√° cada condici√≥n en orden.\n\n'
          'El `else if` es ideal para manejar decisiones m√°s complejas en tu c√≥digo.',
      'img_url': '',
      'code_example': '''
void main() {
  int nota = 85;

  if (nota >= 90) {
   debugPrint("Excelente");
  } else if (nota >= 70) {
   debugPrint("Aprobado");
  } else {
   debugPrint("Reprobado");
  }
}
''',
    });

    // Detalle para 'for'
    await db.insert('detail', {
      'id': 23,
      'subtopic_id': 's04t05l01', // Subtopic 'for'
      'module': 'Jr',
      'definition': 'El bucle `for` en Dart se utiliza para repetir un bloque de c√≥digo un n√∫mero espec√≠fico de veces.\n\n'
          '¬øQu√© es un `for`? üîÑ\n\n'
          'Imaginemos que tienes una lista de tareas y quieres hacer cada una de ellas en orden. El bucle `for` es como un asistente que recorre la lista y realiza cada tarea por ti. En Dart, el `for` te permite repetir un bloque de c√≥digo mientras una condici√≥n sea verdadera.\n\n'
          'Por ejemplo, si escribes `for (int i = 0; i < 5; i++) {debugPrint("Iteraci√≥n \$i"); }`, el mensaje se mostrar√° 5 veces, una por cada iteraci√≥n del bucle.\n\n'
          'El `for` es una herramienta poderosa para automatizar tareas repetitivas.',
      'img_url': '',
      'code_example': '''
void main() {
  for (int i = 0; i < 5; i++) {
   debugPrint("Iteraci√≥n \$i");
  }
}
''',
    });

    // Detalle para 'while'
    await db.insert('detail', {
      'id': 24,
      'subtopic_id': 's05t05l01', // Subtopic 'while'
      'module': 'Jr',
      'definition': 'El bucle `while` en Dart se utiliza para repetir un bloque de c√≥digo mientras una condici√≥n sea verdadera (`true`).\n\n'
          '¬øQu√© es un `while`? üîÑ\n\n'
          'Imaginemos que est√°s lavando platos. Mientras haya platos sucios (`condici√≥n verdadera`), sigues lavando. En Dart, el `while` funciona de la misma manera: repite un bloque de c√≥digo mientras la condici√≥n sea verdadera.\n\n'
          'Por ejemplo, si escribes `while (contador < 5) {debugPrint("Contador: \$contador"); contador++; }`, el mensaje se mostrar√° hasta que `contador` sea 5.\n\n'
          'El `while` es √∫til cuando no sabes cu√°ntas veces necesitas repetir una tarea.',
      'img_url': '',
      'code_example': '''
void main() {
  int contador = 0;

  while (contador < 5) {
   debugPrint("Contador: \$contador");
    contador++;
  }
}
''',
    });

    // Detalle para 'do-while'
    await db.insert('detail', {
      'id': 25,
      'subtopic_id': 's06t05l01', // Subtopic 'do-while'
      'module': 'Jr',
      'definition': 'El bucle `do-while` en Dart es similar al `while`, pero garantiza que el bloque de c√≥digo se ejecute al menos una vez, incluso si la condici√≥n es falsa.\n\n'
          '¬øQu√© es un `do-while`? üîÑ\n\n'
          'Imaginemos que est√°s probando un nuevo plato. Primero lo cocinas (`hacer`), y luego decides si te gusta (`condici√≥n`). En Dart, el `do-while` funciona de la misma manera: ejecuta el bloque de c√≥digo al menos una vez y luego verifica la condici√≥n.\n\n'
          'Por ejemplo, si escribes `do {debugPrint("Contador: \$contador"); contador++; } while (contador < 5);`, el mensaje se mostrar√° al menos una vez, incluso si `contador` ya es 5.\n\n'
          'El `do-while` es √∫til cuando necesitas ejecutar un bloque de c√≥digo al menos una vez antes de verificar la condici√≥n.',
      'img_url': '',
      'code_example': '''
void main() {
  int contador = 0;

  do {
   debugPrint("Contador: \$contador");
    contador++;
  } while (contador < 5);
}
''',
    });

    // Detalle para 'switch case'
    await db.insert('detail', {
      'id': 26,
      'subtopic_id': 's07t05l01', // Subtopic 'switch case'
      'module': 'Jr',
      'definition': 'La sentencia `switch case` en Dart se utiliza para ejecutar diferentes bloques de c√≥digo dependiendo del valor de una variable.\n\n'
          '¬øQu√© es un `switch case`? üéöÔ∏è\n\n'
          'Imaginemos que tienes un men√∫ de opciones. Dependiendo de la opci√≥n que elijas, se ejecuta una acci√≥n diferente. En Dart, el `switch case` funciona de la misma manera: eval√∫a el valor de una variable y ejecuta el bloque de c√≥digo correspondiente.\n\n'
          'Por ejemplo, si escribes `switch (dia) { case 1:debugPrint("Lunes"); break; case 2:debugPrint("Martes"); break; }`, el programa mostrar√° el nombre del d√≠a correspondiente al valor de `dia`.\n\n'
          'El `switch case` es ideal para manejar m√∫ltiples casos de manera organizada.',
      'img_url': '',
      'code_example': '''
void main() {
  int dia = 2;

  switch (dia) {
    case 1:
     debugPrint("Lunes");
      break;
    case 2:
     debugPrint("Martes");
      break;
    default:
     debugPrint("D√≠a no v√°lido");
  }
}
''',
    });
  }

  Future<void> insertDetailsJrLevel2(Database db) async {
    try {
      await _insertDetailsJrTopic1Level2(db);
      await _insertDetailsJrTopic2Level2(db);
      await _insertDetailsJrTopic3Level2(db);
      await _insertDetailsJrTopic4Level2(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 2: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level2(db) async {
    // Detalle para 'Instalaci√≥n de Flutter CLI'
    await db.insert('detail', {
      'id': 27,
      'subtopic_id': 's01t01l02', // Subtopic 'Instalaci√≥n de Flutter CLI'
      'module': 'Jr',
      'definition': 'La instalaci√≥n de Flutter CLI es el primer paso para comenzar a desarrollar aplicaciones con Flutter. La CLI (Command Line Interface) es una herramienta que te permite interactuar con Flutter desde la terminal o consola.\n\n'
          '¬øPor qu√© es importante instalar Flutter CLI? üõ†Ô∏è\n\n'
          'Flutter CLI es esencial porque te permite realizar tareas como crear proyectos, ejecutar aplicaciones, gestionar dependencias y mucho m√°s, directamente desde la terminal. Sin la CLI, no podr√≠as aprovechar todas las funcionalidades que Flutter ofrece.\n\n'
          'Adem√°s, la CLI es obligatoria porque es la forma oficial de interactuar con Flutter. Aunque existen IDEs como Android Studio o VS Code que facilitan el desarrollo, en el fondo, estos entornos utilizan la CLI para ejecutar comandos.\n\n'
          'Instalar Flutter CLI es el primer paso para convertirte en un desarrollador Flutter profesional.',
      'img_url': '',
      'code_example': '''
# Ejemplo de instalaci√≥n de Flutter CLI en Linux/macOS:
# 1. Descarga Flutter desde https://flutter.dev
# 2. Extrae el archivo en una ubicaci√≥n de tu preferencia.
# 3. Agrega Flutter a tu PATH:
export PATH="\$PATH:`pwd`/flutter/bin"

# Verifica la instalaci√≥n:
flutter --version
''',
    });

    // Detalle para 'Comandos b√°sicos de Flutter CLI'
    await db.insert('detail', {
      'id': 28,
      'subtopic_id': 's02t01l02', // Subtopic 'Comandos b√°sicos de Flutter CLI'
      'module': 'Jr',
      'definition': 'Los comandos b√°sicos de Flutter CLI son herramientas esenciales para gestionar y desarrollar aplicaciones Flutter de manera eficiente.\n\n'
          '¬øPor qu√© son importantes estos comandos? üöÄ\n\n'
          'Los comandos de Flutter CLI te permiten realizar tareas comunes como crear proyectos, ejecutar aplicaciones en diferentes dispositivos, gestionar dependencias y mucho m√°s. Dominar estos comandos te har√° m√°s productivo y te permitir√° trabajar de manera m√°s profesional.\n\n'
          'Algunos comandos b√°sicos incluyen:\n'
          '- `flutter create`: Crea un nuevo proyecto Flutter.\n'
          '- `flutter run`: Ejecuta la aplicaci√≥n en un dispositivo conectado o emulador.\n'
          '- `flutter pub get`: Obtiene las dependencias del proyecto.\n\n'
          'Estos comandos son la base para trabajar con Flutter desde la terminal.',
      'img_url': '',
      'code_example': '''
# Crear un nuevo proyecto Flutter
flutter create mi_proyecto

# Navegar al directorio del proyecto
cd mi_proyecto

# Ejecutar la aplicaci√≥n en un dispositivo conectado
flutter run

# Obtener dependencias del proyecto
flutter pub get
''',
    });

    // Detalle para 'Creaci√≥n de un proyecto Flutter desde la CLI'
    await db.insert('detail', {
      'id': 29,
      'subtopic_id':
          's03t01l02', // Subtopic 'Creaci√≥n de un proyecto Flutter desde la CLI'
      'module': 'Jr',
      'definition': 'Crear un proyecto Flutter desde la CLI es el primer paso para comenzar a desarrollar una aplicaci√≥n. Este proceso genera la estructura b√°sica del proyecto, incluyendo archivos y carpetas esenciales.\n\n'
          '¬øPor qu√© es importante crear un proyecto desde la CLI? üèóÔ∏è\n\n'
          'Crear un proyecto desde la CLI te da control total sobre la configuraci√≥n inicial de tu aplicaci√≥n. Adem√°s, es la forma m√°s r√°pida y eficiente de empezar un nuevo proyecto, ya que la CLI genera autom√°ticamente todo lo que necesitas para comenzar a codificar.\n\n'
          'El comando `flutter create` no solo crea la estructura del proyecto, sino que tambi√©n configura el entorno de desarrollo con las dependencias y archivos necesarios. Esto te ahorra tiempo y te permite enfocarte en lo m√°s importante: desarrollar tu aplicaci√≥n.\n\n'
          'Crear un proyecto desde la CLI es una habilidad fundamental para cualquier desarrollador Flutter.',
      'img_url': '',
      'code_example': '''
# Crear un nuevo proyecto Flutter
flutter create mi_app

# Navegar al directorio del proyecto
cd mi_app

# Ejecutar la aplicaci√≥n
flutter run
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level2(db) async {
    // Detalle para 'Configuraci√≥n de VS Code para Flutter'
    await db.insert('detail', {
      'id': 30,
      'subtopic_id':
          's01t02l02', // Subtopic 'Configuraci√≥n de VS Code para Flutter'
      'module': 'Jr',
      'definition': 'Configurar Visual Studio Code (VS Code) para Flutter es esencial para tener un entorno de desarrollo eficiente y productivo. VS Code es uno de los editores de c√≥digo m√°s populares para desarrollar aplicaciones Flutter.\n\n'
          '¬øPor qu√© es importante configurar VS Code para Flutter? üõ†Ô∏è\n\n'
          'VS Code es ligero, personalizable y tiene un excelente soporte para Flutter. Al configurarlo correctamente, obtienes caracter√≠sticas como resaltado de sintaxis, autocompletado, depuraci√≥n integrada y acceso r√°pido a los comandos de Flutter.\n\n'
          'Adem√°s, VS Code es compatible con extensiones que mejoran a√∫n m√°s tu experiencia de desarrollo. Una configuraci√≥n adecuada te ahorra tiempo y te permite enfocarte en escribir c√≥digo en lugar de lidiar con problemas del entorno.\n\n'
          'Configurar VS Code para Flutter es un paso clave para ser m√°s productivo.',
      'img_url': '',
      'code_example': '''
# Pasos b√°sicos para configurar VS Code para Flutter:
1. Instala VS Code desde https://code.visualstudio.com.
2. Abre VS Code y ve a la pesta√±a de extensiones (Ctrl+Shift+X).
3. Busca e instala la extensi√≥n "Flutter".
4. Reinicia VS Code para aplicar los cambios.
''',
    });

    // Detalle para 'Extensiones recomendadas para Flutter'
    await db.insert('detail', {
      'id': 31,
      'subtopic_id':
          's02t02l02', // Subtopic 'Extensiones recomendadas para Flutter'
      'module': 'Jr',
      'definition': 'Las extensiones de VS Code son herramientas que mejoran tu experiencia de desarrollo con Flutter. Algunas extensiones son esenciales para aumentar tu productividad y aprovechar al m√°ximo el editor.\n\n'
          '¬øPor qu√© son importantes las extensiones? üöÄ\n\n'
          'Las extensiones te permiten agregar funcionalidades adicionales a VS Code, como soporte para Dart, formateo autom√°tico de c√≥digo, integraci√≥n con Git y herramientas de depuraci√≥n avanzadas. Estas herramientas te ayudan a escribir c√≥digo m√°s r√°pido, detectar errores con facilidad y mantener un c√≥digo limpio y organizado.\n\n'
          'Algunas extensiones recomendadas para Flutter son:\n'
          '- **Flutter**: Soporte oficial para Flutter y Dart.\n'
          '- **Dart**: Resaltado de sintaxis y autocompletado para Dart.\n'
          '- **Pubspec Assist**: Facilita la gesti√≥n de dependencias en el archivo `pubspec.yaml`.\n\n'
          'Instalar las extensiones correctas puede marcar la diferencia en tu flujo de trabajo.',
      'img_url': '',
      'code_example': '''
# Extensiones recomendadas para Flutter en VS Code:
1. Flutter (extensi√≥n oficial)
2. Dart
3. Pubspec Assist
4. Error Lens (resalta errores directamente en el c√≥digo)
5. Bracket Pair Colorizer (colorea los pares de corchetes para mejor legibilidad)
''',
    });

    // Detalle para 'Depuraci√≥n de c√≥digo en VS Code'
    await db.insert('detail', {
      'id': 32,
      'subtopic_id': 's03t02l02', // Subtopic 'Depuraci√≥n de c√≥digo en VS Code'
      'module': 'Jr',
      'definition': 'La depuraci√≥n de c√≥digo en VS Code es una de las caracter√≠sticas m√°s poderosas para identificar y corregir errores en tu aplicaci√≥n Flutter. VS Code ofrece herramientas integradas para depurar tu c√≥digo de manera eficiente.\n\n'
          '¬øPor qu√© es importante la depuraci√≥n en VS Code? üîç\n\n'
          'La depuraci√≥n te permite ejecutar tu aplicaci√≥n paso a paso, inspeccionar variables, ver el flujo de ejecuci√≥n y detectar errores en tiempo real. Con VS Code, puedes configurar puntos de interrupci√≥n (breakpoints), inspeccionar el estado de tu aplicaci√≥n y corregir problemas de manera r√°pida y efectiva.\n\n'
          'Adem√°s, VS Code se integra perfectamente con Flutter, lo que te permite depurar tanto en dispositivos f√≠sicos como en emuladores. Esto es esencial para garantizar que tu aplicaci√≥n funcione correctamente en diferentes entornos.\n\n'
          'Dominar la depuraci√≥n en VS Code es una habilidad clave para cualquier desarrollador Flutter.',
      'img_url': '',
      'code_example': '''
# Pasos para depurar en VS Code:
1. Abre tu proyecto Flutter en VS Code.
2. Establece puntos de interrupci√≥n (breakpoints) haciendo clic en el margen izquierdo del editor.
3. Presiona F5 o selecciona "Run > Start Debugging" para iniciar la depuraci√≥n.
4. Usa la barra de herramientas de depuraci√≥n para:
   - Continuar la ejecuci√≥n (F5).
   - Ejecutar paso a paso (F10).
   - Inspeccionar variables en la secci√≥n "Variables".
''',
    });
  }

  Future<void> _insertDetailsJrTopic3Level2(db) async {
    // Detalle para 'Configuraci√≥n de Android Studio para Flutter'
    await db.insert('detail', {
      'id': 33,
      'subtopic_id':
          's01t03l02', // Subtopic 'Configuraci√≥n de Android Studio para Flutter'
      'module': 'Jr',
      'definition': 'Configurar Android Studio para Flutter es esencial si prefieres un entorno de desarrollo m√°s robusto y especializado en aplicaciones m√≥viles. Android Studio es el IDE oficial para el desarrollo de Android y tiene un excelente soporte para Flutter.\n\n'
          '¬øPor qu√© es importante configurar Android Studio para Flutter? üõ†Ô∏è\n\n'
          'Android Studio ofrece herramientas avanzadas como un editor de c√≥digo inteligente, un emulador de dispositivos integrado, y soporte para depuraci√≥n y pruebas. Adem√°s, es compatible con plugins de Flutter y Dart, lo que lo convierte en una opci√≥n poderosa para desarrollar aplicaciones multiplataforma.\n\n'
          'Configurar Android Studio correctamente te permite aprovechar al m√°ximo sus caracter√≠sticas, como el dise√±o visual de interfaces, la gesti√≥n de dependencias y la integraci√≥n con herramientas de desarrollo avanzadas.\n\n'
          'Configurar Android Studio para Flutter es un paso clave para desarrolladores que buscan un entorno profesional.',
      'img_url': '',
      'code_example': '''
# Pasos b√°sicos para configurar Android Studio para Flutter:
1. Descarga e instala Android Studio desde https://developer.android.com/studio.
2. Abre Android Studio y ve a "Plugins" en la configuraci√≥n.
3. Busca e instala los plugins "Flutter" y "Dart".
4. Reinicia Android Studio para aplicar los cambios.
5. Configura el SDK de Flutter en "File > Settings > Languages & Frameworks > Flutter".
''',
    });

    // Detalle para 'Uso del emulador en Android Studio'
    await db.insert('detail', {
      'id': 34,
      'subtopic_id':
          's02t03l02', // Subtopic 'Uso del emulador en Android Studio'
      'module': 'Jr',
      'definition': 'El emulador de Android Studio es una herramienta poderosa para probar tus aplicaciones Flutter en diferentes dispositivos virtuales sin necesidad de hardware f√≠sico.\n\n'
          '¬øPor qu√© es importante el emulador? üì±\n\n'
          'El emulador te permite simular diferentes dispositivos Android con varias configuraciones de pantalla, versiones del sistema operativo y hardware. Esto es esencial para asegurarte de que tu aplicaci√≥n funcione correctamente en una amplia gama de dispositivos.\n\n'
          'Adem√°s, el emulador se integra perfectamente con Android Studio, lo que te permite depurar y probar tu aplicaci√≥n en tiempo real. Puedes simular interacciones t√°ctiles, rotaciones de pantalla, llamadas telef√≥nicas y m√°s.\n\n'
          'Dominar el uso del emulador es fundamental para garantizar la calidad de tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Pasos para usar el emulador en Android Studio:
1. Abre Android Studio y ve a "Tools > Device Manager".
2. Crea un nuevo dispositivo virtual (AVD) seleccionando un dispositivo y una imagen del sistema.
3. Inicia el emulador desde el Device Manager.
4. Ejecuta tu aplicaci√≥n Flutter seleccionando el emulador como dispositivo de destino.
''',
    });

    // Detalle para 'Integraci√≥n con herramientas de desarrollo'
    await db.insert('detail', {
      'id': 35,
      'subtopic_id':
          's03t03l02', // Subtopic 'Integraci√≥n con herramientas de desarrollo'
      'module': 'Jr',
      'definition': 'Android Studio se integra con una variedad de herramientas de desarrollo que mejoran tu flujo de trabajo y te ayudan a crear aplicaciones Flutter de alta calidad.\n\n'
          '¬øPor qu√© es importante la integraci√≥n con herramientas de desarrollo? üöÄ\n\n'
          'La integraci√≥n con herramientas como el SDK de Android, Gradle, y los plugins de Flutter y Dart te permite gestionar dependencias, construir y depurar tu aplicaci√≥n, y realizar pruebas de manera eficiente. Adem√°s, Android Studio ofrece soporte para Git, lo que facilita el control de versiones de tu c√≥digo.\n\n'
          'Otras herramientas integradas incluyen el profiler para analizar el rendimiento de tu aplicaci√≥n, el dise√±ador de interfaces para crear layouts visualmente, y el asistente de pruebas para ejecutar pruebas unitarias y de interfaz.\n\n'
          'Aprovechar estas herramientas te permite ser m√°s productivo y mantener un c√≥digo de alta calidad.',
      'img_url': '',
      'code_example': '''
# Herramientas integradas en Android Studio:
1. **SDK Manager**: Para gestionar versiones del SDK de Android.
2. **Gradle**: Para construir y gestionar dependencias del proyecto.
3. **Flutter y Dart plugins**: Para soporte avanzado de Flutter y Dart.
4. **Git Integration**: Para control de versiones.
5. **Profiler**: Para analizar el rendimiento de la aplicaci√≥n.
6. **Layout Editor**: Para dise√±ar interfaces de usuario visualmente.
''',
    });
  }

  Future<void> _insertDetailsJrTopic4Level2(db) async {
    // Detalle para 'Configuraci√≥n de IntelliJ IDEA para Flutter'
    await db.insert('detail', {
      'id': 36,
      'subtopic_id':
          's01t04l02', // Subtopic 'Configuraci√≥n de IntelliJ IDEA para Flutter'
      'module': 'Jr',
      'definition': 'Configurar IntelliJ IDEA para Flutter es una excelente opci√≥n si prefieres un entorno de desarrollo robusto y altamente personalizable. IntelliJ IDEA es un IDE potente que ofrece soporte nativo para Flutter y Dart.\n\n'
          '¬øPor qu√© es importante configurar IntelliJ IDEA para Flutter? üõ†Ô∏è\n\n'
          'IntelliJ IDEA es conocido por su inteligencia de c√≥digo avanzada, herramientas de refactorizaci√≥n y soporte para m√∫ltiples lenguajes de programaci√≥n. Al configurarlo para Flutter, obtienes caracter√≠sticas como autocompletado inteligente, resaltado de sintaxis, y herramientas de depuraci√≥n integradas.\n\n'
          'Adem√°s, IntelliJ IDEA es compatible con plugins de Flutter y Dart, lo que lo convierte en una opci√≥n poderosa para desarrolladores que buscan un entorno profesional y altamente personalizable.\n\n'
          'Configurar IntelliJ IDEA para Flutter es ideal para quienes buscan un IDE completo y avanzado.',
      'img_url': '',
      'code_example': '''
# Pasos b√°sicos para configurar IntelliJ IDEA para Flutter:
1. Descarga e instala IntelliJ IDEA desde https://www.jetbrains.com/idea.
2. Abre IntelliJ IDEA y ve a "Plugins" en la configuraci√≥n.
3. Busca e instala los plugins "Flutter" y "Dart".
4. Reinicia IntelliJ IDEA para aplicar los cambios.
5. Configura el SDK de Flutter en "File > Settings > Languages & Frameworks > Flutter".
''',
    });

    // Detalle para 'Comparaci√≥n entre IntelliJ IDEA y VS Code'
    await db.insert('detail', {
      'id': 37,
      'subtopic_id':
          's02t04l02', // Subtopic 'Comparaci√≥n entre IntelliJ IDEA y VS Code'
      'module': 'Jr',
      'definition': 'IntelliJ IDEA y VS Code son dos de los entornos de desarrollo m√°s populares para Flutter, pero cada uno tiene sus propias ventajas y desventajas.\n\n'
          '¬øCu√°l es la diferencia entre IntelliJ IDEA y VS Code? ü§î\n\n'
          '- **IntelliJ IDEA**: Es un IDE completo y robusto, ideal para desarrolladores que buscan herramientas avanzadas como refactorizaci√≥n inteligente, integraci√≥n profunda con herramientas de desarrollo y soporte para m√∫ltiples lenguajes. Sin embargo, puede ser m√°s pesado y consumir m√°s recursos.\n\n'
          '- **VS Code**: Es un editor de c√≥digo ligero y altamente personalizable, perfecto para desarrolladores que prefieren un entorno m√°s simple y r√°pido. Tiene un excelente soporte para Flutter a trav√©s de extensiones, pero carece de algunas caracter√≠sticas avanzadas de IntelliJ IDEA.\n\n'
          'La elecci√≥n entre IntelliJ IDEA y VS Code depende de tus necesidades y preferencias personales. Ambos son excelentes opciones para desarrollar aplicaciones Flutter.',
      'img_url': '',
      'code_example': '''
# Comparaci√≥n r√°pida:
- **IntelliJ IDEA**: IDE completo, herramientas avanzadas, m√°s pesado.
- **VS Code**: Editor ligero, personalizable, m√°s r√°pido.
''',
    });

    // Detalle para 'Depuraci√≥n en IntelliJ IDEA'
    await db.insert('detail', {
      'id': 38,
      'subtopic_id': 's03t04l02', // Subtopic 'Depuraci√≥n en IntelliJ IDEA'
      'module': 'Jr',
      'definition': 'La depuraci√≥n en IntelliJ IDEA es una de las caracter√≠sticas m√°s poderosas para identificar y corregir errores en tu aplicaci√≥n Flutter. IntelliJ IDEA ofrece herramientas avanzadas de depuraci√≥n que te permiten inspeccionar el estado de tu aplicaci√≥n en tiempo real.\n\n'
          '¬øPor qu√© es importante la depuraci√≥n en IntelliJ IDEA? üîç\n\n'
          'IntelliJ IDEA te permite establecer puntos de interrupci√≥n (breakpoints), inspeccionar variables, ver el flujo de ejecuci√≥n y corregir errores de manera eficiente. Adem√°s, se integra perfectamente con Flutter, lo que te permite depurar tanto en dispositivos f√≠sicos como en emuladores.\n\n'
          'Otras caracter√≠sticas incluyen la capacidad de evaluar expresiones durante la depuraci√≥n, inspeccionar el estado de los widgets en aplicaciones Flutter, y realizar pruebas unitarias y de interfaz directamente desde el IDE.\n\n'
          'Dominar la depuraci√≥n en IntelliJ IDEA es esencial para garantizar la calidad de tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Pasos para depurar en IntelliJ IDEA:
1. Abre tu proyecto Flutter en IntelliJ IDEA.
2. Establece puntos de interrupci√≥n (breakpoints) haciendo clic en el margen izquierdo del editor.
3. Presiona "Debug" o selecciona "Run > Debug" para iniciar la depuraci√≥n.
4. Usa la barra de herramientas de depuraci√≥n para:
   - Continuar la ejecuci√≥n (F9).
   - Ejecutar paso a paso (F8).
   - Inspeccionar variables en la secci√≥n "Variables".
''',
    });
  }

  Future<void> insertDetailsJrLevel3(Database db) async {
    try {
      await _insertDetailsJrTopic1Level3(db);
      await _insertDetailsJrTopic2Level3(db);
      await _insertDetailsJrTopic3Level3(db);
      await _insertDetailsJrTopic4Level3(db);
      await _insertDetailsJrTopic5Level3(db);
      await _insertDetailsJrTopic6Level3(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 3: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level3(db) async {
    // Detalle para 'Introducci√≥n a los widgets heredados'
    await db.insert('detail', {
      'id': 39,
      'subtopic_id':
          's01t01l03', // Subtopic 'Introducci√≥n a los widgets heredados'
      'module': 'Jr',
      'definition': 'Los widgets heredados en Flutter son aquellos que formaron parte de las primeras versiones del framework y que a√∫n est√°n disponibles para su uso. Estos widgets son la base sobre la cual se construyeron los widgets modernos.\n\n'
          '¬øQu√© son los widgets heredados? üï∞Ô∏è\n\n'
          'Los widgets heredados, como `Center`, `Padding`, y `Container`, son componentes b√°sicos que permiten construir interfaces de usuario en Flutter. Aunque siguen siendo √∫tiles, muchos de ellos han sido reemplazados o mejorados por widgets m√°s modernos y eficientes.\n\n'
          'Estos widgets son ideales para entender los fundamentos de Flutter y c√≥mo se construyen las interfaces. Sin embargo, es recomendable familiarizarse tambi√©n con los widgets modernos para aprovechar al m√°ximo las capacidades del framework.\n\n'
          'Los widgets heredados son una parte importante de la historia de Flutter y siguen siendo relevantes en ciertos contextos.',
      'img_url': '',
      'code_example': '''
// Ejemplo de un widget heredado: Center
Center(
  child: Text("Hola, mundo"),
)
''',
    });

    // Detalle para 'Uso de widgets heredados en Flutter'
    await db.insert('detail', {
      'id': 40,
      'subtopic_id':
          's02t01l03', // Subtopic 'Uso de widgets heredados en Flutter'
      'module': 'Jr',
      'definition': 'Los widgets heredados en Flutter, como `Center`, `Padding`, y `Container`, se utilizan para construir interfaces de usuario de manera sencilla y eficiente. Aunque son b√°sicos, siguen siendo √∫tiles en muchos escenarios.\n\n'
          '¬øC√≥mo se usan los widgets heredados? üõ†Ô∏è\n\n'
          'Los widgets heredados se utilizan de la misma manera que los widgets modernos: se colocan en el √°rbol de widgets y se personalizan con propiedades como `child`, `padding`, o `color`. Por ejemplo, el widget `Center` se usa para centrar un widget hijo en su contenedor, mientras que `Padding` agrega espacio alrededor de un widget.\n\n'
          'Aunque los widgets heredados son f√°ciles de usar, es importante recordar que los widgets modernos ofrecen m√°s funcionalidades y mejor rendimiento. Sin embargo, los widgets heredados son una excelente opci√≥n para proyectos simples o para aprender los fundamentos de Flutter.\n\n'
          'El uso de widgets heredados es una habilidad b√°sica pero importante en Flutter.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de widgets heredados
Container(
  color: Colors.blue,
  padding: EdgeInsets.all(16.0),
  child: Center(
    child: Text("Hola, mundo", style: TextStyle(color: Colors.white)),
  ),
)
''',
    });

    // Detalle para 'Diferencias entre widgets heredados y modernos'
    await db.insert('detail', {
      'id': 41,
      'subtopic_id':
          's03t01l03', // Subtopic 'Diferencias entre widgets heredados y modernos'
      'module': 'Jr',
      'definition': 'Los widgets heredados y modernos en Flutter tienen diferencias clave en t√©rminos de funcionalidad, rendimiento y flexibilidad. Aunque los widgets heredados son m√°s simples, los widgets modernos ofrecen m√°s caracter√≠sticas y mejor optimizaci√≥n.\n\n'
          '¬øCu√°les son las diferencias principales? ü§î\n\n'
          '- **Funcionalidad**: Los widgets modernos, como `Flex`, `Stack`, y `ListView`, ofrecen m√°s opciones de personalizaci√≥n y manejo de layouts complejos.\n'
          '- **Rendimiento**: Los widgets modernos est√°n optimizados para mejorar el rendimiento y reducir el consumo de recursos.\n'
          '- **Flexibilidad**: Los widgets modernos permiten una mayor flexibilidad en el dise√±o y la interacci√≥n, como el soporte para animaciones y efectos avanzados.\n\n'
          'Aunque los widgets heredados son √∫tiles para proyectos simples o para aprender, los widgets modernos son la mejor opci√≥n para aplicaciones complejas y de alto rendimiento.',
      'img_url': '',
      'code_example': '''
// Ejemplo de un widget moderno: Column
Column(
  children: [
    Text("Elemento 1"),
    Text("Elemento 2"),
    Text("Elemento 3"),
  ],
)

// Ejemplo de un widget heredado: Center
Center(
  child: Text("Hola, mundo"),
)
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level3(db) async {
    // Detalle para 'Creaci√≥n de widgets Stateless'
    await db.insert('detail', {
      'id': 42,
      'subtopic_id': 's01t02l03',
      'module': 'Jr',
      'definition': 'Un widget Stateless en Flutter es un componente de interfaz de usuario que no mantiene ning√∫n estado interno. Esto significa que su apariencia y comportamiento no cambian a lo largo de su ciclo de vida.\n\n'
          '¬øC√≥mo se crea un widget Stateless? üõ†Ô∏è\n\n'
          'Para crear un widget Stateless, debes extender la clase `StatelessWidget` y sobrescribir el m√©todo `build`. Este m√©todo define c√≥mo se debe construir la interfaz del widget. Los widgets Stateless son ideales para componentes que no necesitan cambiar din√°micamente, como textos, iconos o contenedores est√°ticos.\n\n'
          'Por ejemplo, si creas un widget `MiTexto`, este podr√≠a mostrar un mensaje fijo que no cambia durante la ejecuci√≥n de la aplicaci√≥n.\n\n'
          'Crear widgets Stateless es una habilidad fundamental en Flutter, ya que son la base para construir interfaces simples y eficientes.',
      'img_url': '',
      'code_example': '''
// Ejemplo de un widget Stateless
class MiTexto extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Text("Hola, mundo");
  }
}
''',
    });

    // Detalle para 'Uso de widgets Stateless en interfaces'
    await db.insert('detail', {
      'id': 43,
      'subtopic_id': 's02t02l03',
      'module': 'Jr',
      'definition': 'Los widgets Stateless se utilizan ampliamente en Flutter para construir interfaces de usuario que no requieren cambios din√°micos. Son componentes ligeros y eficientes que se pueden combinar para crear layouts complejos.\n\n'
          '¬øC√≥mo se usan los widgets Stateless en interfaces? üñºÔ∏è\n\n'
          'Los widgets Stateless se colocan en el √°rbol de widgets y se personalizan con propiedades como `child`, `color`, o `padding`. Por ejemplo, puedes usar un `Text` para mostrar un mensaje, un `Icon` para mostrar un √≠cono, o un `Container` para agrupar otros widgets.\n\n'
          'Estos widgets son ideales para componentes est√°ticos, como encabezados, pies de p√°gina, o elementos de lista que no cambian durante la ejecuci√≥n de la aplicaci√≥n.\n\n'
          'El uso de widgets Stateless es esencial para construir interfaces eficientes y f√°ciles de mantener.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de widgets Stateless en una interfaz
Scaffold(
  appBar: AppBar(
    title: Text("Mi App"),
  ),
  body: Center(
    child: Column(
      children: [
        Text("Bienvenido a RutaCode"),
        Icon(Icons.star, color: Colors.yellow),
      ],
    ),
  ),
)
''',
    });

    // Detalle para 'Ventajas y limitaciones de los widgets Stateless'
    await db.insert('detail', {
      'id': 44,
      'subtopic_id': 's03t02l03',
      'module': 'Jr',
      'definition': 'Los widgets Stateless tienen ventajas y limitaciones que los hacen ideales para ciertos casos de uso, pero no para todos.\n\n'
          '¬øCu√°les son las ventajas y limitaciones de los widgets Stateless? ü§î\n\n'
          '- **Ventajas**:\n'
          '  - **Eficiencia**: Al no mantener estado interno, son m√°s ligeros y r√°pidos de renderizar.\n'
          '  - **Simplicidad**: Son f√°ciles de crear y usar, lo que los hace ideales para componentes est√°ticos.\n'
          '  - **Reutilizaci√≥n**: Pueden ser reutilizados en diferentes partes de la aplicaci√≥n sin preocuparse por el estado.\n\n'
          '- **Limitaciones**:\n'
          '  - **Inmutabilidad**: No pueden cambiar su apariencia o comportamiento una vez construidos.\n'
          '  - **Uso limitado**: No son adecuados para componentes que necesitan actualizarse din√°micamente, como formularios o animaciones.\n\n'
          'Los widgets Stateless son una herramienta poderosa, pero es importante entender cu√°ndo usarlos y cu√°ndo optar por widgets Stateful.',
      'img_url': '',
      'code_example': '''
// Ejemplo de un widget Stateless con ventajas y limitaciones
class MiBoton extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () {
       debugPrint("Bot√≥n presionado");
      },
      child: Text("Presiona aqu√≠"),
    );
  }
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic3Level3(db) async {
    // Detalle para 'Creaci√≥n de widgets Stateful'
    await db.insert('detail', {
      'id': 45,
      'subtopic_id': 's01t03l03',
      'module': 'Jr',
      'definition': 'Un widget Stateful en Flutter es un componente de interfaz de usuario que puede mantener un estado interno. Esto significa que su apariencia y comportamiento pueden cambiar din√°micamente durante la ejecuci√≥n de la aplicaci√≥n.\n\n'
          '¬øC√≥mo se crea un widget Stateful? üõ†Ô∏è\n\n'
          'Para crear un widget Stateful, debes extender la clase `StatefulWidget` y definir una clase `State` asociada. La clase `State` es donde se gestiona el estado del widget y se define c√≥mo se debe construir la interfaz en el m√©todo `build`.\n\n'
          'Por ejemplo, si creas un widget `Contador`, este podr√≠a mostrar un n√∫mero que aumenta cada vez que el usuario presiona un bot√≥n.\n\n'
          'Crear widgets Stateful es esencial para construir interfaces din√°micas e interactivas en Flutter.',
      'img_url': '',
      'code_example': '''
// Ejemplo de un widget Stateful
class Contador extends StatefulWidget {
  @override
  _ContadorState createState() => _ContadorState();
}

class _ContadorState extends State<Contador> {
  int _contador = 0;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text("Contador: \$_contador"),
        ElevatedButton(
          onPressed: () {
            setState(() {
              _contador++;
            });
          },
          child: Text("Incrementar"),
        ),
      ],
    );
  }
}
''',
    });

    // Detalle para 'Uso de setState para actualizar la interfaz'
    await db.insert('detail', {
      'id': 46,
      'subtopic_id': 's02t03l03',
      'module': 'Jr',
      'definition': 'El m√©todo `setState` en Flutter se utiliza para actualizar el estado interno de un widget Stateful y notificar al framework que la interfaz debe reconstruirse.\n\n'
          '¬øC√≥mo se usa `setState` para actualizar la interfaz? üîÑ\n\n'
          'Cuando llamas a `setState`, Flutter marca el widget como "sucio" y lo reconstruye con el nuevo estado. Esto es √∫til para actualizar la interfaz en respuesta a interacciones del usuario, como hacer clic en un bot√≥n o cambiar el valor de un campo de texto.\n\n'
          'Por ejemplo, si tienes un contador que aumenta cada vez que el usuario presiona un bot√≥n, puedes usar `setState` para actualizar el valor del contador y reconstruir la interfaz.\n\n'
          'El uso correcto de `setState` es clave para crear aplicaciones din√°micas y reactivas en Flutter.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de setState
class _ContadorState extends State<Contador> {
  int _contador = 0;

  void _incrementar() {
    setState(() {
      _contador++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text("Contador: \$_contador"),
        ElevatedButton(
          onPressed: _incrementar,
          child: Text("Incrementar"),
        ),
      ],
    );
  }
}
''',
    });

    // Detalle para 'Ciclo de vida de un widget Stateful'
    await db.insert('detail', {
      'id': 47,
      'subtopic_id': 's03t03l03',
      'module': 'Jr',
      'definition': 'El ciclo de vida de un widget Stateful en Flutter consta de una serie de m√©todos que se ejecutan en diferentes momentos, desde la creaci√≥n hasta la destrucci√≥n del widget.\n\n'
          '¬øCu√°l es el ciclo de vida de un widget Stateful? üîÑ\n\n'
          'Los m√©todos principales del ciclo de vida son:\n'
          '- **createState**: Se llama cuando se crea el widget Stateful.\n'
          '- **initState**: Se llama una sola vez, justo despu√©s de que el widget se inserta en el √°rbol de widgets.\n'
          '- **build**: Se llama cada vez que el widget necesita reconstruirse.\n'
          '- **dispose**: Se llama cuando el widget se elimina del √°rbol de widgets.\n\n'
          'Estos m√©todos te permiten gestionar recursos, inicializar datos y realizar tareas de limpieza. Entender el ciclo de vida es esencial para crear widgets Stateful eficientes y libres de errores.',
      'img_url': '',
      'code_example': '''
// Ejemplo de ciclo de vida de un widget Stateful
class _MiWidgetState extends State<MiWidget> {
  @override
  void initState() {
    super.initState();
   debugPrint("Widget inicializado");
  }

  @override
  void dispose() {
   debugPrint("Widget eliminado");
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Text("Hola, mundo");
  }
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic4Level3(db) async {
    // Detalle para 'Uso de Container y Padding para estilos'
    await db.insert('detail', {
      'id': 48,
      'subtopic_id': 's01t04l03',
      'module': 'Jr',
      'definition': 'El widget `Container` en Flutter es una caja vers√°til que permite aplicar estilos como colores, bordes, m√°rgenes y relleno (padding) a otros widgets. El widget `Padding` se utiliza espec√≠ficamente para agregar espacio alrededor de un widget hijo.\n\n'
          '¬øC√≥mo se usan `Container` y `Padding` para estilos? üé®\n\n'
          'El `Container` es ideal para agrupar widgets y aplicar estilos como colores de fondo, bordes redondeados o sombras. Por otro lado, `Padding` es √∫til cuando necesitas agregar espacio alrededor de un widget sin aplicar otros estilos.\n\n'
          'Por ejemplo, puedes usar un `Container` para crear un bot√≥n con un color de fondo y bordes redondeados, y un `Padding` para agregar espacio alrededor del texto dentro del bot√≥n.\n\n'
          'Estos widgets son herramientas esenciales para dise√±ar interfaces atractivas y bien estructuradas en Flutter.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de Container y Padding
Container(
  padding: EdgeInsets.all(16.0), // Padding interno
  decoration: BoxDecoration(
    color: Colors.blue,
    borderRadius: BorderRadius.circular(8.0),
  ),
  child: Padding(
    padding: EdgeInsets.symmetric(vertical: 8.0), // Padding adicional
    child: Text(
      "Hola, mundo",
      style: TextStyle(color: Colors.white),
    ),
  ),
)
''',
    });

    // Detalle para 'Personalizaci√≥n de textos con TextStyle'
    await db.insert('detail', {
      'id': 49,
      'subtopic_id': 's02t04l03',
      'module': 'Jr',
      'definition': 'El widget `TextStyle` en Flutter se utiliza para personalizar la apariencia de los textos, como el color, el tama√±o, la fuente y el estilo (negrita, cursiva, etc.).\n\n'
          '¬øC√≥mo se personalizan los textos con `TextStyle`? ‚úçÔ∏è\n\n'
          'Con `TextStyle`, puedes definir c√≥mo se ve un texto en tu aplicaci√≥n. Por ejemplo, puedes cambiar el color del texto, ajustar el tama√±o de la fuente, o aplicar estilos como negrita o cursiva.\n\n'
          'Adem√°s, puedes combinar `TextStyle` con otros widgets, como `Text` o `RichText`, para crear textos m√°s complejos y visualmente atractivos.\n\n'
          'La personalizaci√≥n de textos es clave para crear interfaces claras y profesionales.',
      'img_url': '',
      'code_example': '''
// Ejemplo de personalizaci√≥n de textos con TextStyle
Text(
  "Bienvenido a RutaCode",
  style: TextStyle(
    color: Colors.blue,
    fontSize: 24.0,
    fontWeight: FontWeight.bold,
    fontStyle: FontStyle.italic,
  ),
)
''',
    });

    // Detalle para 'Uso de Theme para estilos globales'
    await db.insert('detail', {
      'id': 50,
      'subtopic_id': 's03t04l03',
      'module': 'Jr',
      'definition': 'El widget `Theme` en Flutter se utiliza para definir estilos globales que se aplican a toda la aplicaci√≥n o a una parte de ella. Esto incluye colores, tipograf√≠as y otros estilos visuales.\n\n'
          '¬øPor qu√© es importante usar `Theme` para estilos globales? üåç\n\n'
          'El uso de `Theme` te permite mantener la consistencia visual en toda la aplicaci√≥n. En lugar de definir estilos individualmente para cada widget, puedes definir un tema global que se aplique autom√°ticamente.\n\n'
          'Por ejemplo, puedes definir un color primario y una tipograf√≠a en el tema, y todos los widgets de la aplicaci√≥n usar√°n estos estilos de manera coherente.\n\n'
          'Usar `Theme` es una pr√°ctica recomendada para crear aplicaciones con un dise√±o uniforme y profesional.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de Theme para estilos globales
MaterialApp(
  theme: ThemeData(
    primaryColor: Colors.blue,
    accentColor: Colors.green,
    textTheme: TextTheme(
      bodyText1: TextStyle(fontSize: 16.0, color: Colors.black),
      headline1: TextStyle(fontSize: 32.0, fontWeight: FontWeight.bold),
    ),
  ),
  home: MyHomePage(),
)
''',
    });
  }

  Future<void> _insertDetailsJrTopic5Level3(db) async {
    // Detalle para 'Introducci√≥n a los widgets Material'
    await db.insert('detail', {
      'id': 51,
      'subtopic_id': 's01t05l03',
      'module': 'Jr',
      'definition': 'Los widgets Material en Flutter son componentes de interfaz de usuario que siguen las pautas de dise√±o de Material Design, creadas por Google. Estos widgets ofrecen una apariencia y comportamiento consistentes con las aplicaciones de Android.\n\n'
          '¬øQu√© son los widgets Material? üé®\n\n'
          'Los widgets Material incluyen componentes como `AppBar`, `FloatingActionButton`, `Drawer`, y muchos m√°s. Estos widgets est√°n dise√±ados para ser visualmente atractivos, f√°ciles de usar y altamente personalizables.\n\n'
          'Material Design se enfoca en la simplicidad, la consistencia y la usabilidad, lo que lo convierte en una excelente opci√≥n para aplicaciones modernas y profesionales.\n\n'
          'Los widgets Material son esenciales para crear aplicaciones que sigan las mejores pr√°cticas de dise√±o de Android.',
      'img_url': '',
      'code_example': '''
// Ejemplo b√°sico de una aplicaci√≥n con Material Design
MaterialApp(
  home: Scaffold(
    appBar: AppBar(
      title: Text("Mi App"),
    ),
    body: Center(
      child: Text("Hola, mundo"),
    ),
  ),
)
''',
    });

    // Detalle para 'Uso de AppBar, FloatingActionButton y Drawer'
    await db.insert('detail', {
      'id': 52,
      'subtopic_id': 's02t05l03',
      'module': 'Jr',
      'definition': 'Los widgets `AppBar`, `FloatingActionButton` y `Drawer` son componentes clave de Material Design que se utilizan para crear interfaces funcionales y atractivas.\n\n'
          '¬øC√≥mo se usan estos widgets? üõ†Ô∏è\n\n'
          '- **AppBar**: Es una barra superior que muestra el t√≠tulo de la aplicaci√≥n y acciones comunes, como botones de men√∫ o b√∫squeda.\n'
          '- **FloatingActionButton**: Es un bot√≥n circular flotante que se usa para acciones principales, como agregar un elemento nuevo.\n'
          '- **Drawer**: Es un panel lateral que se desliza para mostrar opciones de navegaci√≥n o configuraci√≥n.\n\n'
          'Estos widgets son f√°ciles de usar y se integran perfectamente con otros componentes de Material Design.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de AppBar, FloatingActionButton y Drawer
Scaffold(
  appBar: AppBar(
    title: Text("Mi App"),
    actions: [
      IconButton(
        icon: Icon(Icons.search),
        onPressed: () {},
      ),
    ],
  ),
  drawer: Drawer(
    child: ListView(
      children: [
        ListTile(
          title: Text("Inicio"),
          onTap: () {},
        ),
        ListTile(
          title: Text("Configuraci√≥n"),
          onTap: () {},
        ),
      ],
    ),
  ),
  floatingActionButton: FloatingActionButton(
    onPressed: () {},
    child: Icon(Icons.add),
  ),
  body: Center(
    child: Text("Hola, mundo"),
  ),
)
''',
    });

    // Detalle para 'Personalizaci√≥n de widgets Material'
    await db.insert('detail', {
      'id': 53,
      'subtopic_id': 's03t05l03',
      'module': 'Jr',
      'definition': 'Los widgets Material en Flutter son altamente personalizables, lo que te permite adaptarlos a las necesidades espec√≠ficas de tu aplicaci√≥n.\n\n'
          '¬øC√≥mo se personalizan los widgets Material? üé®\n\n'
          'Puedes personalizar colores, formas, tipograf√≠as y comportamientos de los widgets Material utilizando propiedades como `color`, `shape`, `textTheme`, y m√°s. Adem√°s, puedes usar el widget `Theme` para aplicar estilos globales.\n\n'
          'Por ejemplo, puedes cambiar el color de la `AppBar`, agregar bordes redondeados al `FloatingActionButton`, o modificar el estilo del texto en el `Drawer`.\n\n'
          'La personalizaci√≥n de widgets Material es clave para crear aplicaciones √∫nicas y coherentes con la identidad visual de tu marca.',
      'img_url': '',
      'code_example': '''
// Ejemplo de personalizaci√≥n de widgets Material
AppBar(
  title: Text("Mi App"),
  backgroundColor: Colors.deepPurple,
  shape: RoundedRectangleBorder(
    borderRadius: BorderRadius.vertical(
      bottom: Radius.circular(20),
    ),
  ),
)

FloatingActionButton(
  onPressed: () {},
  child: Icon(Icons.add),
  backgroundColor: Colors.green,
  shape: CircleBorder(),
)
''',
    });
  }

  Future<void> _insertDetailsJrTopic6Level3(db) async {
    // Detalle para 'Introducci√≥n a los widgets Cupertino'
    await db.insert('detail', {
      'id': 54,
      'subtopic_id': 's01t06l03',
      'module': 'Jr',
      'definition': 'Los widgets Cupertino en Flutter son componentes de interfaz de usuario que siguen las pautas de dise√±o de iOS. Estos widgets ofrecen una apariencia y comportamiento consistentes con las aplicaciones de Apple.\n\n'
          '¬øQu√© son los widgets Cupertino? üçé\n\n'
          'Los widgets Cupertino incluyen componentes como `CupertinoNavigationBar`, `CupertinoButton`, y `CupertinoPicker`. Estos widgets est√°n dise√±ados para imitar el estilo visual y las interacciones t√≠picas de iOS.\n\n'
          'Usar widgets Cupertino es ideal si deseas que tu aplicaci√≥n tenga un aspecto nativo en dispositivos iOS, manteniendo la consistencia con las aplicaciones de Apple.\n\n'
          'Los widgets Cupertino son esenciales para crear aplicaciones que sigan las mejores pr√°cticas de dise√±o de iOS.',
      'img_url': '',
      'code_example': '''
// Ejemplo b√°sico de una aplicaci√≥n con Cupertino Design
CupertinoApp(
  home: CupertinoPageScaffold(
    navigationBar: CupertinoNavigationBar(
      middle: Text("Mi App"),
    ),
    child: Center(
      child: Text("Hola, mundo"),
    ),
  ),
)
''',
    });

    // Detalle para 'Uso de CupertinoNavigationBar y CupertinoButton'
    await db.insert('detail', {
      'id': 55,
      'subtopic_id': 's02t06l03',
      'module': 'Jr',
      'definition': 'Los widgets `CupertinoNavigationBar` y `CupertinoButton` son componentes clave de Cupertino Design que se utilizan para crear interfaces funcionales y atractivas en iOS.\n\n'
          '¬øC√≥mo se usan estos widgets? üõ†Ô∏è\n\n'
          '- **CupertinoNavigationBar**: Es una barra de navegaci√≥n superior que muestra el t√≠tulo de la aplicaci√≥n y acciones comunes, como botones de retroceso o acciones adicionales.\n'
          '- **CupertinoButton**: Es un bot√≥n con el estilo t√≠pico de iOS, que se usa para acciones principales o secundarias.\n\n'
          'Estos widgets son f√°ciles de usar y se integran perfectamente con otros componentes de Cupertino Design.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de CupertinoNavigationBar y CupertinoButton
CupertinoPageScaffold(
  navigationBar: CupertinoNavigationBar(
    middle: Text("Mi App"),
    trailing: CupertinoButton(
      child: Text("Guardar"),
      onPressed: () {},
    ),
  ),
  child: Center(
    child: CupertinoButton(
      child: Text("Presiona aqu√≠"),
      onPressed: () {},
    ),
  ),
)
''',
    });

    // Detalle para 'Diferencias entre widgets Material y Cupertino'
    await db.insert('detail', {
      'id': 56,
      'subtopic_id': 's03t06l03',
      'module': 'Jr',
      'definition': 'Los widgets Material y Cupertino en Flutter tienen diferencias clave en t√©rminos de dise√±o, comportamiento y uso.\n\n'
          '¬øCu√°les son las diferencias principales? ü§î\n\n'
          '- **Dise√±o**: Los widgets Material siguen las pautas de Material Design (Android), mientras que los widgets Cupertino imitan el dise√±o de iOS.\n'
          '- **Comportamiento**: Los widgets Material tienen animaciones y transiciones t√≠picas de Android, mientras que los widgets Cupertino replican las interacciones de iOS.\n'
          '- **Uso**: Los widgets Material son ideales para aplicaciones Android o multiplataforma, mientras que los widgets Cupertino son mejores para aplicaciones iOS.\n\n'
          'Elegir entre Material y Cupertino depende del p√∫blico objetivo y la plataforma en la que se ejecutar√° tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
// Ejemplo de comparaci√≥n entre Material y Cupertino
MaterialApp(
  home: Scaffold(
    appBar: AppBar(
      title: Text("Material Design"),
    ),
    body: Center(
      child: Text("Hola, Android"),
    ),
  ),
)

CupertinoApp(
  home: CupertinoPageScaffold(
    navigationBar: CupertinoNavigationBar(
      middle: Text("Cupertino Design"),
    ),
    child: Center(
      child: Text("Hola, iOS"),
    ),
  ),
)
''',
    });
  }

  Future<void> insertDetailsJrLevel4(Database db) async {
    try {
      await _insertDetailsJrTopic1Level4(db);
      await _insertDetailsJrTopic2Level4(db);
      await _insertDetailsJrTopic3Level4(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 4: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level4(db) async {
    // Detalle para 'Agregar fuentes personalizadas a un proyecto Flutter'
    await db.insert('detail', {
      'id': 58,
      'subtopic_id': 's01t01l04',
      'module': 'Jr',
      'definition': 'Agregar fuentes personalizadas a un proyecto Flutter permite personalizar la tipograf√≠a de la aplicaci√≥n para que coincida con la identidad visual de tu marca.\n\n'
          '¬øC√≥mo se agregan fuentes personalizadas? üñãÔ∏è\n\n'
          'Para agregar una fuente personalizada, debes incluir los archivos de la fuente (por ejemplo, `.ttf` o `.otf`) en la carpeta `assets/fonts` de tu proyecto y luego configurar el archivo `pubspec.yaml` para que Flutter reconozca estas fuentes.\n\n'
          'Una vez configuradas, puedes usar las fuentes personalizadas en tu aplicaci√≥n mediante el widget `TextStyle`.\n\n'
          'Agregar fuentes personalizadas es una forma sencilla de mejorar la apariencia y la consistencia visual de tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Ejemplo de configuraci√≥n en pubspec.yaml
flutter:
  fonts:
    - family: MiFuente
      fonts:
        - asset: assets/fonts/MiFuente-Regular.ttf
        - asset: assets/fonts/MiFuente-Bold.ttf
          weight: 700

# Uso de la fuente personalizada en TextStyle
Text(
  "Hola, mundo",
  style: TextStyle(
    fontFamily: "MiFuente",
    fontSize: 24.0,
    fontWeight: FontWeight.bold,
  ),
)
''',
    });

    // Detalle para 'Uso de fuentes en TextStyle'
    await db.insert('detail', {
      'id': 59,
      'subtopic_id': 's02t01l04',
      'module': 'Jr',
      'definition': 'El widget `TextStyle` en Flutter se utiliza para aplicar estilos a los textos, incluyendo el uso de fuentes personalizadas.\n\n'
          '¬øC√≥mo se usan las fuentes en `TextStyle`? ‚úçÔ∏è\n\n'
          'Una vez que has agregado una fuente personalizada a tu proyecto, puedes usarla en cualquier widget `Text` especificando el nombre de la fuente en la propiedad `fontFamily` de `TextStyle`.\n\n'
          'Adem√°s, puedes combinar la fuente con otras propiedades como `fontSize`, `fontWeight`, y `color` para crear textos visualmente atractivos.\n\n'
          'El uso de fuentes personalizadas es clave para mantener la consistencia visual en tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de fuentes en TextStyle
Text(
  "Bienvenido a RutaCode",
  style: TextStyle(
    fontFamily: "MiFuente",
    fontSize: 24.0,
    fontWeight: FontWeight.bold,
    color: Colors.blue,
  ),
)
''',
    });

    // Detalle para 'Optimizaci√≥n de fuentes para diferentes dispositivos'
    await db.insert('detail', {
      'id': 60,
      'subtopic_id': 's03t01l04',
      'module': 'Jr',
      'definition': 'Optimizar fuentes para diferentes dispositivos es esencial para garantizar que tu aplicaci√≥n se vea bien en pantallas de distintos tama√±os y resoluciones.\n\n'
          '¬øC√≥mo se optimizan las fuentes? üì±\n\n'
          'Para optimizar las fuentes, puedes usar tama√±os de fuente relativos (como `MediaQuery` o `LayoutBuilder`) en lugar de valores fijos. Tambi√©n es recomendable utilizar fuentes que sean legibles en diferentes tama√±os y pesos.\n\n'
          'Adem√°s, puedes cargar diferentes versiones de una fuente (por ejemplo, regular, bold, italic) y usarlas seg√∫n el contexto o el dispositivo.\n\n'
          'La optimizaci√≥n de fuentes es clave para crear aplicaciones accesibles y adaptables.',
      'img_url': '',
      'code_example': '''
// Ejemplo de optimizaci√≥n de fuentes con MediaQuery
Text(
  "Texto adaptable",
  style: TextStyle(
    fontFamily: "MiFuente",
    fontSize: MediaQuery.of(context).size.width * 0.05, // Tama√±o relativo
    fontWeight: FontWeight.bold,
  ),
)
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level4(db) async {
    // Detalle para 'Agregar im√°genes a un proyecto Flutter'
    await db.insert('detail', {
      'id': 61,
      'subtopic_id': 's01t02l04',
      'module': 'Jr',
      'definition': 'Agregar im√°genes a un proyecto Flutter es esencial para crear interfaces visualmente atractivas. Las im√°genes pueden ser locales (almacenadas en el proyecto) o remotas (descargadas desde una URL).\n\n'
          '¬øC√≥mo se agregan im√°genes? üñºÔ∏è\n\n'
          'Para agregar im√°genes locales, debes colocarlas en la carpeta `assets/images` y configurar el archivo `pubspec.yaml` para que Flutter las reconozca. Para im√°genes remotas, puedes usar la URL directamente.\n\n'
          'Flutter proporciona widgets como `Image.asset` para im√°genes locales y `Image.network` para im√°genes remotas.\n\n'
          'Agregar im√°genes es una forma sencilla de mejorar la experiencia visual de tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Ejemplo de configuraci√≥n en pubspec.yaml
flutter:
  assets:
    - assets/images/mi_imagen.png

# Uso de Image.asset para im√°genes locales
Image.asset("assets/images/mi_imagen.png")

# Uso de Image.network para im√°genes remotas
Image.network("https://example.com/mi_imagen.jpg")
''',
    });

    // Detalle para 'Uso de Image.asset y Image.network'
    await db.insert('detail', {
      'id': 62,
      'subtopic_id': 's02t02l04',
      'module': 'Jr',
      'definition': 'Los widgets `Image.asset` y `Image.network` en Flutter se utilizan para mostrar im√°genes locales y remotas, respectivamente.\n\n'
          '¬øC√≥mo se usan estos widgets? üñºÔ∏è\n\n'
          '- **Image.asset**: Se usa para cargar im√°genes que est√°n almacenadas en la carpeta `assets` de tu proyecto. Es ideal para im√°genes que no cambian con frecuencia.\n'
          '- **Image.network**: Se usa para cargar im√°genes desde una URL. Es √∫til para im√°genes din√°micas o que se actualizan con frecuencia.\n\n'
          'Ambos widgets son f√°ciles de usar y se integran perfectamente con otros componentes de Flutter.',
      'img_url': '',
      'code_example': '''
// Ejemplo de uso de Image.asset y Image.network
Column(
  children: [
    Image.asset("assets/images/mi_imagen.png"),
    Image.network("https://example.com/mi_imagen.jpg"),
  ],
)
''',
    });

    // Detalle para 'Optimizaci√≥n de im√°genes para diferentes resoluciones'
    await db.insert('detail', {
      'id': 63,
      'subtopic_id': 's03t02l04',
      'module': 'Jr',
      'definition': 'Optimizar im√°genes para diferentes resoluciones es esencial para garantizar que tu aplicaci√≥n se vea bien en dispositivos con distintas densidades de pantalla.\n\n'
          '¬øC√≥mo se optimizan las im√°genes? üì±\n\n'
          'Flutter permite definir im√°genes para diferentes densidades de pantalla (1x, 2x, 3x) en la carpeta `assets/images`. El framework selecciona autom√°ticamente la imagen adecuada seg√∫n el dispositivo.\n\n'
          'Adem√°s, puedes usar widgets como `FadeInImage` para mostrar un placeholder mientras se carga la imagen, o `CachedNetworkImage` para almacenar en cach√© im√°genes remotas.\n\n'
          'La optimizaci√≥n de im√°genes es clave para crear aplicaciones eficientes y visualmente consistentes.',
      'img_url': '',
      'code_example': '''
# Ejemplo de estructura de carpetas para im√°genes adaptativas
assets/
  images/
    mi_imagen.png
    mi_imagen_2x.png
    mi_imagen_3x.png

# Uso de FadeInImage para im√°genes con placeholder
FadeInImage.assetNetwork(
  placeholder: "assets/images/placeholder.png",
  image: "https://example.com/mi_imagen.jpg",
)
''',
    });
  }

  Future<void> _insertDetailsJrTopic3Level4(db) async {
    // Detalle para 'Carga de archivos de audio y video'
    await db.insert('detail', {
      'id': 64,
      'subtopic_id': 's01t03l04',
      'module': 'Jr',
      'definition': 'La carga de archivos de audio y video en Flutter permite agregar contenido multimedia a tu aplicaci√≥n, como m√∫sica, efectos de sonido o videos.\n\n'
          '¬øC√≥mo se cargan archivos de audio y video? üéµüé•\n\n'
          'Para cargar archivos de audio y video, puedes usar paquetes como `audioplayers` para audio y `video_player` para video. Estos paquetes proporcionan widgets y m√©todos para reproducir y controlar contenido multimedia.\n\n'
          'Adem√°s, los archivos multimedia pueden ser locales (almacenados en el proyecto) o remotos (descargados desde una URL).\n\n'
          'Agregar audio y video es una forma efectiva de mejorar la experiencia del usuario en tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Ejemplo de uso de audioplayers para audio
import 'package:audioplayers/audioplayers.dart';

final player = AudioPlayer();
player.play(AssetSource("audio/mi_audio.mp3"));

# Ejemplo de uso de video_player para video
import 'package:video_player/video_player.dart';

final controller = VideoPlayerController.asset("assets/videos/mi_video.mp4");
controller.initialize().then((_) {
  controller.play();
});
''',
    });

    // Detalle para 'Gesti√≥n de archivos en el sistema de archivos'
    await db.insert('detail', {
      'id': 65,
      'subtopic_id': 's02t03l04',
      'module': 'Jr',
      'definition': 'La gesti√≥n de archivos en el sistema de archivos permite a tu aplicaci√≥n leer, escribir y manipular archivos en el dispositivo del usuario.\n\n'
          '¬øC√≥mo se gestionan archivos en Flutter? üìÇ\n\n'
          'Flutter proporciona el paquete `path_provider` para acceder a rutas comunes del sistema de archivos, como el directorio de documentos o el directorio temporal. Luego, puedes usar la clase `File` de Dart para leer o escribir archivos.\n\n'
          'Esta funcionalidad es √∫til para guardar configuraciones, almacenar datos locales, o manejar archivos descargados.\n\n'
          'La gesti√≥n de archivos es esencial para aplicaciones que necesitan persistencia de datos o interacci√≥n con el sistema de archivos.',
      'img_url': '',
      'code_example': '''
# Ejemplo de uso de path_provider y File
import 'package:path_provider/path_provider.dart';
import 'dart:io';

Future<void> guardarArchivo() async {
  final directory = await getApplicationDocumentsDirectory();
  final file = File("\${directory.path}/mi_archivo.txt");
  await file.writeAsString("Hola, mundo");
}

Future<void> leerArchivo() async {
  final directory = await getApplicationDocumentsDirectory();
  final file = File("\${directory.path}/mi_archivo.txt");
  String contenido = await file.readAsString();
 debugPrint(contenido);
}
''',
    });
  }

  Future<void> insertDetailsJrLevel5(Database db) async {
    try {
      await _insertDetailsJrTopic1Level5(db);
      await _insertDetailsJrTopic2Level5(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 5: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level5(db) async {
    // Detalle para 'Introducci√≥n a Git y comandos b√°sicos'
    await db.insert('detail', {
      'id': 66,
      'subtopic_id': 's01t01l05',
      'module': 'Jr',
      'definition': 'Git es un sistema de control de versiones distribuido que te permite rastrear cambios en el c√≥digo, colaborar con otros desarrolladores y gestionar proyectos de software de manera eficiente.\n\n'
          '¬øQu√© es Git y por qu√© es importante? üõ†Ô∏è\n\n'
          'Git te permite guardar "instant√°neas" de tu c√≥digo en diferentes momentos, lo que facilita la reversi√≥n a versiones anteriores, la colaboraci√≥n en equipo y la gesti√≥n de cambios. Algunos comandos b√°sicos incluyen:\n'
          '- `git init`: Inicializa un repositorio Git en un proyecto.\n'
          '- `git add`: Agrega cambios al √°rea de preparaci√≥n (staging).\n'
          '- `git commit`: Guarda los cambios en el historial del repositorio.\n'
          '- `git status`: Muestra el estado actual del repositorio.\n\n'
          'Git es una herramienta esencial para cualquier desarrollador, ya que mejora la organizaci√≥n y la colaboraci√≥n en proyectos de software.',
      'img_url': '',
      'code_example': '''
# Ejemplo de comandos b√°sicos de Git
git init
git add .
git commit -m "Primer commit"
git status
''',
    });

    // Detalle para 'Creaci√≥n y gesti√≥n de ramas'
    await db.insert('detail', {
      'id': 67,
      'subtopic_id': 's02t01l05',
      'module': 'Jr',
      'definition': 'Las ramas en Git te permiten trabajar en diferentes versiones de un proyecto de manera simult√°nea. Esto es √∫til para desarrollar nuevas caracter√≠sticas, corregir errores o experimentar sin afectar la rama principal.\n\n'
          '¬øC√≥mo se crean y gestionan ramas? üåø\n\n'
          'Puedes crear una nueva rama con el comando `git branch nombre_rama` y cambiar a esa rama con `git checkout nombre_rama`. Para fusionar una rama con la rama principal, usa `git merge nombre_rama`.\n\n'
          'Las ramas son una parte fundamental del flujo de trabajo en Git, ya que permiten aislar cambios y facilitan la colaboraci√≥n en equipo.\n\n'
          'Dominar la creaci√≥n y gesti√≥n de ramas es clave para trabajar de manera eficiente en proyectos grandes o colaborativos.',
      'img_url': '',
      'code_example': '''
# Ejemplo de creaci√≥n y gesti√≥n de ramas
git branch nueva_rama
git checkout nueva_rama
# Realiza cambios y haz commits
git checkout main
git merge nueva_rama
''',
    });

    // Detalle para 'Resoluci√≥n de conflictos en Git'
    await db.insert('detail', {
      'id': 68,
      'subtopic_id': 's03t01l05',
      'module': 'Jr',
      'definition': 'Los conflictos en Git ocurren cuando dos ramas tienen cambios incompatibles en la misma parte del c√≥digo. Resolver estos conflictos es esencial para mantener la integridad del proyecto.\n\n'
          '¬øC√≥mo se resuelven conflictos en Git? ‚öîÔ∏è\n\n'
          'Cuando ocurre un conflicto, Git marca las √°reas problem√°ticas en el c√≥digo. Debes editar manualmente el archivo para resolver el conflicto, luego usar `git add` para marcar el conflicto como resuelto y finalmente completar la fusi√≥n con `git commit`.\n\n'
          'Es importante comunicarse con el equipo para entender los cambios y tomar decisiones informadas al resolver conflictos.\n\n'
          'La resoluci√≥n de conflictos es una habilidad clave para trabajar en proyectos colaborativos con Git.',
      'img_url': '',
      'code_example': '''
# Ejemplo de resoluci√≥n de conflictos
# Git marca el conflicto en el archivo
<<<<<<< HEAD
C√≥digo de la rama actual
=======
C√≥digo de la rama fusionada
>>>>>>> nueva_rama

# Edita el archivo para resolver el conflicto
git add archivo_conflicto.txt
git commit -m "Conflicto resuelto"
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level5(db) async {
    // Detalle para 'Creaci√≥n de un repositorio en GitHub'
    await db.insert('detail', {
      'id': 69,
      'subtopic_id': 's01t02l05',
      'module': 'Jr',
      'definition': 'GitHub es una plataforma basada en Git que permite alojar repositorios, colaborar en proyectos y gestionar el ciclo de vida del software.\n\n'
          '¬øC√≥mo se crea un repositorio en GitHub? üöÄ\n\n'
          'Para crear un repositorio en GitHub, inicia sesi√≥n en tu cuenta, haz clic en "New" en la p√°gina de repositorios, y completa los detalles como el nombre y la descripci√≥n. Luego, puedes clonar el repositorio en tu m√°quina local usando `git clone`.\n\n'
          'GitHub es una herramienta esencial para el desarrollo colaborativo, ya que facilita la gesti√≥n de c√≥digo, el seguimiento de problemas y la revisi√≥n de cambios.\n\n'
          'Crear un repositorio en GitHub es el primer paso para compartir y colaborar en proyectos de software.',
      'img_url': '',
      'code_example': '''
# Ejemplo de clonaci√≥n de un repositorio de GitHub
git clone https://github.com/usuario/mi_repositorio.git
''',
    });

    // Detalle para 'Subir y actualizar proyectos en GitHub'
    await db.insert('detail', {
      'id': 70,
      'subtopic_id': 's02t02l05',
      'module': 'Jr',
      'definition': 'Subir y actualizar proyectos en GitHub te permite compartir tu c√≥digo con otros desarrolladores y mantener un historial de cambios en la nube.\n\n'
          '¬øC√≥mo se suben y actualizan proyectos? üì§\n\n'
          'Para subir un proyecto, primero inicializa un repositorio Git local (`git init`), luego agrega los cambios (`git add .`), haz un commit (`git commit -m "Mensaje"`), y finalmente sube los cambios a GitHub con `git push origin main`.\n\n'
          'Para actualizar un proyecto, usa `git pull` para descargar los cambios m√°s recientes desde GitHub y fusionarlos con tu copia local.\n\n'
          'Subir y actualizar proyectos en GitHub es esencial para la colaboraci√≥n y el control de versiones.',
      'img_url': '',
      'code_example': '''
# Ejemplo de subir un proyecto a GitHub
git init
git add .
git commit -m "Primer commit"
git remote add origin https://github.com/usuario/mi_repositorio.git
git push -u origin main

# Ejemplo de actualizar un proyecto desde GitHub
git pull origin main
''',
    });

    // Detalle para 'Uso de Pull Requests y Code Reviews'
    await db.insert('detail', {
      'id': 71,
      'subtopic_id': 's03t02l05',
      'module': 'Jr',
      'definition': 'Los Pull Requests (PR) y las Code Reviews son pr√°cticas esenciales en GitHub para colaborar en proyectos y garantizar la calidad del c√≥digo.\n\n'
          '¬øC√≥mo se usan Pull Requests y Code Reviews? üîç\n\n'
          'Un Pull Request es una solicitud para fusionar cambios de una rama a otra (por ejemplo, de una rama de desarrollo a la rama principal). Durante el proceso de revisi√≥n (Code Review), otros desarrolladores pueden revisar el c√≥digo, hacer comentarios y sugerir mejoras antes de aprobar la fusi√≥n.\n\n'
          'Estas pr√°cticas fomentan la colaboraci√≥n, mejoran la calidad del c√≥digo y ayudan a detectar errores antes de que lleguen a la rama principal.\n\n'
          'El uso de Pull Requests y Code Reviews es clave para trabajar en equipos de desarrollo de manera eficiente.',
      'img_url': '',
      'code_example': '''
# Ejemplo de flujo de trabajo con Pull Requests
1. Crea una nueva rama: `git branch nueva_rama`
2. Realiza cambios y haz commits: `git commit -m "Nueva funcionalidad"`
3. Sube la rama a GitHub: `git push origin nueva_rama`
4. Abre un Pull Request en GitHub y espera la revisi√≥n.
5. Despu√©s de la aprobaci√≥n, fusiona la rama con `git merge nueva_rama`.
''',
    });
  }

  Future<void> insertDetailsJrLevel6(Database db) async {
    try {
      await _insertDetailsJrTopic1Level6(db);
      await _insertDetailsJrTopic2Level6(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 6: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level6(db) async {
    // Detalle para 'Introducci√≥n a SQLite en Flutter'
    await db.insert('detail', {
      'id': 72,
      'subtopic_id': 's01t01l06',
      'module': 'Jr',
      'definition': 'SQLite es una base de datos ligera y embebida que permite almacenar datos estructurados en aplicaciones Flutter. Es ideal para aplicaciones que necesitan persistencia de datos local.\n\n'
          '¬øQu√© es SQLite y por qu√© es importante? üóÑÔ∏è\n\n'
          'SQLite es una base de datos relacional que se ejecuta directamente en el dispositivo, sin necesidad de un servidor externo. Es perfecta para almacenar datos como configuraciones, listas de tareas, o informaci√≥n de usuarios.\n\n'
          'En Flutter, puedes usar el paquete `sqflite` para interactuar con SQLite. Este paquete proporciona una API sencilla para crear, gestionar y consultar bases de datos.\n\n'
          'SQLite es una herramienta esencial para aplicaciones que requieren almacenamiento local de datos estructurados.',
      'img_url': '',
      'code_example': '''
# Ejemplo de configuraci√≥n de SQLite en Flutter
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

Future<Database> abrirBaseDeDatos() async {
  return openDatabase(
    join(await getDatabasesPath(), 'mi_base_de_datos.db'),
    onCreate: (db, version) {
      return db.execute(
        "CREATE TABLE usuarios(id INTEGER PRIMARY KEY, nombre TEXT)",
      );
    },
    version: 1,
  );
}
''',
    });

    // Detalle para 'Creaci√≥n y gesti√≥n de una base de datos SQLite'
    await db.insert('detail', {
      'id': 73,
      'subtopic_id': 's02t01l06',
      'module': 'Jr',
      'definition': 'Crear y gestionar una base de datos SQLite en Flutter implica definir la estructura de la base de datos, abrir una conexi√≥n y realizar operaciones como insertar, actualizar o eliminar datos.\n\n'
          '¬øC√≥mo se crea y gestiona una base de datos SQLite? üõ†Ô∏è\n\n'
          'Para crear una base de datos, debes definir las tablas y sus columnas en el m√©todo `onCreate` de `openDatabase`. Luego, puedes usar m√©todos como `insert`, `update`, y `delete` para gestionar los datos.\n\n'
          'Es importante manejar correctamente la conexi√≥n a la base de datos y cerrarla cuando ya no sea necesaria para evitar problemas de rendimiento.\n\n'
          'La creaci√≥n y gesti√≥n de una base de datos SQLite es clave para aplicaciones que necesitan almacenar y recuperar datos de manera eficiente.',
      'img_url': '',
      'code_example': '''
# Ejemplo de creaci√≥n y gesti√≥n de una base de datos SQLite
Future<void> insertarUsuario(Database db, String nombre) async {
  await db.insert(
    'usuarios',
    {'nombre': nombre},
    conflictAlgorithm: ConflictAlgorithm.replace,
  );
}

Future<void> actualizarUsuario(Database db, int id, String nombre) async {
  await db.update(
    'usuarios',
    {'nombre': nombre},
    where: "id = ?",
    whereArgs: [id],
  );
}

Future<void> eliminarUsuario(Database db, int id) async {
  await db.delete(
    'usuarios',
    where: "id = ?",
    whereArgs: [id],
  );
}
''',
    });

    // Detalle para 'Consultas b√°sicas y avanzadas en SQLite'
    await db.insert('detail', {
      'id': 74,
      'subtopic_id': 's03t01l06',
      'module': 'Jr',
      'definition': 'Las consultas en SQLite te permiten recuperar datos de la base de datos de manera eficiente. Puedes realizar consultas b√°sicas, como seleccionar todos los registros, o consultas avanzadas, como filtros, ordenamientos y joins.\n\n'
          '¬øC√≥mo se realizan consultas en SQLite? üîç\n\n'
          'Para realizar consultas, puedes usar el m√©todo `query` o ejecutar sentencias SQL directamente con `rawQuery`. Las consultas pueden incluir condiciones (`WHERE`), ordenamientos (`ORDER BY`), y l√≠mites (`LIMIT`).\n\n'
          'Las consultas avanzadas, como los joins, te permiten combinar datos de varias tablas para obtener resultados m√°s complejos.\n\n'
          'Dominar las consultas en SQLite es esencial para trabajar con datos estructurados en aplicaciones Flutter.',
      'img_url': '',
      'code_example': '''
# Ejemplo de consultas b√°sicas y avanzadas en SQLite
Future<List<Map<String, dynamic>>> obtenerUsuarios(Database db) async {
  return await db.query('usuarios');
}

Future<List<Map<String, dynamic>>> obtenerUsuarioPorId(Database db, int id) async {
  return await db.query(
    'usuarios',
    where: "id = ?",
    whereArgs: [id],
  );
}

Future<List<Map<String, dynamic>>> obtenerUsuariosOrdenados(Database db) async {
  return await db.query(
    'usuarios',
    orderBy: "nombre ASC",
  );
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level6(db) async {
    // Detalle para 'Introducci√≥n a Shared Preferences'
    await db.insert('detail', {
      'id': 75,
      'subtopic_id': 's01t02l06',
      'module': 'Jr',
      'definition': 'Shared Preferences es una forma sencilla de almacenar datos simples en aplicaciones Flutter, como preferencias del usuario o configuraciones.\n\n'
          '¬øQu√© es Shared Preferences y por qu√© es importante? üóÇÔ∏è\n\n'
          'Shared Preferences es un almacenamiento clave-valor que permite guardar datos primitivos (como `String`, `int`, `bool`, etc.) de manera persistente. Es ideal para almacenar peque√±as cantidades de datos que no requieren una estructura compleja.\n\n'
          'En Flutter, puedes usar el paquete `shared_preferences` para acceder a esta funcionalidad. Es f√°cil de usar y no requiere configuraci√≥n adicional.\n\n'
          'Shared Preferences es una herramienta esencial para guardar preferencias del usuario o configuraciones simples.',
      'img_url': '',
      'code_example': '''
# Ejemplo de configuraci√≥n de Shared Preferences en Flutter
import 'package:shared_preferences/shared_preferences.dart';

Future<void> guardarPreferencia(String clave, String valor) async {
  final prefs = await SharedPreferences.getInstance();
  await prefs.setString(clave, valor);
}

Future<String?> obtenerPreferencia(String clave) async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString(clave);
}
''',
    });

    // Detalle para 'Almacenamiento de datos simples en Shared Preferences'
    await db.insert('detail', {
      'id': 76,
      'subtopic_id': 's02t02l06',
      'module': 'Jr',
      'definition': 'El almacenamiento de datos simples en Shared Preferences es ideal para guardar informaci√≥n como configuraciones del usuario, preferencias de la aplicaci√≥n o estados simples.\n\n'
          '¬øC√≥mo se almacenan datos simples? üìù\n\n'
          'Puedes usar m√©todos como `setString`, `setInt`, `setBool`, y `setDouble` para guardar datos en Shared Preferences. Para recuperar los datos, usa los m√©todos correspondientes como `getString`, `getInt`, etc.\n\n'
          'Shared Preferences es una soluci√≥n ligera y eficiente para almacenar datos que no requieren una estructura compleja o consultas avanzadas.\n\n'
          'El almacenamiento de datos simples es clave para personalizar la experiencia del usuario en tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
# Ejemplo de almacenamiento de datos simples
Future<void> guardarConfiguracion(String tema, bool esModoOscuro) async {
  final prefs = await SharedPreferences.getInstance();
  await prefs.setString('tema', tema);
  await prefs.setBool('esModoOscuro', esModoOscuro);
}

Future<String?> obtenerTema() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString('tema');
}

Future<bool?> esModoOscuro() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getBool('esModoOscuro');
}
''',
    });

    // Detalle para 'Uso de Shared Preferences para guardar preferencias del usuario'
    await db.insert('detail', {
      'id': 77,
      'subtopic_id': 's03t02l06',
      'module': 'Jr',
      'definition': 'Shared Preferences es ideal para guardar preferencias del usuario, como el tema de la aplicaci√≥n, el idioma seleccionado o configuraciones personalizadas.\n\n'
          '¬øC√≥mo se usan Shared Preferences para preferencias del usuario? üé®\n\n'
          'Puedes guardar las preferencias del usuario usando m√©todos como `setString`, `setBool`, o `setInt`, y recuperarlas cuando la aplicaci√≥n se inicie. Esto permite personalizar la experiencia del usuario seg√∫n sus elecciones.\n\n'
          'Por ejemplo, puedes guardar el tema seleccionado (claro u oscuro) y aplicarlo cada vez que el usuario abra la aplicaci√≥n.\n\n'
          'El uso de Shared Preferences para preferencias del usuario es una pr√°ctica com√∫n en aplicaciones m√≥viles.',
      'img_url': '',
      'code_example': '''
# Ejemplo de uso de Shared Preferences para preferencias del usuario
Future<void> guardarTema(String tema) async {
  final prefs = await SharedPreferences.getInstance();
  await prefs.setString('tema', tema);
}

Future<String?> obtenerTema() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString('tema');
}

Future<void> aplicarTema() async {
  final tema = await obtenerTema();
  if (tema == "oscuro") {
    // Aplicar tema oscuro
  } else {
    // Aplicar tema claro
  }
}
''',
    });
  }

  Future<void> insertDetailsJrLevel7(Database db) async {
    try {
      await _insertDetailsJrTopic1Level7(db);
      await _insertDetailsJrTopic2Level7(db);
      await _insertDetailsJrTopic3Level7(db);
      await _insertDetailsJrTopic4Level7(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 7: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level7(db) async {
    // Detalle para 'Qu√© es la Programaci√≥n Orientada a Objetos (POO)'
    await db.insert('detail', {
      'id': 78,
      'subtopic_id': 's01t01l07',
      'module': 'Jr',
      'definition': 'La Programaci√≥n Orientada a Objetos (POO) es un paradigma de programaci√≥n que organiza el c√≥digo en "objetos", que son instancias de "clases". Estos objetos representan entidades del mundo real y contienen datos (atributos) y comportamientos (m√©todos).\n\n'
          '¬øQu√© es la POO y por qu√© es importante? üß©\n\n'
          'La POO permite modelar problemas complejos de manera m√°s clara y modular. En lugar de escribir c√≥digo lineal, puedes crear clases que representen entidades (como un usuario, un producto o un veh√≠culo) y definir c√≥mo interact√∫an entre s√≠.\n\n'
          'Este enfoque mejora la reutilizaci√≥n del c√≥digo, facilita el mantenimiento y hace que el software sea m√°s escalable.\n\n'
          'La POO es un paradigma fundamental en el desarrollo de software moderno.',
      'img_url': '',
      'code_example': '''
// Ejemplo b√°sico de una clase en Dart
class Coche {
  String marca;
  String modelo;

  Coche(this.marca, this.modelo);

  void arrancar() {
   debugPrint("El coche \$marca \$modelo est√° arrancando.");
  }
}
''',
    });

    // Detalle para 'Ventajas de usar POO'
    await db.insert('detail', {
      'id': 79,
      'subtopic_id': 's02t01l07',
      'module': 'Jr',
      'definition': 'La Programaci√≥n Orientada a Objetos (POO) ofrece varias ventajas que la hacen ideal para desarrollar aplicaciones complejas y mantenibles.\n\n'
          '¬øCu√°les son las ventajas de usar POO? üöÄ\n\n'
          '- **Modularidad**: El c√≥digo se divide en clases y objetos, lo que facilita su reutilizaci√≥n y mantenimiento.\n'
          '- **Abstracci√≥n**: Permite ocultar los detalles de implementaci√≥n y exponer solo lo necesario.\n'
          '- **Encapsulamiento**: Protege los datos internos de un objeto y controla c√≥mo se accede a ellos.\n'
          '- **Herencia**: Permite crear nuevas clases basadas en clases existentes, reutilizando c√≥digo.\n'
          '- **Polimorfismo**: Permite que objetos de diferentes clases se comporten de manera similar.\n\n'
          'Estas ventajas hacen que la POO sea una herramienta poderosa para el desarrollo de software.',
      'img_url': '',
      'code_example': '''
// Ejemplo de modularidad y reutilizaci√≥n
class Animal {
  void hacerSonido() {
   debugPrint("Sonido gen√©rico");
  }
}

class Perro extends Animal {
  @override
  void hacerSonido() {
   debugPrint("Guau guau");
  }
}
''',
    });

    // Detalle para 'Conceptos b√°sicos'
    await db.insert('detail', {
      'id': 80,
      'subtopic_id': 's03t01l07',
      'module': 'Jr',
      'definition': 'Los conceptos b√°sicos de la POO incluyen clases, objetos, atributos, m√©todos, y la interacci√≥n entre ellos.\n\n'
          '¬øCu√°les son los conceptos b√°sicos de la POO? üß†\n\n'
          '- **Clase**: Es una plantilla o blueprint que define las propiedades y comportamientos de un objeto.\n'
          '- **Objeto**: Es una instancia de una clase, que representa una entidad espec√≠fica.\n'
          '- **Atributos**: Son las variables que almacenan los datos de un objeto.\n'
          '- **M√©todos**: Son las funciones que definen el comportamiento de un objeto.\n\n'
          'Entender estos conceptos es esencial para dominar la POO y aplicarla en tus proyectos.',
      'img_url': '',
      'code_example': '''
// Ejemplo de clase, objeto, atributos y m√©todos
class Persona {
  String nombre;
  int edad;

  Persona(this.nombre, this.edad);

  void saludar() {
   debugPrint("Hola, mi nombre es \$nombre y tengo \$edad a√±os.");
  }
}

void main() {
  var persona = Persona("Juan", 25);
  persona.saludar();
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level7(db) async {
    // Detalle para 'Declaraci√≥n y definici√≥n de clases'
    await db.insert('detail', {
      'id': 81,
      'subtopic_id': 's01t02l07',
      'module': 'Jr',
      'definition': 'Una clase en Dart es una plantilla que define las propiedades (atributos) y comportamientos (m√©todos) de un objeto. Declarar y definir clases es el primer paso para trabajar con POO.\n\n'
          '¬øC√≥mo se declara y define una clase? üõ†Ô∏è\n\n'
          'Para declarar una clase, usas la palabra clave `class` seguida del nombre de la clase. Luego, defines los atributos y m√©todos dentro de la clase. Los atributos representan el estado del objeto, y los m√©todos representan su comportamiento.\n\n'
          'Por ejemplo, puedes crear una clase `Coche` con atributos como `marca` y `modelo`, y m√©todos como `arrancar` y `detener`.\n\n'
          'Declarar y definir clases es fundamental para modelar entidades en tu aplicaci√≥n.',
      'img_url': '',
      'code_example': '''
// Ejemplo de declaraci√≥n y definici√≥n de una clase
class Coche {
  String marca;
  String modelo;

  Coche(this.marca, this.modelo);

  void arrancar() {
   debugPrint("El coche \$marca \$modelo est√° arrancando.");
  }

  void detener() {
   debugPrint("El coche \$marca \$modelo se ha detenido.");
  }
}
''',
    });

    // Detalle para 'Instanciaci√≥n de objetos'
    await db.insert('detail', {
      'id': 82,
      'subtopic_id': 's02t02l07',
      'module': 'Jr',
      'definition': 'La instanciaci√≥n de objetos es el proceso de crear una instancia espec√≠fica de una clase. Un objeto es una representaci√≥n concreta de una clase, con valores espec√≠ficos para sus atributos.\n\n'
          '¬øC√≥mo se instancian objetos? üèóÔ∏è\n\n'
          'Para instanciar un objeto, usas la palabra clave `new` (opcional en Dart) seguida del nombre de la clase y los argumentos necesarios para el constructor. Por ejemplo, puedes crear un objeto `Coche` con una marca y un modelo espec√≠ficos.\n\n'
          'Los objetos son la base de la POO, ya que permiten interactuar con las entidades definidas en las clases.\n\n'
          'La instanciaci√≥n de objetos es clave para trabajar con POO en Dart.',
      'img_url': '',
      'code_example': '''
// Ejemplo de instanciaci√≥n de objetos
void main() {
  var miCoche = Coche("Toyota", "Corolla");
  miCoche.arrancar();
  miCoche.detener();
}
''',
    });

    // Detalle para 'Constructores y destructores'
    await db.insert('detail', {
      'id': 83,
      'subtopic_id': 's03t02l07',
      'module': 'Jr',
      'definition': 'Los constructores son m√©todos especiales que se ejecutan al crear un objeto, mientras que los destructores (aunque no son comunes en Dart) se refieren a la limpieza de recursos cuando un objeto ya no se usa.\n\n'
          '¬øQu√© son los constructores y destructores? üè≠\n\n'
          'En Dart, los constructores se definen con el mismo nombre de la clase y se usan para inicializar los atributos del objeto. Puedes tener constructores con par√°metros, constructores nombrados o constructores por defecto.\n\n'
          'Aunque Dart no tiene destructores expl√≠citos, puedes usar el m√©todo `dispose` o similares para liberar recursos cuando un objeto ya no es necesario.\n\n'
          'Los constructores son esenciales para inicializar objetos de manera correcta y eficiente.',
      'img_url': '',
      'code_example': '''
// Ejemplo de constructores
class Coche {
  String marca;
  String modelo;

  // Constructor con par√°metros
  Coche(this.marca, this.modelo);

  // Constructor nombrado
  Coche.nuevo() {
    marca = "Desconocida";
    modelo = "Desconocido";
  }
}

void main() {
  var miCoche = Coche("Toyota", "Corolla");
  var cocheNuevo = Coche.nuevo();
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic3Level7(db) async {
    // Detalle para 'Abstracci√≥n'
    await db.insert('detail', {
      'id': 84,
      'subtopic_id': 's01t03l07',
      'module': 'Jr',
      'definition': 'La abstracci√≥n en POO es el proceso de ocultar los detalles de implementaci√≥n y exponer solo lo necesario para interactuar con un objeto.\n\n'
          '¬øQu√© es la abstracci√≥n y por qu√© es importante? üé≠\n\n'
          'La abstracci√≥n permite simplificar la interacci√≥n con objetos complejos al exponer solo las funcionalidades esenciales. Por ejemplo, cuando usas un coche, no necesitas saber c√≥mo funciona el motor, solo c√≥mo conducirlo.\n\n'
          'En Dart, la abstracci√≥n se logra mediante clases abstractas, interfaces y m√©todos que ocultan la l√≥gica interna.\n\n'
          'La abstracci√≥n es clave para crear sistemas modulares y f√°ciles de entender.',
      'img_url': '',
      'code_example': '''
// Ejemplo de abstracci√≥n con una clase abstracta
abstract class Vehiculo {
  void arrancar();
  void detener();
}

class Coche extends Vehiculo {
  @override
  void arrancar() {
   debugPrint("Coche arrancado");
  }

  @override
  void detener() {
   debugPrint("Coche detenido");
  }
}
''',
    });

    // Detalle para 'Encapsulamiento'
    await db.insert('detail', {
      'id': 85,
      'subtopic_id': 's02t03l07',
      'module': 'Jr',
      'definition': 'El encapsulamiento en POO es el mecanismo que protege los datos internos de un objeto y controla c√≥mo se accede a ellos.\n\n'
          '¬øQu√© es el encapsulamiento y por qu√© es importante? üîí\n\n'
          'El encapsulamiento permite ocultar los detalles de implementaci√≥n de un objeto y exponer solo los m√©todos necesarios para interactuar con √©l. Esto se logra usando modificadores de acceso como `private` (en Dart, con un guion bajo `_`).\n\n'
          'Por ejemplo, puedes ocultar el estado interno de un objeto y solo permitir su modificaci√≥n a trav√©s de m√©todos espec√≠ficos.\n\n'
          'El encapsulamiento es esencial para proteger la integridad de los datos y evitar errores.',
      'img_url': '',
      'code_example': '''
// Ejemplo de encapsulamiento
class CuentaBancaria {
  double _saldo = 0.0;

  void depositar(double monto) {
    if (monto > 0) {
      _saldo += monto;
    }
  }

  double obtenerSaldo() {
    return _saldo;
  }
}
''',
    });

    // Detalle para 'Herencia'
    await db.insert('detail', {
      'id': 86,
      'subtopic_id': 's03t03l07',
      'module': 'Jr',
      'definition': 'La herencia en POO es un mecanismo que permite crear nuevas clases basadas en clases existentes, reutilizando su c√≥digo y extendiendo su funcionalidad.\n\n'
          '¬øQu√© es la herencia y por qu√© es importante? üß¨\n\n'
          'La herencia permite definir una clase base (superclase) y luego crear clases derivadas (subclases) que heredan sus atributos y m√©todos. Por ejemplo, puedes tener una clase `Vehiculo` y luego crear clases como `Coche` y `Moto` que hereden de ella.\n\n'
          'Esto promueve la reutilizaci√≥n del c√≥digo y facilita la organizaci√≥n de clases relacionadas.\n\n'
          'La herencia es una herramienta poderosa para crear jerarqu√≠as de clases y evitar la duplicaci√≥n de c√≥digo.',
      'img_url': '',
      'code_example': '''
// Ejemplo de herencia
class Vehiculo {
  void arrancar() {
   debugPrint("Veh√≠culo arrancado");
  }
}

class Coche extends Vehiculo {
  @override
  void arrancar() {
   debugPrint("Coche arrancado");
  }
}
''',
    });

    // Detalle para 'Polimorfismo'
    await db.insert('detail', {
      'id': 87,
      'subtopic_id': 's04t03l07',
      'module': 'Jr',
      'definition': 'El polimorfismo en POO es la capacidad de que objetos de diferentes clases se comporten de manera similar cuando se usan a trav√©s de una interfaz com√∫n.\n\n'
          '¬øQu√© es el polimorfismo y por qu√© es importante? üé≠\n\n'
          'El polimorfismo permite que una misma operaci√≥n se comporte de manera diferente seg√∫n el objeto que la ejecuta. Por ejemplo, puedes tener un m√©todo `hacerSonido` que se comporte de manera diferente en clases como `Perro` y `Gato`.\n\n'
          'Esto se logra mediante la herencia y la sobrescritura de m√©todos, o mediante interfaces.\n\n'
          'El polimorfismo es esencial para crear sistemas flexibles y extensibles.',
      'img_url': '',
      'code_example': '''
// Ejemplo de polimorfismo
class Animal {
  void hacerSonido() {
   debugPrint("Sonido gen√©rico");
  }
}

class Perro extends Animal {
  @override
  void hacerSonido() {
   debugPrint("Guau guau");
  }
}

class Gato extends Animal {
  @override
  void hacerSonido() {
   debugPrint("Miau");
  }
}

void main() {
  Animal miAnimal = Perro();
  miAnimal.hacerSonido(); // Guau guau

  miAnimal = Gato();
  miAnimal.hacerSonido(); // Miau
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic4Level7(db) async {
    // Detalle para 'Cambiar el color de un auto'
    await db.insert('detail', {
      'id': 88, // Aseg√∫rate de que este ID sea √∫nico
      'subtopic_id': 's01t04l07', // Subtopic 'Cambiar el color de un auto'
      'module': 'Jr',
      'definition':
          'En programaci√≥n orientada a objetos (POO), podemos modelar un auto como un objeto con propiedades como color, marca y modelo. Un m√©todo para cambiar el color del auto permite modificar esta propiedad de manera din√°mica.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que tienes un auto de juguete y decides pintarlo de otro color. En POO, esto se traduce en un m√©todo que actualiza la propiedad "color" del objeto "Auto". Por ejemplo, si el auto es rojo y lo cambias a azul, el m√©todo se encarga de hacer esa actualizaci√≥n.\n\n'
              'Este es un ejemplo pr√°ctico de c√≥mo la POO nos permite manipular objetos del mundo real en c√≥digo. ¬°Es como ser el due√±o de un taller de pintura de autos virtual! üöóüé®',
      'img_url': '',
      'code_example': '''
class Auto {
  String marca;
  String modelo;
  String color;

  Auto(this.marca, this.modelo, this.color);

  void cambiarColor(String nuevoColor) {
    this.color = nuevoColor;
   debugPrint("El auto ahora es de color: \$color");
  }
}

void main() {
  Auto miAuto = Auto("Toyota", "Corolla", "Rojo");
 debugPrint("Color actual: \${miAuto.color}"); // Output: Rojo
  miAuto.cambiarColor("Azul");            // Cambia el color a Azul
 debugPrint("Nuevo color: \${miAuto.color}"); // Output: Azul
}
''',
    });

// Detalle para 'Jerarqu√≠as de veh√≠culos'
    await db.insert('detail', {
      'id': 89, // Aseg√∫rate de que este ID sea √∫nico
      'subtopic_id': 's02t04l07', // Subtopic 'Jerarqu√≠as de veh√≠culos'
      'module': 'Jr',
      'definition':
          'En POO, las jerarqu√≠as de veh√≠culos son un ejemplo cl√°sico de herencia. Podemos crear una clase base "Veh√≠culo" y luego derivar clases m√°s espec√≠ficas como "Auto", "Moto" o "Cami√≥n".\n\n'
              '¬øTe quedaron dudas? ü§î\n\n'
              'Piensa en una familia de veh√≠culos. Todos tienen caracter√≠sticas comunes, como una marca y un modelo, pero tambi√©n tienen diferencias. Por ejemplo, un auto tiene puertas, mientras que una moto tiene un manillar. La herencia nos permite reutilizar c√≥digo y organizar las clases de manera l√≥gica.\n\n'
              'Este enfoque es √∫til para modelar relaciones del mundo real en c√≥digo. ¬°Es como crear un √°rbol geneal√≥gico de veh√≠culos! üå≥üöóüèçÔ∏è',
      'img_url': '',
      'code_example': '''
class Vehiculo {
  String marca;
  String modelo;

  Vehiculo(this.marca, this.modelo);

  void describir() {
   debugPrint("\$marca \$modelo");
  }
}

class Auto extends Vehiculo {
  int numPuertas;

  Auto(String marca, String modelo, this.numPuertas) : super(marca, modelo);

  @override
  void describir() {
   debugPrint("\$marca \$modelo con \$numPuertas puertas");
  }
}

class Moto extends Vehiculo {
  String tipo;

  Moto(String marca, String modelo, this.tipo) : super(marca, modelo);

  @override
  void describir() {
   debugPrint("\$marca \$modelo, Tipo: \$tipo");
  }
}

void main() {
  Auto miAuto = Auto("Ford", "Mustang", 2);
  Moto miMoto = Moto("Yamaha", "MT-07", "Deportiva");

  miAuto.describir(); // Output: Ford Mustang con 2 puertas
  miMoto.describir(); // Output: Yamaha MT-07, Tipo: Deportiva
}
''',
    });

    // Detalle para 'Implementaci√≥n de interfaces'
    await db.insert('detail', {
      'id': 90, // Aseg√∫rate de que este ID sea √∫nico
      'subtopic_id': 's03t04l07', // Subtopic 'Implementaci√≥n de interfaces'
      'module': 'Jr',
      'definition':
          'En POO, las interfaces son contratos que definen qu√© m√©todos debe implementar una clase. En Dart, no existen interfaces como tal, pero se pueden simular usando clases abstractas.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que est√°s construyendo un robot. Le das un manual de instrucciones que dice: "Debes poder caminar y hablar". Cualquier robot que siga este manual debe implementar esas acciones. En programaci√≥n, las interfaces funcionan de manera similar: definen un conjunto de m√©todos que las clases deben implementar.\n\n'
              'Este enfoque es √∫til para garantizar que ciertas clases cumplan con un est√°ndar. ¬°Es como darle un contrato a tus objetos! üìúü§ñ',
      'img_url': '',
      'code_example': '''
abstract class Vehiculo {
  void arrancar();
  void detener();
}

class Auto implements Vehiculo {
  @override
  void arrancar() {
   debugPrint("El auto est√° arrancando...");
  }

  @override
  void detener() {
   debugPrint("El auto se ha detenido.");
  }
}

class Moto implements Vehiculo {
  @override
  void arrancar() {
   debugPrint("La moto est√° arrancando...");
  }

  @override
  void detener() {
   debugPrint("La moto se ha detenido.");
  }
}

void main() {
  Auto miAuto = Auto();
  Moto miMoto = Moto();

  miAuto.arrancar(); // Output: El auto est√° arrancando...
  miMoto.detener();  // Output: La moto se ha detenido.
}
''',
    });
  }

  Future<void> insertDetailsJrLevel8(Database db) async {
    try {
      await _insertDetailsJrTopic1Level8(db);
      await _insertDetailsJrTopic2Level8(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 8: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level8(db) async {
    // Detalle para 'Introducci√≥n a las pruebas de widgets'
    await db.insert('detail', {
      'id': 91,
      'subtopic_id': 's01t01l08',
      'module': 'Jr',
      'definition':
          'Las pruebas de widgets son esenciales para garantizar que la interfaz de usuario de tu aplicaci√≥n funcione correctamente. Estas pruebas verifican que los widgets se rendericen y se comporten como se espera.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que est√°s construyendo una casa y quieres asegurarte de que todas las puertas y ventanas funcionen correctamente. Las pruebas de widgets son como un inspector que revisa cada parte de la casa para asegurarse de que todo est√© en orden. En Flutter, este "inspector" es el `WidgetTester`, que te permite probar y validar tus widgets de manera automatizada.\n\n'
              '¬°Las pruebas de widgets son tu mejor aliado para evitar sorpresas desagradables en producci√≥n! üõ†Ô∏èüè†',
      'img_url': '',
      'code_example': '''
import 'package:flutter_test/flutter_test.dart';
import 'package:my_app/main.dart';

void main() {
  testWidgets('Prueba de renderizado del widget', (WidgetTester tester) async {
    // Construye el widget
    await tester.pumpWidget(MyApp());

    // Verifica que el texto "Hola, Mundo" est√© presente
    expect(find.text('Hola, Mundo'), findsOneWidget);
  });
}
''',
    });

    // Detalle para 'Uso de WidgetTester para pruebas de interfaz'
    await db.insert('detail', {
      'id': 92, // Siguiente ID
      'subtopic_id': 's02t01l08', // Subtopic 02, Topic 01, Level 08
      'module': 'Jr',
      'definition':
          'El `WidgetTester` es una herramienta poderosa en Flutter para realizar pruebas de interfaz. Te permite interactuar con los widgets y verificar su comportamiento.\n\n'
              '¬øTe quedaron dudas? ü§î\n\n'
              'Piensa en `WidgetTester` como un control remoto que te permite manipular y probar tus widgets. Puedes simular toques, deslizamientos y otras interacciones para asegurarte de que todo funcione como deber√≠a.\n\n'
              'Por ejemplo, puedes usar `WidgetTester` para verificar que un bot√≥n cambie de color al ser presionado o que un texto aparezca despu√©s de una acci√≥n. ¬°Es como tener un laboratorio de pruebas para tus widgets! üß™üî¨',
      'img_url': '',
      'code_example': '''
import 'package:flutter_test/flutter_test.dart';
import 'package:my_app/main.dart';

void main() {
  testWidgets('Prueba de interacci√≥n con un bot√≥n', (WidgetTester tester) async {
    // Construye el widget
    await tester.pumpWidget(MyApp());

    // Simula un toque en el bot√≥n
    await tester.tap(find.byType(ElevatedButton));
    await tester.pump(); // Actualiza el estado del widget

    // Verifica que el texto "Bot√≥n presionado" est√© presente
    expect(find.text('Bot√≥n presionado'), findsOneWidget);
  });
}
''',
    });

    // Detalle para 'Pruebas de interacci√≥n con widgets'
    await db.insert('detail', {
      'id': 93, // Siguiente ID
      'subtopic_id': 's03t01l08', // Subtopic 03, Topic 01, Level 08
      'module': 'Jr',
      'definition':
          'Las pruebas de interacci√≥n con widgets verifican c√≥mo los widgets responden a las acciones del usuario, como toques, deslizamientos o entradas de texto.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que tienes una aplicaci√≥n con un formulario. Quieres asegurarte de que, cuando el usuario escriba su nombre y presione un bot√≥n, el nombre se muestre correctamente en la pantalla. Las pruebas de interacci√≥n te permiten simular estas acciones y verificar que todo funcione como se espera.\n\n'
              '¬°Estas pruebas son clave para garantizar una experiencia de usuario fluida y sin errores! üñ±Ô∏èüì±',
      'img_url': '',
      'code_example': '''
import 'package:flutter_test/flutter_test.dart';
import 'package:my_app/main.dart';

void main() {
  testWidgets('Prueba de interacci√≥n con un campo de texto', (WidgetTester tester) async {
    // Construye el widget
    await tester.pumpWidget(MyApp());

    // Simula la entrada de texto
    await tester.enterText(find.byType(TextField), 'Juan');
    await tester.tap(find.byType(ElevatedButton));
    await tester.pump(); // Actualiza el estado del widget

    // Verifica que el texto "Hola, Juan" est√© presente
    expect(find.text('Hola, Juan'), findsOneWidget);
  });
}
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level8(db) async {
    // Detalle para 'Introducci√≥n a las pruebas unitarias'
    await db.insert('detail', {
      'id': 94,
      'subtopic_id': 's01t02l08',
      'module': 'Jr',
      'definition':
          'Las pruebas unitarias son pruebas que verifican el comportamiento de una funci√≥n o m√©todo espec√≠fico en tu c√≥digo. Son esenciales para garantizar que cada parte de tu aplicaci√≥n funcione correctamente.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que est√°s construyendo un reloj. Las pruebas unitarias son como probar cada engranaje por separado para asegurarte de que funcione correctamente antes de ensamblar todo el reloj. En programaci√≥n, esto significa probar funciones y m√©todos de manera aislada para detectar errores temprano.\n\n'
              '¬°Las pruebas unitarias son tu primera l√≠nea de defensa contra los bugs! üêõüõ°Ô∏è',
      'img_url': '',
      'code_example': '''
import 'package:test/test.dart';

int sumar(int a, int b) {
  return a + b;
}

void main() {
  test('Prueba de la funci√≥n sumar', () {
    expect(sumar(2, 3), equals(5));
  });
}
''',
    });

    // Detalle para 'Uso de test y expect en pruebas unitarias'
    await db.insert('detail', {
      'id': 95, // Siguiente ID
      'subtopic_id': 's02t02l08', // Subtopic 02, Topic 02, Level 08
      'module': 'Jr',
      'definition':
          'En Dart, las pruebas unitarias se escriben usando las funciones `test` y `expect`. `test` define una prueba, mientras que `expect` verifica que el resultado sea el esperado.\n\n'
              '¬øTe quedaron dudas? ü§î\n\n'
              'Piensa en `test` como un escenario que defines para probar algo, y en `expect` como la afirmaci√≥n que haces sobre el resultado. Por ejemplo, si pruebas una funci√≥n que suma dos n√∫meros, usas `expect` para verificar que el resultado sea correcto.\n\n'
              '¬°Estas herramientas son fundamentales para escribir pruebas claras y efectivas! üß™‚úÖ',
      'img_url': '',
      'code_example': '''
import 'package:test/test.dart';

int multiplicar(int a, int b) {
  return a * b;
}

void main() {
  test('Prueba de la funci√≥n multiplicar', () {
    expect(multiplicar(2, 3), equals(6));
  });
}
''',
    });

    // Detalle para 'Pruebas de funciones y m√©todos en Dart'
    await db.insert('detail', {
      'id': 96, // Siguiente ID
      'subtopic_id': 's03t02l08', // Subtopic 03, Topic 02, Level 08
      'module': 'Jr',
      'definition':
          'Las pruebas de funciones y m√©todos en Dart te permiten verificar que cada parte de tu l√≥gica de negocio funcione correctamente. Esto incluye funciones simples, m√©todos de clases y m√°s.\n\n'
              'En otras palabras... üòÖ\n\n'
              'Imaginemos que tienes una funci√≥n que calcula el descuento de un producto. Con las pruebas unitarias, puedes verificar que la funci√≥n devuelva el descuento correcto para diferentes precios y porcentajes. Esto te da confianza en que tu l√≥gica es s√≥lida y libre de errores.\n\n'
              '¬°Prueba todo, desde las funciones m√°s simples hasta las m√°s complejas! üßÆüîç',
      'img_url': '',
      'code_example': '''
import 'package:test/test.dart';

double calcularDescuento(double precio, double descuento) {
  return precio - (precio * descuento / 100);
}

void main() {
  test('Prueba de la funci√≥n calcularDescuento', () {
    expect(calcularDescuento(100, 10), equals(90));
    expect(calcularDescuento(200, 20), equals(160));
  });
}
''',
    });
  }

  Future<void> insertDetailsJrLevel9(Database db) async {
    try {
      await _insertDetailsJrTopic1Level9(db);
      await _insertDetailsJrTopic2Level9(db);
    } catch (e) {
      debugPrint("Error inserting details jr level 9: $e");
    }
  }

  Future<void> _insertDetailsJrTopic1Level9(db) async {
    // Detalle para 'Preparaci√≥n de una aplicaci√≥n para la App Store'
    await db.insert('detail', {
      'id': 97,
      'subtopic_id': 's01t01l09',
      'module': 'Jr',
      'definition':
          'Preparar una aplicaci√≥n para la App Store implica varios pasos, como configurar el proyecto en Xcode, agregar √≠conos y pantallas de inicio, y asegurarse de que la aplicaci√≥n cumpla con las pautas de Apple.\n\n'
              'este proceso es crucial para garantizar que tu aplicaci√≥n est√© lista para ser revisada y publicada. Necesitar√°s un identificador de aplicaci√≥n (App ID), un perfil de aprovisionamiento y un certificado de distribuci√≥n.\n\n'
              '¬°Sigue cada paso cuidadosamente para evitar problemas durante la revisi√≥n! üçèüì±',
      'img_url': '',
      'code_example': '''
1. Abre Xcode y selecciona tu proyecto.
2. Ve a "Signing & Capabilities" y configura tu equipo de desarrollo.
3. Aseg√∫rate de que el "Bundle Identifier" sea √∫nico.
4. Agrega √≠conos y pantallas de inicio en el apartado "Assets".
''',
    });

    // Detalle para 'Creaci√≥n de un certificado de distribuci√≥n'
    await db.insert('detail', {
      'id': 98,
      'subtopic_id': 's02t01l09',
      'module': 'Jr',
      'definition':
          'Un certificado de distribuci√≥n es necesario para firmar tu aplicaci√≥n antes de subirla a la App Store. Este certificado garantiza que la aplicaci√≥n proviene de un desarrollador autorizado.\n\n'
              'Veamos mejor un ejemplo: para crear un certificado, debes usar Apple Developer. Ve a "Certificates, Identifiers & Profiles", selecciona "Certificates" y sigue los pasos para generar un certificado de distribuci√≥n.\n\n'
              '¬°Este paso es esencial para que tu aplicaci√≥n pueda ser distribuida en la App Store! üìúüîê',
      'img_url': '',
      'code_example': '''
1. Inicia sesi√≥n en Apple Developer.
2. Ve a "Certificates, Identifiers & Profiles".
3. Selecciona "Certificates" y haz clic en "+".
4. Elige "iOS Distribution" y sigue las instrucciones.
''',
    });

    // Detalle para 'Subida de una aplicaci√≥n a la App Store'
    await db.insert('detail', {
      'id': 99,
      'subtopic_id': 's03t01l09',
      'module': 'Jr',
      'definition':
          'Subir una aplicaci√≥n a la App Store es el √∫ltimo paso para publicarla. Esto implica crear un registro en App Store Connect, archivar la aplicaci√≥n en Xcode y subirla usando Xcode o Application Loader.\n\n'
              'Expliquemos esto en otras palabras: una vez que tu aplicaci√≥n est√© lista, debes crear un nuevo registro en App Store Connect, archivar la aplicaci√≥n en Xcode y luego subirla para su revisi√≥n.\n\n'
              '¬°Este es el momento en que tu aplicaci√≥n est√° lista para llegar a millones de usuarios! üöÄüì≤',
      'img_url': '',
      'code_example': '''
1. Crea un nuevo registro en App Store Connect.
2. En Xcode, selecciona "Product" > "Archive".
3. Una vez archivada, selecciona "Distribute App" y sigue los pasos.
4. Sube la aplicaci√≥n y espera la revisi√≥n de Apple.
''',
    });
  }

  Future<void> _insertDetailsJrTopic2Level9(db) async {
    // Detalle para 'Preparaci√≥n de una aplicaci√≥n para la Play Store'
    await db.insert('detail', {
      'id': 100,
      'subtopic_id': 's01t02l09',
      'module': 'Jr',
      'definition':
          'Preparar una aplicaci√≥n para la Play Store implica configurar el proyecto en Android Studio, generar un APK o AAB firmado, y asegurarse de que la aplicaci√≥n cumpla con las pol√≠ticas de Google.\n\n'
              'este proceso incluye la creaci√≥n de un √≠cono adecuado, la configuraci√≥n de permisos y la generaci√≥n de un archivo firmado para su distribuci√≥n.\n\n'
              '¬°Sigue cada paso cuidadosamente para evitar problemas durante la publicaci√≥n! ü§ñüì±',
      'img_url': '',
      'code_example': '''
1. Abre Android Studio y selecciona tu proyecto.
2. Configura el √≠cono de la aplicaci√≥n en "res/mipmap".
3. Genera un APK o AAB firmado desde "Build" > "Generate Signed Bundle / APK".
''',
    });

    // Detalle para 'Creaci√≥n de un keystore para firma'
    await db.insert('detail', {
      'id': 101,
      'subtopic_id': 's02t02l09',
      'module': 'Jr',
      'definition':
          'Un keystore es un archivo que contiene claves privadas y certificados necesarios para firmar tu aplicaci√≥n. Es esencial para garantizar la autenticidad de la aplicaci√≥n en la Play Store.\n\n'
              'Veamos mejor un ejemplo: puedes crear un keystore usando Android Studio. Ve a "Build" > "Generate Signed Bundle / APK" y sigue los pasos para generar un nuevo keystore.\n\n'
              '¬°Guarda este archivo en un lugar seguro, ya que es necesario para futuras actualizaciones! üîëüìÇ',
      'img_url': '',
      'code_example': '''
1. En Android Studio, ve a "Build" > "Generate Signed Bundle / APK".
2. Selecciona "APK" o "Android App Bundle".
3. Haz clic en "Create new" para generar un keystore.
4. Completa los campos requeridos y guarda el keystore.
''',
    });

    // Detalle para 'Subida de una aplicaci√≥n a la Play Store'
    await db.insert('detail', {
      'id': 102,
      'subtopic_id': 's03t02l09',
      'module': 'Jr',
      'definition':
          'Subir una aplicaci√≥n a la Play Store es el √∫ltimo paso para publicarla. Esto implica crear un registro en Google Play Console, subir el APK o AAB firmado y completar la informaci√≥n de la lista.\n\n'
              'Expliquemos esto en otras palabras: una vez que tu aplicaci√≥n est√© lista, debes crear un nuevo registro en Google Play Console, subir el archivo firmado y completar los detalles de la lista, como descripci√≥n, capturas de pantalla y categor√≠a.\n\n'
              '¬°Este es el momento en que tu aplicaci√≥n est√° lista para llegar a millones de usuarios en Android! üöÄüì≤',
      'img_url': '',
      'code_example': '''
1. Crea un nuevo registro en Google Play Console.
2. Sube el APK o AAB firmado en la secci√≥n "Release" > "Production".
3. Completa la informaci√≥n de la lista, como descripci√≥n y capturas de pantalla.
4. Env√≠a la aplicaci√≥n para su revisi√≥n.
''',
    });
  }
}
