import 'package:sqflite_common/sqlite_api.dart';

Future<void> insertSrLevel1Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Singleton',
    'definition': '''
El patr√≥n Singleton es como el guardi√°n de una √∫nica instancia. Imagina que tienes una configuraci√≥n global en tu app: no quieres que cada clase cree su propia copia, sino que todas usen la misma. Ah√≠ entra Singleton.

¬øTe est√°s preguntando por qu√© no usar simplemente variables est√°ticas? Bueno, Singleton va m√°s all√°: controla c√≥mo y cu√°ndo se crea esa instancia √∫nica, y puede ser perezoso (se crea solo cuando se necesita). ¬°Ah, y es thread-safe! üõ°Ô∏è

Un Singleton en Java tiene tres reglas de oro:
1. Constructor privado (para que nadie m√°s pueda crear instancias)
2. Variable est√°tica privada que guarda la √∫nica instancia
3. M√©todo p√∫blico est√°tico para acceder a esa instancia

La magia est√° en que aunque llames a getInstance() mil veces, siempre obtendr√°s el mismo objeto. Perfecto para conexiones a BD, loggers, o configuraciones globales. Pero ojo: no abuses de √©l, porque puede hacer tu c√≥digo dif√≠cil de testear.
''',
    'code_example': '''
// Implementaci√≥n correcta (thread-safe y lazy)
public class DatabaseConnection {
    private static DatabaseConnection instance;
    
    private DatabaseConnection() {} // Constructor privado
    
    public static synchronized DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }
}

// Uso:
DatabaseConnection conn = DatabaseConnection.getInstance();

// ‚ùå Error com√∫n: no hacerlo thread-safe
public static DatabaseConnection getInstance() {
    if (instance == null) {
        instance = new DatabaseConnection(); // Problema si m√∫ltiples threads entran aqu√≠
    }
    return instance;
}
'''
  });

// Patrones Creacionales - Factory Method
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Factory Method',
    'definition': '''
El Factory Method es como un men√∫ de restaurante: t√∫ pides un plato (objeto) y la cocina (f√°brica) decide c√≥mo prepararlo. No necesitas saber los detalles de creaci√≥n, solo pedir lo que quieres.

¬øAlguna vez has visto c√≥digo lleno de "new ClaseX()" por todas partes? Eso es acoplamiento fuerte. El Factory Method te ayuda a delegar la creaci√≥n de objetos, haciendo tu c√≥digo m√°s flexible. ¬øPor qu√©? Porque si ma√±ana cambias c√≥mo se crean los objetos, solo modificas la f√°brica, no todo tu c√≥digo.

El truco est√° en:
1. Una interfaz com√∫n para los productos
2. Una clase creadora con el m√©todo f√°brica (abstracto o no)
3. Implementaciones concretas que deciden qu√© objeto crear

Es especialmente √∫til cuando:
- No sabes de antemano qu√© tipos exactos de objetos necesitar√°s
- Quieres centralizar la l√≥gica de creaci√≥n
- El sistema necesita ser extensible para nuevos tipos
''',
    'code_example': '''
// Interfaz com√∫n
interface Transporte {
    void entregar();
}

// Productos concretos
class Camion implements Transporte {
    public void entregar() {
        System.out.println("Entregando por tierra...");
    }
}

class Barco implements Transporte {
    public void entregar() {
        System.out.println("Entregando por mar...");
    }
}

// F√°brica
abstract class Logistica {
    abstract Transporte crearTransporte();
    
    public void planificarEntrega() {
        Transporte t = crearTransporte();
        t.entregar();
    }
}

// F√°bricas concretas
class LogisticaTerrestre extends Logistica {
    Transporte crearTransporte() {
        return new Camion();
    }
}

class LogisticaMaritima extends Logistica {
    Transporte crearTransporte() {
        return new Barco();
    }
}

// Uso:
Logistica logistica = new LogisticaTerrestre();
logistica.planificarEntrega(); // Crea y usa un Camion
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Abstract Factory',
    'definition': '''
El Abstract Factory es como una f√°brica de f√°bricas. Mientras el Factory Method te da un men√∫, Abstract Factory te da todo un restaurante tem√°tico completo (con platos, decoraci√≥n y m√∫sica acorde). Es √∫til cuando necesitas crear familias de objetos relacionados.

¬øAlguna vez has tenido que cambiar todo el look-and-feel de una app? Con Abstract Factory, puedes cambiar entre "families" completas (como temas claro/oscuro) sin modificar cada creaci√≥n individual.

C√≥mo funciona:
1. Declaras interfaces abstractas para cada producto (Ej: Button, Checkbox)
2. Creas f√°bricas concretas que implementan esas interfaces (Ej: LightThemeFactory, DarkThemeFactory)
3. El cliente usa las interfaces abstractas, sin conocer las implementaciones concretas

Ventajas:
- Mantiene la consistencia entre productos relacionados
- Facilita el cambio entre familias de productos
- Cumple con el principio de inversi√≥n de dependencias
''',
    'code_example': '''
// Interfaces abstractas
interface Button {
    void render();
}

interface Checkbox {
    void tick();
}

// F√°brica abstracta
interface GUIFactory {
    Button createButton();
    Checkbox createCheckbox();
}

// Familia Windows
class WindowsButton implements Button {
    public void render() {
        System.out.println("Windows style button");
    }
}

class WindowsCheckbox implements Checkbox {
    public void tick() {
        System.out.println("Windows style checkbox");
    }
}

class WindowsFactory implements GUIFactory {
    public Button createButton() {
        return new WindowsButton();
    }
    public Checkbox createCheckbox() {
        return new WindowsCheckbox();
    }
}

// Familia MacOS
class MacOSButton implements Button {
    public void render() {
        System.out.println("MacOS style button");
    }
}

// Uso:
GUIFactory factory = new WindowsFactory(); // Cambia a MacOSFactory para otro tema
Button btn = factory.createButton();
btn.render();
'''
  });

// Patrones Creacionales - Builder
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Builder',
    'definition': '''
El patr√≥n Builder es como pedir una pizza: eliges cada ingrediente paso a paso hasta tener exactamente lo que quieres, sin necesidad de memorizar combinaciones complejas. Es ideal para crear objetos con muchos par√°metros opcionales.

¬øCansado de constructores con 10 par√°metros donde siempre olvidas el orden? ¬øO de m√∫ltiples constructores para diferentes combinaciones? Builder resuelve esto permiti√©ndote construir objetos pieza por pieza.

Componentes clave:
- Director: opcional, orquesta el proceso de construcci√≥n
- Builder: interfaz con m√©todos para construir cada parte
- ConcreteBuilder: implementaci√≥n concreta, mantiene el objeto en construcci√≥n
- Product: el objeto complejo resultante

Ventajas:
- Permite diferentes representaciones del mismo proceso de construcci√≥n
- A√≠sla c√≥digo complejo de construcci√≥n
- Permite construir objetos paso a paso
''',
    'code_example': '''
// Producto complejo
class Pizza {
    private String masa;
    private String salsa;
    private List<String> toppings = new ArrayList<>();
    
    public void setMasa(String masa) { this.masa = masa; }
    public void setSalsa(String salsa) { this.salsa = salsa; }
    public void addTopping(String topping) { toppings.add(topping); }
}

// Builder abstracto
interface PizzaBuilder {
    void buildMasa();
    void buildSalsa();
    void buildToppings();
    Pizza getPizza();
}

// ConcreteBuilder
class HawaianaBuilder implements PizzaBuilder {
    private Pizza pizza = new Pizza();
    
    public void buildMasa() { pizza.setMasa("suave"); }
    public void buildSalsa() { pizza.setSalsa("dulce"); }
    public void buildToppings() {
        pizza.addTopping("jam√≥n");
        pizza.addTopping("pi√±a");
    }
    public Pizza getPizza() { return pizza; }
}

// Director (opcional)
class Cocina {
    public Pizza hacerPizza(PizzaBuilder builder) {
        builder.buildMasa();
        builder.buildSalsa();
        builder.buildToppings();
        return builder.getPizza();
    }
}

// Uso:
PizzaBuilder builder = new HawaianaBuilder();
Cocina cocina = new Cocina();
Pizza pizza = cocina.hacerPizza(builder);
'''
  });

// Patrones Estructurales - Adapter
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Adapter',
    'definition': '''
El patr√≥n Adapter es el traductor de tu c√≥digo. Imagina que tienes un enchufe europeo (tu interfaz) y un tomacorriente americano (la interfaz que necesitas). El Adapter es ese conversor que te permite conectar ambos mundos.

¬øTe ha pasado que quieres usar una clase genial, pero su interfaz no coincide con lo que espera tu c√≥digo? ¬°Bingo! Ah√≠ necesitas un Adapter. No modifiques la clase existente (abrir√≠as la caja de Pandora), mejor crea un adaptador.

Hay dos tipos:
1. Adapter de clase (usa herencia)
2. Adapter de objeto (usa composici√≥n)

Funciona as√≠:
- Target: la interfaz que tu sistema espera
- Adaptee: la clase existente que quieres usar
- Adapter: la clase que hace la traducci√≥n

Es perfecto para integrar librer√≠as de terceros, APIs legadas, o cuando refactorizas partes de un sistema sin romper todo lo dem√°s.
''',
    'code_example': '''
// Interfaz que espera tu sistema (Target)
interface Reproductor {
    void reproducir(String tipo, String nombreArchivo);
}

// Clase existente con interfaz incompatible (Adaptee)
class ReproductorAvanzado {
    public void playMp3(String archivo) {
        System.out.println("Reproduciendo MP3: " + archivo);
    }
    
    public void playMp4(String archivo) {
        System.out.println("Reproduciendo MP4: " + archivo);
    }
}

// Adapter
class ReproductorAdapter implements Reproductor {
    private ReproductorAvanzado avanzado = new ReproductorAvanzado();
    
    public void reproducir(String tipo, String nombreArchivo) {
        if (tipo.equalsIgnoreCase("mp3")) {
            avanzado.playMp3(nombreArchivo);
        } else if (tipo.equalsIgnoreCase("mp4")) {
            avanzado.playMp4(nombreArchivo);
        }
    }
}

// Uso:
Reproductor reproductor = new ReproductorAdapter();
reproductor.reproducir("mp3", "cancion.mp3"); // Ahora funciona con tu interfaz
'''
  });

// Patrones Estructurales - Decorator
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Decorator',
    'definition': '''
El patr√≥n Decorator es como poner capas a una cebolla üßÖ (pero sin llorar). Te permite a√±adir funcionalidad a un objeto din√°micamente, sin modificar su clase original. Es la alternativa elegante a la herencia cuando necesitas ampliar comportamiento.

¬øQuieres a√±adir funcionalidad a un objeto pero heredar no es una opci√≥n (porque es final o romper√≠a LSP)? Decorator al rescate. Envuelves el objeto original y a√±ades lo que necesites, manteniendo la misma interfaz.

C√≥mo funciona:
1. Tienes un Componente (interfaz com√∫n)
2. Un ConcreteComponent (implementaci√≥n b√°sica)
3. Decoradores que implementan la misma interfaz y envuelven al componente
4. Puedes anidar decoradores como capas

Se usa mucho en:
- Streams de Java (BufferedInputStream decorando FileInputStream)
- GUI (a√±adir bordes, scrolls a componentes visuales)
- Middleware (a√±adir logging, caching, etc.)
''',
    'code_example': '''
// Componente
interface Cafe {
    String getDescripcion();
    double getCosto();
}

// ConcreteComponent
class CafeSimple implements Cafe {
    public String getDescripcion() { return "Cafe simple"; }
    public double getCosto() { return 2.0; }
}

// Decorator abstracto
abstract class DecoradorCafe implements Cafe {
    protected Cafe cafeDecorado;
    
    public DecoradorCafe(Cafe cafe) {
        this.cafeDecorado = cafe;
    }
}

// ConcreteDecorators
class Leche extends DecoradorCafe {
    public Leche(Cafe cafe) { super(cafe); }
    
    public String getDescripcion() {
        return cafeDecorado.getDescripcion() + ", con leche";
    }
    
    public double getCosto() {
        return cafeDecorado.getCosto() + 0.5;
    }
}

class Chocolate extends DecoradorCafe {
    public Chocolate(Cafe cafe) { super(cafe); }
    
    public String getDescripcion() {
        return cafeDecorado.getDescripcion() + ", con chocolate";
    }
    
    public double getCosto() {
        return cafeDecorado.getCosto() + 1.0;
    }
}

// Uso:
Cafe miCafe = new Chocolate(new Leche(new CafeSimple()));
System.out.println(miCafe.getDescripcion() + ": " + miCafe.getCosto());
// Output: Cafe simple, con leche, con chocolate: 3.5
'''
  });

// Patrones Estructurales - Facade
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Facade',
    'definition': '''
El patr√≥n Facade es como el bot√≥n "Easy" de tu sistema. Oculta la complejidad de m√∫ltiples subsistemas detr√°s de una interfaz simple. Es ese amigo que te explica algo complicado en t√©rminos que entiendes.

¬øAlguna vez has tenido que hacer 10 llamadas en orden espec√≠fico para realizar una tarea? Facade te da un √∫nico punto de entrada que maneja toda esa complejidad por ti.

Por qu√© usarlo:
- Simplifica la interfaz para clientes
- Reduce el acoplamiento entre subsistemas
- Proporciona un punto √∫nico de acceso
- Mejora la legibilidad y mantenibilidad

No es:
- Un reemplazo para la funcionalidad existente
- Una simplificaci√≥n excesiva que pierde capacidades

Ejemplos reales:
- APIs simplificadas sobre sistemas complejos
- Wrappers para librer√≠as complicadas
- Puntos de entrada para subsistemas legacy
''',
    'code_example': '''
// Subsistemas complejos
class SistemaDeArchivos {
    public byte[] leerArchivo(String ruta) {
        System.out.println("Leyendo archivo: " + ruta);
        return new byte[0];
    }
}

class Compresor {
    public byte[] comprimir(byte[] datos) {
        System.out.println("Comprimiendo datos...");
        return datos;
    }
}

class Encriptador {
    public byte[] encriptar(byte[] datos) {
        System.out.println("Encriptando datos...");
        return datos;
    }
}

// Facade
class SistemaSeguro {
    private SistemaDeArchivos sistemaArchivos = new SistemaDeArchivos();
    private Compresor compresor = new Compresor();
    private Encriptador encriptador = new Encriptador();
    
    public byte[] cargarArchivoSeguro(String ruta) {
        byte[] datos = sistemaArchivos.leerArchivo(ruta);
        byte[] comprimido = compresor.comprimir(datos);
        return encriptador.encriptar(comprimido);
    }
}

// Uso:
SistemaSeguro sistema = new SistemaSeguro();
byte[] archivo = sistema.cargarArchivoSeguro("datos.txt");
// El cliente no necesita saber nada de los subsistemas internos
'''
  });

// Patrones Estructurales - Proxy
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Proxy',
    'definition': '''
El patr√≥n Proxy es como un asistente personal: controla el acceso a un objeto, a√±adiendo capas de funcionalidad cuando sea necesario. Es un "placeholder" que representa a otro objeto.

¬øNecesitas controlar cu√°ndo se crea un objeto pesado? ¬øO a√±adir seguridad, logging o caching? Proxy te permite hacerlo sin modificar el objeto original.

Tipos comunes:
- Virtual Proxy: pospone la creaci√≥n de objetos costosos
- Protection Proxy: controla acceso
- Remote Proxy: representa objetos en otro espacio de direcciones
- Smart Proxy: a√±ade l√≥gica adicional (logging, caching)

C√≥mo funciona:
1. Misma interfaz que el objeto real
2. Mantiene referencia al objeto real
3. Controla el acceso, delegando cuando sea necesario

Java lo usa en:
- java.lang.reflect.Proxy
- RMI (Remote Method Invocation)
- Hibernate (para lazy loading)
''',
    'code_example': '''
// Interfaz com√∫n
interface Imagen {
    void mostrar();
}

// Objeto real (costoso)
class ImagenReal implements Imagen {
    private String archivo;
    
    public ImagenReal(String archivo) {
        this.archivo = archivo;
        cargarDesdeDisco();
    }
    
    private void cargarDesdeDisco() {
        System.out.println("Cargando imagen pesada: " + archivo);
    }
    
    public void mostrar() {
        System.out.println("Mostrando imagen: " + archivo);
    }
}

// Proxy
class ProxyImagen implements Imagen {
    private ImagenReal imagenReal;
    private String archivo;
    
    public ProxyImagen(String archivo) {
        this.archivo = archivo;
    }
    
    public void mostrar() {
        if (imagenReal == null) {
            imagenReal = new ImagenReal(archivo); // Carga perezosa
        }
        imagenReal.mostrar();
    }
}

// Uso:
Imagen imagen = new ProxyImagen("foto_10MB.jpg");
// La imagen real no se carga hasta que se necesita
imagen.mostrar(); // Aqu√≠ se carga y muestra
'''
  });

// Patrones de Comportamiento - Strategy
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Strategy',
    'definition': '''
El patr√≥n Strategy es como tener un juego de herramientas: seleccionas exactamente la que necesitas para cada trabajo. Define una familia de algoritmos, los encapsula y los hace intercambiables.

¬øTienes m√∫ltiples formas de realizar una tarea (como diferentes tipos de ordenamiento o formatos de exportaci√≥n)? Strategy te permite cambiar el algoritmo usado en runtime sin modificar el c√≥digo que lo usa.

Componentes:
- Context: mantiene referencia a la estrategia actual
- Strategy: interfaz com√∫n para todos los algoritmos
- ConcreteStrategies: implementaciones espec√≠ficas

Ventajas:
- Elimina condicionales complejos
- Facilita a√±adir nuevas estrategias
- Permite cambiar comportamiento en tiempo de ejecuci√≥n
- Cumple con el principio Open/Closed

Ejemplos:
- Algoritmos de compresi√≥n (ZIP, RAR, 7z)
- M√©todos de pago (PayPal, Tarjeta, Bitcoin)
- Rutas de navegaci√≥n (r√°pida, panor√°mica, econ√≥mica)
''',
    'code_example': '''
// Strategy
interface EstrategiaPago {
    void pagar(double monto);
}

// ConcreteStrategies
class PagoPayPal implements EstrategiaPago {
    private String email;
    
    public PagoPayPal(String email) {
        this.email = email;
    }
    
    public void pagar(double monto) {
        System.out.println(monto + " pagado via PayPal (" + email + ")");
    }
}

class PagoTarjeta implements EstrategiaPago {
    private String numeroTarjeta;
    
    public PagoTarjeta(String numeroTarjeta) {
        this.numeroTarjeta = numeroTarjeta;
    }
    
    public void pagar(double monto) {
        System.out.println(monto + " pagado con tarjeta terminada en " 
            + numeroTarjeta.substring(numeroTarjeta.length() - 4));
    }
}

// Context
class CarritoCompras {
    private EstrategiaPago estrategia;
    
    public void setEstrategia(EstrategiaPago estrategia) {
        this.estrategia = estrategia;
    }
    
    public void pagar(double monto) {
        if (estrategia == null) {
            throw new IllegalStateException("Estrategia no configurada");
        }
        estrategia.pagar(monto);
    }
}

// Uso:
CarritoCompras carrito = new CarritoCompras();
carrito.setEstrategia(new PagoPayPal("usuario@example.com"));
carrito.pagar(100.50);

carrito.setEstrategia(new PagoTarjeta("1234567890123456"));
carrito.pagar(75.25);
'''
  });

// Patrones de Comportamiento - Observer
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Observer',
    'definition': '''
El patr√≥n Observer es como un sistema de suscripci√≥n a newsletters. Tienes un sujeto (la lista de correos) y observadores (los suscriptores). Cuando el sujeto cambia (nuevo newsletter), todos los observadores son notificados autom√°ticamente. üì®

¬øNo odias cuando tienes que estar revisando constantemente si algo ha cambiado? Con Observer, los objetos interesados se registran y son notificados solo cuando pasa algo importante. ¬°Decimos adi√≥s al polling!

Componentes clave:
- Subject: mantiene la lista de observers y notifica cambios
- Observer: interfaz que define el m√©todo de actualizaci√≥n
- ConcreteObservers: implementan acciones espec√≠ficas ante notificaciones

Se usa mucho en:
- Sistemas de eventos GUI (botones que notifican clicks)
- Actualizaciones en tiempo real (como feeds de redes sociales)
- Mecanismos de publish/subscribe

Java incluso tiene clases built-in para esto (java.util.Observer), pero entender el patr√≥n te permite implementarlo de formas m√°s flexibles.
''',
    'code_example': '''
// Interfaz Observer
interface Observer {
    void actualizar(String mensaje);
}

// Subject (Observable)
class Newsletter {
    private List<Observer> suscriptores = new ArrayList<>();
    private String ultimoPost;
    
    public void agregarSuscriptor(Observer o) {
        suscriptores.add(o);
    }
    
    public void nuevoPost(String post) {
        this.ultimoPost = post;
        notificarSuscriptores();
    }
    
    private void notificarSuscriptores() {
        for (Observer o : suscriptores) {
            o.actualizar(ultimoPost);
        }
    }
}

// ConcreteObserver
class Usuario implements Observer {
    private String nombre;
    
    public Usuario(String nombre) {
        this.nombre = nombre;
    }
    
    public void actualizar(String mensaje) {
        System.out.println(nombre + " recibi√≥: " + mensaje);
    }
}

// Uso:
Newsletter blog = new Newsletter();
Usuario ana = new Usuario("Ana");
Usuario luis = new Usuario("Luis");

blog.agregarSuscriptor(ana);
blog.agregarSuscriptor(luis);

blog.nuevoPost("¬°Nuevo patr√≥n de dise√±o publicado!");
// Salida:
// Ana recibi√≥: ¬°Nuevo patr√≥n de dise√±o publicado!
// Luis recibi√≥: ¬°Nuevo patr√≥n de dise√±o publicado!
'''
  });

// Patrones de Comportamiento - Command
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Command',
    'definition': '''
El patr√≥n Command es como dejar una nota con instrucciones: encapsula una solicitud como un objeto, permiti√©ndote parametrizar clientes con diferentes solicitudes. Es el patr√≥n detr√°s de los sistemas de "undo", colas de trabajo y operaciones remotas.

¬øNecesitas desacoplar qui√©n invoca una operaci√≥n de c√≥mo se ejecuta? Command te permite empaquetar una acci√≥n con toda su informaci√≥n en un objeto independiente.

Elementos clave:
- Command: interfaz con m√©todo execute()
- ConcreteCommand: implementa execute(), llama al receiver
- Invoker: pide al command que ejecute la solicitud
- Receiver: sabe c√≥mo realizar la operaci√≥n

Casos de uso:
- Sistemas de deshacer/rehacer
- Operaciones en cola o programadas
- Transacciones
- Men√∫s y botones en GUIs
- Operaciones remotas (RPC)
''',
    'code_example': '''
// Command
interface Comando {
    void ejecutar();
    void deshacer();
}

// Receiver
class Luz {
    public void encender() {
        System.out.println("Luz encendida");
    }
    
    public void apagar() {
        System.out.println("Luz apagada");
    }
}

// ConcreteCommand
class ComandoEncender implements Comando {
    private Luz luz;
    
    public ComandoEncender(Luz luz) {
        this.luz = luz;
    }
    
    public void ejecutar() {
        luz.encender();
    }
    
    public void deshacer() {
        luz.apagar();
    }
}

// Invoker
class ControlRemoto {
    private Comando comando;
    
    public void setComando(Comando comando) {
        this.comando = comando;
    }
    
    public void presionarBoton() {
        comando.ejecutar();
    }
    
    public void presionarDeshacer() {
        comando.deshacer();
    }
}

// Uso:
Luz luz = new Luz();
ControlRemoto control = new ControlRemoto();
control.setComando(new ComandoEncender(luz));

control.presionarBoton(); // Enciende la luz
control.presionarDeshacer(); // Apaga la luz
'''
  });

  // Patrones de Comportamiento - Template Method
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Template Method',
    'definition': '''
El Template Method es como una receta con pasos opcionales: define el esqueleto de un algoritmo en una clase base, pero permite que subclases redefinan ciertos pasos sin cambiar la estructura general.

¬øTienes algoritmos que son casi id√©nticos pero con peque√±as variaciones? En lugar de copiar y pegar c√≥digo, Template Method te ayuda a reutilizar la estructura com√∫n mientras personalizas los detalles.

C√≥mo funciona:
1. Clase abstracta define el "template" (m√©todo con pasos fijos)
2. Algunos pasos son implementados en la clase base
3. Otros son abstractos o tienen implementaci√≥n por defecto
4. Subclases concretas implementan los pasos variables

Ventajas:
- Elimina duplicaci√≥n de c√≥digo
- Centraliza el control de la estructura del algoritmo
- Permite flexibilidad en ciertos pasos
- Cumple con el principio Hollywood ("No nos llames, nosotros te llamamos")

Ejemplos:
- Frameworks (Spring, Hibernate)
- Flujos de procesamiento est√°ndar
- Algoritmos con variaciones conocidas
''',
    'code_example': '''
// Clase abstracta con template method
abstract class ProcesadorDePedidos {
    // Template method (final para que no se sobrescriba)
    public final void procesarPedido() {
        verificarDisponibilidad();
        calcularTotal();
        if (requiereEnvio()) {
            prepararEnvio();
        }
        realizarPago();
        confirmarPedido();
    }
    
    // Pasos implementados
    private void verificarDisponibilidad() {
        System.out.println("Verificando disponibilidad...");
    }
    
    private void confirmarPedido() {
        System.out.println("Pedido confirmado. Gracias!");
    }
    
    // Pasos abstractos
    abstract void calcularTotal();
    abstract void realizarPago();
    
    // Hook (m√©todo opcional que puede sobrescribirse)
    boolean requiereEnvio() {
        return true;
    }
    
    void prepararEnvio() {
        System.out.println("Preparando env√≠o est√°ndar...");
    }
}

// Implementaci√≥n concreta
class PedidoFisico extends ProcesadorDePedidos {
    void calcularTotal() {
        System.out.println("Calculando total con env√≠o...");
    }
    
    void realizarPago() {
        System.out.println("Procesando pago con tarjeta...");
    }
}

class PedidoDigital extends ProcesadorDePedidos {
    void calcularTotal() {
        System.out.println("Calculando total sin env√≠o...");
    }
    
    void realizarPago() {
        System.out.println("Procesando pago con PayPal...");
    }
    
    boolean requiereEnvio() {
        return false; // Sobrescribe el hook
    }
}

// Uso:
ProcesadorDePedidos pedido1 = new PedidoFisico();
pedido1.procesarPedido(); // Incluye env√≠o

ProcesadorDePedidos pedido2 = new PedidoDigital();
pedido2.procesarPedido(); // Sin env√≠o
'''
  });
}

Future<void> insertSrLevel2Data(Database db) async {}
