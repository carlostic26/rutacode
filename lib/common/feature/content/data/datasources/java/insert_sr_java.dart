import 'package:sqflite_common/sqlite_api.dart';

Future<void> insertSrLevel1Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Singleton',
    'definition': '''
El patr√≥n Singleton es como el guardi√°n de una √∫nica instancia. Imagina que tienes una configuraci√≥n global en tu app: no quieres que cada clase cree su propia copia, sino que todas usen la misma. Ah√≠ entra Singleton.

¬øTe est√°s preguntando por qu√© no usar simplemente variables est√°ticas? Bueno, Singleton va m√°s all√°: controla c√≥mo y cu√°ndo se crea esa instancia √∫nica, y puede ser perezoso (se crea solo cuando se necesita). ¬°Ah, y es thread-safe! üõ°Ô∏è

Un Singleton en Java tiene tres reglas de oro:
1. Constructor privado (para que nadie m√°s pueda crear instancias)
2. Variable est√°tica privada que guarda la √∫nica instancia
3. M√©todo p√∫blico est√°tico para acceder a esa instancia

La magia est√° en que aunque llames a getInstance() mil veces, siempre obtendr√°s el mismo objeto. Perfecto para conexiones a BD, loggers, o configuraciones globales. Pero ojo: no abuses de √©l, porque puede hacer tu c√≥digo dif√≠cil de testear.
''',
    'code_example': '''
// Implementaci√≥n correcta (thread-safe y lazy)
public class DatabaseConnection {
    private static DatabaseConnection instance;
    
    private DatabaseConnection() {} // Constructor privado
    
    public static synchronized DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }
}

// Uso:
DatabaseConnection conn = DatabaseConnection.getInstance();

// ‚ùå Error com√∫n: no hacerlo thread-safe
public static DatabaseConnection getInstance() {
    if (instance == null) {
        instance = new DatabaseConnection(); // Problema si m√∫ltiples threads entran aqu√≠
    }
    return instance;
}
'''
  });

// Patrones Creacionales - Factory Method
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Factory Method',
    'definition': '''
El Factory Method es como un men√∫ de restaurante: t√∫ pides un plato (objeto) y la cocina (f√°brica) decide c√≥mo prepararlo. No necesitas saber los detalles de creaci√≥n, solo pedir lo que quieres.

¬øAlguna vez has visto c√≥digo lleno de "new ClaseX()" por todas partes? Eso es acoplamiento fuerte. El Factory Method te ayuda a delegar la creaci√≥n de objetos, haciendo tu c√≥digo m√°s flexible. ¬øPor qu√©? Porque si ma√±ana cambias c√≥mo se crean los objetos, solo modificas la f√°brica, no todo tu c√≥digo.

El truco est√° en:
1. Una interfaz com√∫n para los productos
2. Una clase creadora con el m√©todo f√°brica (abstracto o no)
3. Implementaciones concretas que deciden qu√© objeto crear

Es especialmente √∫til cuando:
- No sabes de antemano qu√© tipos exactos de objetos necesitar√°s
- Quieres centralizar la l√≥gica de creaci√≥n
- El sistema necesita ser extensible para nuevos tipos
''',
    'code_example': '''
// Interfaz com√∫n
interface Transporte {
    void entregar();
}

// Productos concretos
class Camion implements Transporte {
    public void entregar() {
        System.out.println("Entregando por tierra...");
    }
}

class Barco implements Transporte {
    public void entregar() {
        System.out.println("Entregando por mar...");
    }
}

// F√°brica
abstract class Logistica {
    abstract Transporte crearTransporte();
    
    public void planificarEntrega() {
        Transporte t = crearTransporte();
        t.entregar();
    }
}

// F√°bricas concretas
class LogisticaTerrestre extends Logistica {
    Transporte crearTransporte() {
        return new Camion();
    }
}

class LogisticaMaritima extends Logistica {
    Transporte crearTransporte() {
        return new Barco();
    }
}

// Uso:
Logistica logistica = new LogisticaTerrestre();
logistica.planificarEntrega(); // Crea y usa un Camion
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Abstract Factory',
    'definition': '''
El Abstract Factory es como una f√°brica de f√°bricas. Mientras el Factory Method te da un men√∫, Abstract Factory te da todo un restaurante tem√°tico completo (con platos, decoraci√≥n y m√∫sica acorde). Es √∫til cuando necesitas crear familias de objetos relacionados.

¬øAlguna vez has tenido que cambiar todo el look-and-feel de una app? Con Abstract Factory, puedes cambiar entre "families" completas (como temas claro/oscuro) sin modificar cada creaci√≥n individual.

C√≥mo funciona:
1. Declaras interfaces abstractas para cada producto (Ej: Button, Checkbox)
2. Creas f√°bricas concretas que implementan esas interfaces (Ej: LightThemeFactory, DarkThemeFactory)
3. El cliente usa las interfaces abstractas, sin conocer las implementaciones concretas

Ventajas:
- Mantiene la consistencia entre productos relacionados
- Facilita el cambio entre familias de productos
- Cumple con el principio de inversi√≥n de dependencias
''',
    'code_example': '''
// Interfaces abstractas
interface Button {
    void render();
}

interface Checkbox {
    void tick();
}

// F√°brica abstracta
interface GUIFactory {
    Button createButton();
    Checkbox createCheckbox();
}

// Familia Windows
class WindowsButton implements Button {
    public void render() {
        System.out.println("Windows style button");
    }
}

class WindowsCheckbox implements Checkbox {
    public void tick() {
        System.out.println("Windows style checkbox");
    }
}

class WindowsFactory implements GUIFactory {
    public Button createButton() {
        return new WindowsButton();
    }
    public Checkbox createCheckbox() {
        return new WindowsCheckbox();
    }
}

// Familia MacOS
class MacOSButton implements Button {
    public void render() {
        System.out.println("MacOS style button");
    }
}

// Uso:
GUIFactory factory = new WindowsFactory(); // Cambia a MacOSFactory para otro tema
Button btn = factory.createButton();
btn.render();
'''
  });

// Patrones Creacionales - Builder
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Creacionales',
    'subtopic': 'Builder',
    'definition': '''
El patr√≥n Builder es como pedir una pizza: eliges cada ingrediente paso a paso hasta tener exactamente lo que quieres, sin necesidad de memorizar combinaciones complejas. Es ideal para crear objetos con muchos par√°metros opcionales.

¬øCansado de constructores con 10 par√°metros donde siempre olvidas el orden? ¬øO de m√∫ltiples constructores para diferentes combinaciones? Builder resuelve esto permiti√©ndote construir objetos pieza por pieza.

Componentes clave:
- Director: opcional, orquesta el proceso de construcci√≥n
- Builder: interfaz con m√©todos para construir cada parte
- ConcreteBuilder: implementaci√≥n concreta, mantiene el objeto en construcci√≥n
- Product: el objeto complejo resultante

Ventajas:
- Permite diferentes representaciones del mismo proceso de construcci√≥n
- A√≠sla c√≥digo complejo de construcci√≥n
- Permite construir objetos paso a paso
''',
    'code_example': '''
// Producto complejo
class Pizza {
    private String masa;
    private String salsa;
    private List<String> toppings = new ArrayList<>();
    
    public void setMasa(String masa) { this.masa = masa; }
    public void setSalsa(String salsa) { this.salsa = salsa; }
    public void addTopping(String topping) { toppings.add(topping); }
}

// Builder abstracto
interface PizzaBuilder {
    void buildMasa();
    void buildSalsa();
    void buildToppings();
    Pizza getPizza();
}

// ConcreteBuilder
class HawaianaBuilder implements PizzaBuilder {
    private Pizza pizza = new Pizza();
    
    public void buildMasa() { pizza.setMasa("suave"); }
    public void buildSalsa() { pizza.setSalsa("dulce"); }
    public void buildToppings() {
        pizza.addTopping("jam√≥n");
        pizza.addTopping("pi√±a");
    }
    public Pizza getPizza() { return pizza; }
}

// Director (opcional)
class Cocina {
    public Pizza hacerPizza(PizzaBuilder builder) {
        builder.buildMasa();
        builder.buildSalsa();
        builder.buildToppings();
        return builder.getPizza();
    }
}

// Uso:
PizzaBuilder builder = new HawaianaBuilder();
Cocina cocina = new Cocina();
Pizza pizza = cocina.hacerPizza(builder);
'''
  });

// Patrones Estructurales - Adapter
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Adapter',
    'definition': '''
El patr√≥n Adapter es el traductor de tu c√≥digo. Imagina que tienes un enchufe europeo (tu interfaz) y un tomacorriente americano (la interfaz que necesitas). El Adapter es ese conversor que te permite conectar ambos mundos.

¬øTe ha pasado que quieres usar una clase genial, pero su interfaz no coincide con lo que espera tu c√≥digo? ¬°Bingo! Ah√≠ necesitas un Adapter. No modifiques la clase existente (abrir√≠as la caja de Pandora), mejor crea un adaptador.

Hay dos tipos:
1. Adapter de clase (usa herencia)
2. Adapter de objeto (usa composici√≥n)

Funciona as√≠:
- Target: la interfaz que tu sistema espera
- Adaptee: la clase existente que quieres usar
- Adapter: la clase que hace la traducci√≥n

Es perfecto para integrar librer√≠as de terceros, APIs legadas, o cuando refactorizas partes de un sistema sin romper todo lo dem√°s.
''',
    'code_example': '''
// Interfaz que espera tu sistema (Target)
interface Reproductor {
    void reproducir(String tipo, String nombreArchivo);
}

// Clase existente con interfaz incompatible (Adaptee)
class ReproductorAvanzado {
    public void playMp3(String archivo) {
        System.out.println("Reproduciendo MP3: " + archivo);
    }
    
    public void playMp4(String archivo) {
        System.out.println("Reproduciendo MP4: " + archivo);
    }
}

// Adapter
class ReproductorAdapter implements Reproductor {
    private ReproductorAvanzado avanzado = new ReproductorAvanzado();
    
    public void reproducir(String tipo, String nombreArchivo) {
        if (tipo.equalsIgnoreCase("mp3")) {
            avanzado.playMp3(nombreArchivo);
        } else if (tipo.equalsIgnoreCase("mp4")) {
            avanzado.playMp4(nombreArchivo);
        }
    }
}

// Uso:
Reproductor reproductor = new ReproductorAdapter();
reproductor.reproducir("mp3", "cancion.mp3"); // Ahora funciona con tu interfaz
'''
  });

// Patrones Estructurales - Decorator
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Decorator',
    'definition': '''
El patr√≥n Decorator es como poner capas a una cebolla üßÖ (pero sin llorar). Te permite a√±adir funcionalidad a un objeto din√°micamente, sin modificar su clase original. Es la alternativa elegante a la herencia cuando necesitas ampliar comportamiento.

¬øQuieres a√±adir funcionalidad a un objeto pero heredar no es una opci√≥n (porque es final o romper√≠a LSP)? Decorator al rescate. Envuelves el objeto original y a√±ades lo que necesites, manteniendo la misma interfaz.

C√≥mo funciona:
1. Tienes un Componente (interfaz com√∫n)
2. Un ConcreteComponent (implementaci√≥n b√°sica)
3. Decoradores que implementan la misma interfaz y envuelven al componente
4. Puedes anidar decoradores como capas

Se usa mucho en:
- Streams de Java (BufferedInputStream decorando FileInputStream)
- GUI (a√±adir bordes, scrolls a componentes visuales)
- Middleware (a√±adir logging, caching, etc.)
''',
    'code_example': '''
// Componente
interface Cafe {
    String getDescripcion();
    double getCosto();
}

// ConcreteComponent
class CafeSimple implements Cafe {
    public String getDescripcion() { return "Cafe simple"; }
    public double getCosto() { return 2.0; }
}

// Decorator abstracto
abstract class DecoradorCafe implements Cafe {
    protected Cafe cafeDecorado;
    
    public DecoradorCafe(Cafe cafe) {
        this.cafeDecorado = cafe;
    }
}

// ConcreteDecorators
class Leche extends DecoradorCafe {
    public Leche(Cafe cafe) { super(cafe); }
    
    public String getDescripcion() {
        return cafeDecorado.getDescripcion() + ", con leche";
    }
    
    public double getCosto() {
        return cafeDecorado.getCosto() + 0.5;
    }
}

class Chocolate extends DecoradorCafe {
    public Chocolate(Cafe cafe) { super(cafe); }
    
    public String getDescripcion() {
        return cafeDecorado.getDescripcion() + ", con chocolate";
    }
    
    public double getCosto() {
        return cafeDecorado.getCosto() + 1.0;
    }
}

// Uso:
Cafe miCafe = new Chocolate(new Leche(new CafeSimple()));
System.out.println(miCafe.getDescripcion() + ": " + miCafe.getCosto());
// Output: Cafe simple, con leche, con chocolate: 3.5
'''
  });

// Patrones Estructurales - Facade
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Facade',
    'definition': '''
El patr√≥n Facade es como el bot√≥n "Easy" de tu sistema. Oculta la complejidad de m√∫ltiples subsistemas detr√°s de una interfaz simple. Es ese amigo que te explica algo complicado en t√©rminos que entiendes.

¬øAlguna vez has tenido que hacer 10 llamadas en orden espec√≠fico para realizar una tarea? Facade te da un √∫nico punto de entrada que maneja toda esa complejidad por ti.

Por qu√© usarlo:
- Simplifica la interfaz para clientes
- Reduce el acoplamiento entre subsistemas
- Proporciona un punto √∫nico de acceso
- Mejora la legibilidad y mantenibilidad

No es:
- Un reemplazo para la funcionalidad existente
- Una simplificaci√≥n excesiva que pierde capacidades

Ejemplos reales:
- APIs simplificadas sobre sistemas complejos
- Wrappers para librer√≠as complicadas
- Puntos de entrada para subsistemas legacy
''',
    'code_example': '''
// Subsistemas complejos
class SistemaDeArchivos {
    public byte[] leerArchivo(String ruta) {
        System.out.println("Leyendo archivo: " + ruta);
        return new byte[0];
    }
}

class Compresor {
    public byte[] comprimir(byte[] datos) {
        System.out.println("Comprimiendo datos...");
        return datos;
    }
}

class Encriptador {
    public byte[] encriptar(byte[] datos) {
        System.out.println("Encriptando datos...");
        return datos;
    }
}

// Facade
class SistemaSeguro {
    private SistemaDeArchivos sistemaArchivos = new SistemaDeArchivos();
    private Compresor compresor = new Compresor();
    private Encriptador encriptador = new Encriptador();
    
    public byte[] cargarArchivoSeguro(String ruta) {
        byte[] datos = sistemaArchivos.leerArchivo(ruta);
        byte[] comprimido = compresor.comprimir(datos);
        return encriptador.encriptar(comprimido);
    }
}

// Uso:
SistemaSeguro sistema = new SistemaSeguro();
byte[] archivo = sistema.cargarArchivoSeguro("datos.txt");
// El cliente no necesita saber nada de los subsistemas internos
'''
  });

// Patrones Estructurales - Proxy
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones Estructurales',
    'subtopic': 'Proxy',
    'definition': '''
El patr√≥n Proxy es como un asistente personal: controla el acceso a un objeto, a√±adiendo capas de funcionalidad cuando sea necesario. Es un "placeholder" que representa a otro objeto.

¬øNecesitas controlar cu√°ndo se crea un objeto pesado? ¬øO a√±adir seguridad, logging o caching? Proxy te permite hacerlo sin modificar el objeto original.

Tipos comunes:
- Virtual Proxy: pospone la creaci√≥n de objetos costosos
- Protection Proxy: controla acceso
- Remote Proxy: representa objetos en otro espacio de direcciones
- Smart Proxy: a√±ade l√≥gica adicional (logging, caching)

C√≥mo funciona:
1. Misma interfaz que el objeto real
2. Mantiene referencia al objeto real
3. Controla el acceso, delegando cuando sea necesario

Java lo usa en:
- java.lang.reflect.Proxy
- RMI (Remote Method Invocation)
- Hibernate (para lazy loading)
''',
    'code_example': '''
// Interfaz com√∫n
interface Imagen {
    void mostrar();
}

// Objeto real (costoso)
class ImagenReal implements Imagen {
    private String archivo;
    
    public ImagenReal(String archivo) {
        this.archivo = archivo;
        cargarDesdeDisco();
    }
    
    private void cargarDesdeDisco() {
        System.out.println("Cargando imagen pesada: " + archivo);
    }
    
    public void mostrar() {
        System.out.println("Mostrando imagen: " + archivo);
    }
}

// Proxy
class ProxyImagen implements Imagen {
    private ImagenReal imagenReal;
    private String archivo;
    
    public ProxyImagen(String archivo) {
        this.archivo = archivo;
    }
    
    public void mostrar() {
        if (imagenReal == null) {
            imagenReal = new ImagenReal(archivo); // Carga perezosa
        }
        imagenReal.mostrar();
    }
}

// Uso:
Imagen imagen = new ProxyImagen("foto_10MB.jpg");
// La imagen real no se carga hasta que se necesita
imagen.mostrar(); // Aqu√≠ se carga y muestra
'''
  });

// Patrones de Comportamiento - Strategy
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Strategy',
    'definition': '''
El patr√≥n Strategy es como tener un juego de herramientas: seleccionas exactamente la que necesitas para cada trabajo. Define una familia de algoritmos, los encapsula y los hace intercambiables.

¬øTienes m√∫ltiples formas de realizar una tarea (como diferentes tipos de ordenamiento o formatos de exportaci√≥n)? Strategy te permite cambiar el algoritmo usado en runtime sin modificar el c√≥digo que lo usa.

Componentes:
- Context: mantiene referencia a la estrategia actual
- Strategy: interfaz com√∫n para todos los algoritmos
- ConcreteStrategies: implementaciones espec√≠ficas

Ventajas:
- Elimina condicionales complejos
- Facilita a√±adir nuevas estrategias
- Permite cambiar comportamiento en tiempo de ejecuci√≥n
- Cumple con el principio Open/Closed

Ejemplos:
- Algoritmos de compresi√≥n (ZIP, RAR, 7z)
- M√©todos de pago (PayPal, Tarjeta, Bitcoin)
- Rutas de navegaci√≥n (r√°pida, panor√°mica, econ√≥mica)
''',
    'code_example': '''
// Strategy
interface EstrategiaPago {
    void pagar(double monto);
}

// ConcreteStrategies
class PagoPayPal implements EstrategiaPago {
    private String email;
    
    public PagoPayPal(String email) {
        this.email = email;
    }
    
    public void pagar(double monto) {
        System.out.println(monto + " pagado via PayPal (" + email + ")");
    }
}

class PagoTarjeta implements EstrategiaPago {
    private String numeroTarjeta;
    
    public PagoTarjeta(String numeroTarjeta) {
        this.numeroTarjeta = numeroTarjeta;
    }
    
    public void pagar(double monto) {
        System.out.println(monto + " pagado con tarjeta terminada en " 
            + numeroTarjeta.substring(numeroTarjeta.length() - 4));
    }
}

// Context
class CarritoCompras {
    private EstrategiaPago estrategia;
    
    public void setEstrategia(EstrategiaPago estrategia) {
        this.estrategia = estrategia;
    }
    
    public void pagar(double monto) {
        if (estrategia == null) {
            throw new IllegalStateException("Estrategia no configurada");
        }
        estrategia.pagar(monto);
    }
}

// Uso:
CarritoCompras carrito = new CarritoCompras();
carrito.setEstrategia(new PagoPayPal("usuario@example.com"));
carrito.pagar(100.50);

carrito.setEstrategia(new PagoTarjeta("1234567890123456"));
carrito.pagar(75.25);
'''
  });

// Patrones de Comportamiento - Observer
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Observer',
    'definition': '''
El patr√≥n Observer es como un sistema de suscripci√≥n a newsletters. Tienes un sujeto (la lista de correos) y observadores (los suscriptores). Cuando el sujeto cambia (nuevo newsletter), todos los observadores son notificados autom√°ticamente. üì®

¬øNo odias cuando tienes que estar revisando constantemente si algo ha cambiado? Con Observer, los objetos interesados se registran y son notificados solo cuando pasa algo importante. ¬°Decimos adi√≥s al polling!

Componentes clave:
- Subject: mantiene la lista de observers y notifica cambios
- Observer: interfaz que define el m√©todo de actualizaci√≥n
- ConcreteObservers: implementan acciones espec√≠ficas ante notificaciones

Se usa mucho en:
- Sistemas de eventos GUI (botones que notifican clicks)
- Actualizaciones en tiempo real (como feeds de redes sociales)
- Mecanismos de publish/subscribe

Java incluso tiene clases built-in para esto (java.util.Observer), pero entender el patr√≥n te permite implementarlo de formas m√°s flexibles.
''',
    'code_example': '''
// Interfaz Observer
interface Observer {
    void actualizar(String mensaje);
}

// Subject (Observable)
class Newsletter {
    private List<Observer> suscriptores = new ArrayList<>();
    private String ultimoPost;
    
    public void agregarSuscriptor(Observer o) {
        suscriptores.add(o);
    }
    
    public void nuevoPost(String post) {
        this.ultimoPost = post;
        notificarSuscriptores();
    }
    
    private void notificarSuscriptores() {
        for (Observer o : suscriptores) {
            o.actualizar(ultimoPost);
        }
    }
}

// ConcreteObserver
class Usuario implements Observer {
    private String nombre;
    
    public Usuario(String nombre) {
        this.nombre = nombre;
    }
    
    public void actualizar(String mensaje) {
        System.out.println(nombre + " recibi√≥: " + mensaje);
    }
}

// Uso:
Newsletter blog = new Newsletter();
Usuario ana = new Usuario("Ana");
Usuario luis = new Usuario("Luis");

blog.agregarSuscriptor(ana);
blog.agregarSuscriptor(luis);

blog.nuevoPost("¬°Nuevo patr√≥n de dise√±o publicado!");
// Salida:
// Ana recibi√≥: ¬°Nuevo patr√≥n de dise√±o publicado!
// Luis recibi√≥: ¬°Nuevo patr√≥n de dise√±o publicado!
'''
  });

// Patrones de Comportamiento - Command
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Command',
    'definition': '''
El patr√≥n Command es como dejar una nota con instrucciones: encapsula una solicitud como un objeto, permiti√©ndote parametrizar clientes con diferentes solicitudes. Es el patr√≥n detr√°s de los sistemas de "undo", colas de trabajo y operaciones remotas.

¬øNecesitas desacoplar qui√©n invoca una operaci√≥n de c√≥mo se ejecuta? Command te permite empaquetar una acci√≥n con toda su informaci√≥n en un objeto independiente.

Elementos clave:
- Command: interfaz con m√©todo execute()
- ConcreteCommand: implementa execute(), llama al receiver
- Invoker: pide al command que ejecute la solicitud
- Receiver: sabe c√≥mo realizar la operaci√≥n

Casos de uso:
- Sistemas de deshacer/rehacer
- Operaciones en cola o programadas
- Transacciones
- Men√∫s y botones en GUIs
- Operaciones remotas (RPC)
''',
    'code_example': '''
// Command
interface Comando {
    void ejecutar();
    void deshacer();
}

// Receiver
class Luz {
    public void encender() {
        System.out.println("Luz encendida");
    }
    
    public void apagar() {
        System.out.println("Luz apagada");
    }
}

// ConcreteCommand
class ComandoEncender implements Comando {
    private Luz luz;
    
    public ComandoEncender(Luz luz) {
        this.luz = luz;
    }
    
    public void ejecutar() {
        luz.encender();
    }
    
    public void deshacer() {
        luz.apagar();
    }
}

// Invoker
class ControlRemoto {
    private Comando comando;
    
    public void setComando(Comando comando) {
        this.comando = comando;
    }
    
    public void presionarBoton() {
        comando.ejecutar();
    }
    
    public void presionarDeshacer() {
        comando.deshacer();
    }
}

// Uso:
Luz luz = new Luz();
ControlRemoto control = new ControlRemoto();
control.setComando(new ComandoEncender(luz));

control.presionarBoton(); // Enciende la luz
control.presionarDeshacer(); // Apaga la luz
'''
  });

  // Patrones de Comportamiento - Template Method
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 1,
    'tittle_level': 'Patrones de Dise√±o',
    'topic': 'Patrones de Comportamiento',
    'subtopic': 'Template Method',
    'definition': '''
El Template Method es como una receta con pasos opcionales: define el esqueleto de un algoritmo en una clase base, pero permite que subclases redefinan ciertos pasos sin cambiar la estructura general.

¬øTienes algoritmos que son casi id√©nticos pero con peque√±as variaciones? En lugar de copiar y pegar c√≥digo, Template Method te ayuda a reutilizar la estructura com√∫n mientras personalizas los detalles.

C√≥mo funciona:
1. Clase abstracta define el "template" (m√©todo con pasos fijos)
2. Algunos pasos son implementados en la clase base
3. Otros son abstractos o tienen implementaci√≥n por defecto
4. Subclases concretas implementan los pasos variables

Ventajas:
- Elimina duplicaci√≥n de c√≥digo
- Centraliza el control de la estructura del algoritmo
- Permite flexibilidad en ciertos pasos
- Cumple con el principio Hollywood ("No nos llames, nosotros te llamamos")

Ejemplos:
- Frameworks (Spring, Hibernate)
- Flujos de procesamiento est√°ndar
- Algoritmos con variaciones conocidas
''',
    'code_example': '''
// Clase abstracta con template method
abstract class ProcesadorDePedidos {
    // Template method (final para que no se sobrescriba)
    public final void procesarPedido() {
        verificarDisponibilidad();
        calcularTotal();
        if (requiereEnvio()) {
            prepararEnvio();
        }
        realizarPago();
        confirmarPedido();
    }
    
    // Pasos implementados
    private void verificarDisponibilidad() {
        System.out.println("Verificando disponibilidad...");
    }
    
    private void confirmarPedido() {
        System.out.println("Pedido confirmado. Gracias!");
    }
    
    // Pasos abstractos
    abstract void calcularTotal();
    abstract void realizarPago();
    
    // Hook (m√©todo opcional que puede sobrescribirse)
    boolean requiereEnvio() {
        return true;
    }
    
    void prepararEnvio() {
        System.out.println("Preparando env√≠o est√°ndar...");
    }
}

// Implementaci√≥n concreta
class PedidoFisico extends ProcesadorDePedidos {
    void calcularTotal() {
        System.out.println("Calculando total con env√≠o...");
    }
    
    void realizarPago() {
        System.out.println("Procesando pago con tarjeta...");
    }
}

class PedidoDigital extends ProcesadorDePedidos {
    void calcularTotal() {
        System.out.println("Calculando total sin env√≠o...");
    }
    
    void realizarPago() {
        System.out.println("Procesando pago con PayPal...");
    }
    
    boolean requiereEnvio() {
        return false; // Sobrescribe el hook
    }
}

// Uso:
ProcesadorDePedidos pedido1 = new PedidoFisico();
pedido1.procesarPedido(); // Incluye env√≠o

ProcesadorDePedidos pedido2 = new PedidoDigital();
pedido2.procesarPedido(); // Sin env√≠o
'''
  });
}

Future<void> insertSrLevel2Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'JVM Internals',
    'subtopic': 'Modelo de memoria de Java',
    'definition': '''
El modelo de memoria de Java es como el plano arquitect√≥nico que define c√≥mo la JVM organiza y gestiona la memoria durante la ejecuci√≥n de un programa. Es fundamental entenderlo para escribir c√≥digo eficiente y evitar problemas como memory leaks.

¬øAlguna vez te has preguntado por qu√© tu aplicaci√≥n consume m√°s memoria de la esperada? La respuesta suele estar en c√≥mo interact√∫as con este modelo de memoria.

La JVM divide la memoria en varias √°reas clave: el Heap (donde van los objetos), el Stack (para llamadas a m√©todos y variables locales), el Metaspace (antes PermGen, para clases y m√©todos), y otros espacios m√°s especializados. Cada uno tiene su prop√≥sito y reglas de gesti√≥n. El Heap a su vez se divide en Generaciones (Young, Old) que permiten a la JVM optimizar la recolecci√≥n de basura. Entender esta estructura te ayuda a tomar decisiones como cu√°ndo usar tipos primitivos vs objetos, o c√≥mo configurar los tama√±os de memoria al lanzar tu aplicaci√≥n.
''',
    'code_example': '''
// Ejemplo de configuraci√≥n de memoria al iniciar la JVM
// Esto se hace con par√°metros de l√≠nea de comandos
public class MemoryDemo {
    public static void main(String[] args) {
        // -Xms512m -Xmx1024m -XX:MaxMetaspaceSize=256m
        System.out.println("Ejemplo de configuraci√≥n de memoria");
    }
}

// Ejemplo problem√°tico - Creaci√≥n innecesaria de objetos
public class MemoryProblem {
    public static void main(String[] args) {
        while(true) {
            String s = new String("Hello"); // Mal: crea un nuevo objeto cada vez
            // Mejor: String s = "Hello";
        }
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'JVM Internals',
    'subtopic': 'Recolectores de basura (GC)',
    'definition': '''
El recolector de basura (Garbage Collector o GC) es el sistema de limpieza autom√°tica de Java que libera memoria ocupada por objetos que ya no son necesarios. Es una de las caracter√≠sticas m√°s poderosas de Java, pero tambi√©n una de las m√°s malentendidas.

¬øSab√≠as que elegir el GC adecuado puede mejorar el rendimiento de tu aplicaci√≥n hasta en un 50%? No todos los recolectores funcionan igual para todos los casos de uso.

Java ofrece varios tipos de GC: Serial GC (simple pero lento), Parallel GC (usa m√∫ltiples hilos), CMS (Concurrent Mark Sweep), G1 (Garbage First, el predeterminado desde Java 9), y ZGC/Shenandoah (para heaps enormes). Cada uno hace compromisos diferentes entre throughput (cantidad de trabajo realizado), latencia (tiempo de pausa), y uso de CPU. Por ejemplo, G1 intenta balancear estos factores dividiendo el heap en regiones, mientras que ZGC est√° dise√±ado para pausas extremadamente cortas incluso con terabytes de memoria.
''',
    'code_example': '''
// Ejemplo de configuraci√≥n del Garbage Collector
public class GCDemo {
    public static void main(String[] args) {
        // Usar G1 GC (predeterminado desde Java 9)
        // -XX:+UseG1GC
        
        // Configurar tama√±o m√°ximo de pausa deseado
        // -XX:MaxGCPauseMillis=200
        
        System.out.println("Ejemplo de configuraci√≥n GC");
    }
}

// Ejemplo que puede causar problemas de GC
public class GCProblem {
    public static void main(String[] args) {
        List<byte[]> list = new ArrayList<>();
        while(true) {
            list.add(new byte[1024 * 1024]); // Llena el heap r√°pidamente
            // Sin control, puede forzar GC frecuentes
        }
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'JVM Internals',
    'subtopic': 'JIT compilation',
    'definition': '''
La compilaci√≥n JIT (Just-In-Time) es uno de los secretos mejor guardados del rendimiento en Java. A diferencia de los lenguajes compilados tradicionalmente, Java convierte el bytecode en c√≥digo nativo en tiempo de ejecuci√≥n, justo cuando se necesita.

¬øTe has preguntado c√≥mo Java puede competir en rendimiento con lenguajes como C++? La magia est√° en el JIT y sus optimizaciones adaptativas.

El compilador JIT (como C1 y C2 en HotSpot) analiza el c√≥digo mientras se ejecuta y aplica optimizaciones agresivas a los m√©todos m√°s usados (los "hot spots"). Algunas t√©cnicas incluyen: inline de m√©todos peque√±os, eliminaci√≥n de c√≥digo muerto, o incluso desoptimizaci√≥n si las suposiciones cambian. Esto permite que Java tenga la portabilidad del bytecode pero con rendimiento cercano al nativo. El JIT aprende del comportamiento real de tu aplicaci√≥n, por eso los benchmarks deben incluir fases de calentamiento.
''',
    'code_example': '''
// Ejemplo donde el JIT puede optimizar
public class JITExample {
    public static void main(String[] args) {
        for (int i = 0; i < 10_000; i++) {
            calculate(); // Despu√©s de muchas iteraciones, el JIT compilar√° este m√©todo
        }
    }
    
    private static void calculate() {
        // M√©todo peque√±o que puede ser inlined por el JIT
        int result = 2 + 2;
    }
}

// Ejemplo que dificulta la optimizaci√≥n
public class JITProblem {
    public static void main(String[] args) {
        for (int i = 0; i < 10_000; i++) {
            // M√©todo grande con muchas ramas dificulta el JIT
            complexCalculation(i);
        }
    }
    
    private static void complexCalculation(int n) {
        if (n % 2 == 0) {
            // Muchas ramas diferentes
        } else {
            // C√≥digo alternativo
        }
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'JVM Internals',
    'subtopic': 'Herramientas de monitoreo (jvisualvm, jconsole)',
    'definition': '''
jvisualvm y jconsole son las navajas suizas para cualquier desarrollador Java que necesite entender qu√© est√° pasando dentro de su aplicaci√≥n en tiempo real. Son herramientas oficiales de Oracle incluidas en el JDK.

¬øAlguna vez has tenido que solucionar un problema de rendimiento sin poder detener la aplicaci√≥n? Estas herramientas te permiten conectarte a procesos Java en ejecuci√≥n para obtener insights valiosos.

jvisualvm (la m√°s completa) ofrece: monitoreo de CPU y memoria, profiling de m√©todos, an√°lisis de heap para encontrar memory leaks, y hasta sampler de CPU. jconsole es m√°s b√°sica pero m√°s ligera, ideal para monitoreo remoto. Ambas se conectan via JMX y pueden mostrar informaci√≥n detallada sobre threads, GC activity, y consumo de clases. Para producci√≥n, muchas empresas usan versiones adaptadas de estas herramientas conectadas a sus sistemas de monitoreo centralizados.
''',
    'code_example': '''
// Ejemplo de c√≥mo habilitar JMX para monitoreo remoto
public class JMXEnabledApp {
    public static void main(String[] args) {
        // Par√°metros comunes para habilitar JMX:
        // -Dcom.sun.management.jmxremote
        // -Dcom.sun.management.jmxremote.port=9010
        // -Dcom.sun.management.jmxremote.authenticate=false
        // -Dcom.sun.management.jmxremote.ssl=false
        
        while(true) {
            // Aplicaci√≥n en ejecuci√≥n que puede ser monitoreada
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

// No hay ejemplo incorrecto para este tema, pero un error com√∫n es
// no habilitar JMX en producci√≥n cuando se necesita monitoreo
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'Optimizaci√≥n',
    'subtopic': 'Benchmarking con JMH',
    'definition': '''
JMH (Java Microbenchmark Harness) es la herramienta est√°ndar para medir el rendimiento de peque√±os fragmentos de c√≥digo Java. Es especialmente √∫til cuando necesitas comparar diferentes implementaciones para encontrar la m√°s eficiente.

¬øPor qu√© no simplemente medir con System.currentTimeMillis()? Porque el JIT, la optimizaci√≥n en tiempo de ejecuci√≥n y otros factores pueden distorsionar completamente tus resultados.

JMH maneja autom√°ticamente el calentamiento de la JVM (warmup), ejecuta m√∫ltiples iteraciones, y contrarresta optimizaciones enga√±osas. Para usarlo, defines m√©todos anotados con @Benchmark y JMH se encarga de ejecutarlos en condiciones controladas. Puedes medir throughput (operaciones por tiempo), tiempo promedio, o incluso detalles a nivel de nanosegundos. Es la herramienta que usan los desarrolladores del JDK para optimizar Java mismo.
''',
    'code_example': '''
// Ejemplo b√°sico de benchmark con JMH
@BenchmarkMode(Mode.Throughput)
@OutputTimeUnit(TimeUnit.SECONDS)
@State(Scope.Thread)
public class StringConcatBenchmark {
    private String a = "Hello";
    private String b = "World";
    
    @Benchmark
    public String concatWithPlus() {
        return a + " " + b;  // Usa StringBuilder internamente
    }
    
    @Benchmark
    public String concatWithBuilder() {
        return new StringBuilder().append(a).append(" ").append(b).toString();
    }
}

// Para ejecutar:
// mvn clean install
// java -jar target/benchmarks.jar
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'Optimizaci√≥n',
    'subtopic': 'Memory leaks',
    'definition': '''
Un memory leak en Java ocurre cuando objetos ya no necesarios siguen siendo referenciados, impidiendo que el garbage collector los libere. A diferencia de lenguajes sin GC, en Java los leaks son m√°s sutiles y dif√≠ciles de detectar.

¬øTe ha pasado que tu aplicaci√≥n Java consume cada vez m√°s memoria hasta que finalmente crashea? Eso suele ser un memory leak cl√°sico.

Los leaks comunes incluyen: colecciones est√°ticas que nunca se limpian, listeners que no se desregistran, caches sin l√≠mite de tama√±o, o hilos que no terminan. Herramientas como VisualVM o YourKit pueden ayudarte a identificar estos problemas mostrando qu√© objetos est√°n ocupando memoria y qu√© los mantiene referenciados. La clave est√° en buscar objetos que deber√≠an haber sido recolectados pero su n√∫mero sigue creciendo. A veces la soluci√≥n es tan simple como usar WeakReference o limpiar colecciones manualmente en momentos estrat√©gicos.
''',
    'code_example': '''
// Ejemplo cl√°sico de memory leak
public class LeakyClass {
    private static final List<byte[]> LEAK = new ArrayList<>();
    
    public void leakMemory() {
        while(true) {
            LEAK.add(new byte[1024 * 1024]); // Los bytes se a√±aden pero nunca se eliminan
        }
    }
}

// Soluci√≥n: Limitar el tama√±o o limpiar peri√≥dicamente
public class FixedClass {
    private static final int MAX_SIZE = 100;
    private static final List<byte[]> CACHE = new ArrayList<>();
    
    public void addToCache(byte[] data) {
        if(CACHE.size() >= MAX_SIZE) {
            CACHE.clear(); // Limpiamos cuando llega al l√≠mite
        }
        CACHE.add(data);
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'Optimizaci√≥n',
    'subtopic': 'Optimizaci√≥n de colecciones',
    'definition': '''
Elegir la colecci√≥n adecuada puede marcar la diferencia entre una aplicaci√≥n r√°pida y una que se arrastra. Java ofrece una amplia variedad de estructuras de datos en el Collections Framework, cada una con sus fortalezas y debilidades.

¬øSab√≠as que usar un ArrayList donde necesitas frecuentes inserciones/eliminaciones en medio puede ser hasta 1000 veces m√°s lento que una LinkedList? Pero en la mayor√≠a de casos, ArrayList es la mejor opci√≥n.

Las claves para optimizar colecciones son: entender los patrones de acceso (m√°s lecturas que escrituras?), el tama√±o esperado de los datos, y la concurrencia. Por ejemplo, HashMap es gen√©rico pero LinkedHashMap mantiene orden de inserci√≥n, EnumMap es ultra-r√°pido para enums, y ConcurrentSkipListMap escala mejor con muchos hilos. Para casos extremos, a veces la mejor "colecci√≥n" es un simple array primitivo. Tambi√©n considera colecciones inmutables cuando los datos no cambian - son m√°s seguras y a veces m√°s eficientes.
''',
    'code_example': '''
// Ejemplo de selecci√≥n √≥ptima de colecciones
public class CollectionChoices {
    public static void main(String[] args) {
        // Caso 1: Muchas b√∫squedas por clave
        Map<String, User> userCache = new HashMap<>(); 
        
        // Caso 2: Necesitas orden de inserci√≥n
        Map<String, User> loggedInUsers = new LinkedHashMap<>();
        
        // Caso 3: Concurrencia alta
        Map<String, User> concurrentUsers = new ConcurrentHashMap<>();
        
        // Caso 4: Rangos frecuentes (floor, ceiling)
        NavigableSet<Integer> sortedIds = new TreeSet<>();
    }
}

// Ejemplo problem√°tico
public class BadCollectionChoice {
    public static void main(String[] args) {
        // LinkedList para acceso aleatorio frecuente
        List<Data> dataList = new LinkedList<>(); 
        for (int i = 0; i < 10000; i++) {
            dataList.get(i); // O(n) cada vez - muy lento!
        }
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'Optimizaci√≥n',
    'subtopic': 'Caching strategies',
    'definition': '''
El caching es una de las t√©cnicas m√°s efectivas para mejorar el rendimiento, almacenando resultados costosos para reutilizarlos despu√©s. Pero implementar un buen sistema de cache no es tan simple como parece.

¬øPor qu√© no cachear todo entonces? Porque el caching tiene sus propios problemas: consumo de memoria, consistencia de datos, y complejidad a√±adida.

Java ofrece varias opciones para caching: desde simples HashMaps sincronizados (para casos b√°sicos), hasta soluciones avanzadas como Caffeine o Ehcache con expiraci√≥n por tiempo, tama√±o, o referencia. La estrategia adecuada depende de tu caso: cachear resultados de bases de datos, respuestas HTTP, o c√°lculos intensivos. Tambi√©n debes decidir pol√≠ticas como LRU (Least Recently Used) o FIFO (First In First Out) para gestionar el espacio. Spring Cache abstrae mucho de esta complejidad con anotaciones como @Cacheable, pero entender lo que ocurre bajo el cap√≥ es crucial para evitar problemas.
''',
    'code_example': '''
// Ejemplo b√°sico de cache con HashMap
public class SimpleCache<K, V> {
    private final Map<K, V> cache = new HashMap<>();
    
    public synchronized V get(K key, Supplier<V> supplier) {
        return cache.computeIfAbsent(key, k -> supplier.get());
    }
}

// Ejemplo con Caffeine (librer√≠a moderna de caching)
public class AdvancedCache {
    private final Cache<String, Data> cache = Caffeine.newBuilder()
        .maximumSize(1000)
        .expireAfterWrite(1, TimeUnit.HOURS)
        .build();
        
    public Data getData(String id) {
        return cache.get(id, this::loadDataFromDatabase);
    }
    
    private Data loadDataFromDatabase(String id) {
        // Operaci√≥n costosa
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 2,
    'tittle_level': 'Rendimiento y Optimizaci√≥n',
    'topic': 'Optimizaci√≥n',
    'subtopic': 'Memory leaks',
    'definition': '''
Un memory leak en Java ocurre cuando objetos ya no necesarios siguen siendo referenciados, impidiendo que el garbage collector los libere. A diferencia de lenguajes sin GC, en Java los leaks son m√°s sutiles y dif√≠ciles de detectar.

¬øTe ha pasado que tu aplicaci√≥n Java consume cada vez m√°s memoria hasta que finalmente crashea? Eso suele ser un memory leak cl√°sico.

Los leaks comunes incluyen: colecciones est√°ticas que nunca se limpian, listeners que no se desregistran, caches sin l√≠mite de tama√±o, o hilos que no terminan. Herramientas como VisualVM o YourKit pueden ayudarte a identificar estos problemas mostrando qu√© objetos est√°n ocupando memoria y qu√© los mantiene referenciados. La clave est√° en buscar objetos que deber√≠an haber sido recolectados pero su n√∫mero sigue creciendo. A veces la soluci√≥n es tan simple como usar WeakReference o limpiar colecciones manualmente en momentos estrat√©gicos.
''',
    'code_example': '''
// Ejemplo cl√°sico de memory leak
public class LeakyClass {
    private static final List<byte[]> LEAK = new ArrayList<>();
    
    public void leakMemory() {
        while(true) {
            LEAK.add(new byte[1024 * 1024]); // Los bytes se a√±aden pero nunca se eliminan
        }
    }
}

// Soluci√≥n: Limitar el tama√±o o limpiar peri√≥dicamente
public class FixedClass {
    private static final int MAX_SIZE = 100;
    private static final List<byte[]> CACHE = new ArrayList<>();
    
    public void addToCache(byte[] data) {
        if(CACHE.size() >= MAX_SIZE) {
            CACHE.clear(); // Limpiamos cuando llega al l√≠mite
        }
        CACHE.add(data);
    }
}
'''
  });
}

Future<void> insertSrLevel3Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Core',
    'subtopic': 'Inversi√≥n de Control (IoC)',
    'definition': '''
La Inversi√≥n de Control (IoC) es uno de los principios fundamentales en Spring que cambia la forma tradicional de manejar las dependencias entre componentes. En lugar de que cada objeto cree o gestione sus propias dependencias, delega esa responsabilidad al contenedor de Spring.

¬øTe has preguntado por qu√© esto es tan revolucionario? Pi√©nsalo as√≠: en desarrollo tradicional, cada clase que necesita otra dependencia debe crearla o buscarla manualmente. Con IoC, Spring se encarga de inyectar esas dependencias donde se necesitan, lo que hace el c√≥digo m√°s limpio, testeable y mantenible.

El contenedor IoC de Spring es el n√∫cleo del framework. Administra el ciclo de vida de los objetos (llamados beans) y sus dependencias. Cuando defines un bean (usando anotaciones como @Component o @Service), Spring lo registra en su contenedor. Luego, cuando otro componente lo necesita (usando @Autowired), Spring lo inyecta autom√°ticamente. Esto elimina el acoplamiento fuerte entre clases y facilita cambios futuros. Adem√°s, permite configuraciones flexibles mediante XML, anotaciones o Java Config.
''',
    'code_example': '''
// Ejemplo correcto usando IoC con Spring
@Service
public class UserService {
    private final UserRepository userRepository;
    
    @Autowired  // Spring inyecta la dependencia autom√°ticamente
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
}

// Ejemplo incorrecto (sin IoC)
public class UserService {
    private UserRepository userRepository = new UserRepository();  // Acoplamiento fuerte
    
    public UserService() {
        // Problema: dif√≠cil de testear y cambiar implementaci√≥n
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Core',
    'subtopic': 'Inyecci√≥n de Dependencias (DI)',
    'definition': '''
La Inyecci√≥n de Dependencias (DI) es el mecanismo pr√°ctico que implementa el principio de IoC en Spring. Consiste en proporcionar las dependencias que un objeto necesita desde el exterior, en lugar de que el objeto las cree internamente.

¬øPor qu√© esto es tan importante? Porque transforma la forma en que dise√±amos aplicaciones. Imagina tener que cambiar una implementaci√≥n en 50 clases diferentes porque no usabas DI... üòÖ Con Spring, solo cambias la configuraci√≥n en un lugar.

Spring ofrece tres formas principales de DI:
1. Inyecci√≥n por constructor (la m√°s recomendada): Las dependencias se pasan como par√°metros al constructor.
2. Inyecci√≥n por setter: Dependencias se asignan mediante m√©todos setter.
3. Inyecci√≥n por campo: Usando @Autowired directamente sobre campos (menos recomendado).

La DI no solo hace el c√≥digo m√°s limpio, sino que tambi√©n facilita las pruebas unitarias (puedes mockear dependencias f√°cilmente) y promueve el principio de inversi√≥n de dependencias (D de SOLID). Adem√°s, Spring maneja autom√°ticamente el alcance (scope) de las dependencias, como singleton o prototype.
''',
    'code_example': '''
// Ejemplo correcto: Inyecci√≥n por constructor (recomendado)
@RestController
public class UserController {
    private final UserService userService;
    
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }
}

// Ejemplo aceptable: Inyecci√≥n por setter
@RestController
public class UserController {
    private UserService userService;
    
    @Autowired
    public void setUserService(UserService userService) {
        this.userService = userService;
    }
}

// Ejemplo no recomendado: Inyecci√≥n directa en campo
@RestController
public class UserController {
    @Autowired  // Evitar esto en producci√≥n
    private UserService userService;
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Core',
    'subtopic': 'Anotaciones (@Component, @Service, @Repository)',
    'definition': '''
Spring utiliza anotaciones para identificar y clasificar los diferentes tipos de componentes en tu aplicaci√≥n. Las principales son @Component, @Service y @Repository, cada una con un prop√≥sito espec√≠fico pero con un funcionamiento similar bajo el cap√≥.

¬øNotas c√≥mo estas anotaciones parecen iguales pero tienen nombres diferentes? No es solo por capricho. Cada una comunica una intenci√≥n espec√≠fica sobre el rol que juega esa clase en tu aplicaci√≥n, lo que mejora la legibilidad y permite comportamientos especializados.

@Component es la anotaci√≥n gen√©rica para cualquier bean gestionado por Spring. @Service se usa espec√≠ficamente para clases que contienen l√≥gica de negocio. @Repository es para clases que acceden a datos (como DAOs), y tiene un beneficio adicional: Spring traduce autom√°ticamente las excepciones espec√≠ficas de persistencia en DataAccessException. 

Aunque t√©cnicamente podr√≠as usar solo @Component para todo, usar las anotaciones espec√≠ficas:
- Mejora la legibilidad del c√≥digo
- Permite que Spring aplique comportamientos especiales
- Facilita el uso de pointcuts en AOP
- Ayuda en la documentaci√≥n autom√°tica
''',
    'code_example': '''
// Ejemplo correcto usando las anotaciones adecuadas
@Repository  // Indica que esta clase accede a datos
public class UserRepositoryImpl implements UserRepository {
    // implementaci√≥n
}

@Service  // Indica l√≥gica de negocio
public class UserService {
    private final UserRepository userRepository;
    
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
}

@Component  // Componente gen√©rico
public class CustomComponent {
    // implementaci√≥n
}

// Ejemplo incorrecto: Uso inapropiado de anotaciones
@Service  // Incorrecto: Esto no es l√≥gica de negocio
public class UserDao {
    // implementaci√≥n de acceso a datos
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Core',
    'subtopic': 'Configuraci√≥n (XML vs Anotaciones vs Java Config)',
    'definition': '''
Spring ofrece tres enfoques principales para configurar tu aplicaci√≥n: XML, anotaciones y Java Config. Cada uno tiene sus ventajas y casos de uso ideales, y en aplicaciones modernas es com√∫n ver una mezcla de ellos.

¬øRecuerdas los primeros d√≠as de Spring cuando todo era XML? Afortunadamente, las cosas han evolucionado. Pero aunque las anotaciones y Java Config son m√°s modernas, el XML todav√≠a tiene su lugar en ciertos escenarios.

XML fue el primer m√©todo de configuraci√≥n en Spring. Es verboso pero expl√≠cito, y permite cambiar configuraciones sin recompilar. Las anotaciones (como @Component, @Autowired) hacen el c√≥digo m√°s conciso pero lo acoplan a Spring. Java Config (usando clases @Configuration) ofrece lo mejor de ambos: configuraci√≥n type-safe en c√≥digo Java sin acoplamiento directo en tus clases de negocio.

En aplicaciones modernas, la tendencia es:
- Usar Java Config para la configuraci√≥n principal
- Anotaciones para convenciones simples
- XML solo para configuraciones muy din√°micas o legacy
Spring Boot ha adoptado fuertemente este enfoque, usando Java Config internamente pero permitiendo sobreescritura con propiedades simples.
''',
    'code_example': '''
// Ejemplo Java Config (moderno)
@Configuration
public class AppConfig {
    @Bean
    public UserService userService(UserRepository userRepository) {
        return new UserServiceImpl(userRepository);
    }
}

<!-- Ejemplo XML (legacy pero a√∫n √∫til) -->
<beans>
    <bean id="userService" class="com.example.UserServiceImpl">
        <constructor-arg ref="userRepository"/>
    </bean>
</beans>

// Ejemplo con anotaciones (m√°s conciso)
@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Boot',
    'subtopic': 'Auto-configuraci√≥n',
    'definition': '''
Una de las caracter√≠sticas m√°s poderosas de Spring Boot es su capacidad de auto-configuraci√≥n. Bas√°ndose en las dependencias que tengas en tu classpath y en ciertas convenciones, Spring Boot puede configurar autom√°ticamente tu aplicaci√≥n con valores sensatos por defecto.

¬øTe imaginas tener que configurar manualmente cada integraci√≥n con bases de datos, servidores web o sistemas de mensajer√≠a? Spring Boot elimina esa carga, permiti√©ndote enfocarte en lo que realmente importa: tu l√≥gica de negocio.

La auto-configuraci√≥n funciona mediante condiciones (@Conditional). Por ejemplo, si tienve spring-boot-starter-data-jpa en tu classpath, Spring Boot:
1. Detecta que quieres usar JPA
2. Configura autom√°ticamente un DataSource
3. Configura Hibernate como proveedor JPA por defecto
4. Configura transacciones
Todo esto con valores sensatos, pero que puedes sobrescribir f√°cilmente. La magia est√° en el archivo spring.factories dentro de spring-boot-autoconfigure, donde se definen todas las configuraciones autom√°ticas posibles. Lo mejor es que si no necesitas algo, simplemente no lo incluyes en tus dependencias y Spring Boot no lo configurar√°.
''',
    'code_example': '''
// Ejemplo: C√≥mo sobrescribir una auto-configuraci√≥n
@Configuration
public class MyDataSourceConfig {
    @Bean
    @ConfigurationProperties(prefix="app.datasource")
    public DataSource dataSource() {
        return DataSourceBuilder.create().build();
    }
}

// application.properties para personalizar
app.datasource.url=jdbc:mysql://localhost:3306/mydb
app.datasource.username=myuser
app.datasource.password=mypass

// Ejemplo incorrecto: Deshabilitar toda auto-configuraci√≥n
@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})
public class MyApp {
    // Esto dejar√° tu aplicaci√≥n sin DataSource a menos que lo configures manualmente
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Boot',
    'subtopic': 'Spring Boot Starters',
    'definition': '''
Los Spring Boot Starters son una de las caracter√≠sticas m√°s apreciadas del ecosistema Spring Boot. Son dependencias que agrupan todo lo necesario para integrar una tecnolog√≠a espec√≠fica en tu aplicaci√≥n, simplificando enormemente la gesti√≥n de dependencias.

¬øAlguna vez has intentado configurar JPA manualmente y te has perdido en un mar de dependencias conflictivas? Los starters resuelven exactamente ese problema, proporcionando conjuntos de dependencias probadas y compatibles entre s√≠.

Cada starter (como spring-boot-starter-web o spring-boot-starter-data-jpa) incluye:
- Las dependencias principales
- Cualquier dependencia transitiva necesaria
- Configuraciones autom√°ticas adecuadas
- Versiones compatibles probadas

Por ejemplo, spring-boot-starter-web incluye todo lo necesario para construir una aplicaci√≥n web:
- Spring MVC
- Un servidor embebido (Tomcat por defecto)
- Jackson para JSON
- Validaci√≥n
- Y otras dependencias relacionadas

La convenci√≥n de nombres es simple: spring-boot-starter-{nombre}. Esto hace extremadamente f√°cil a√±adir funcionalidades a tu proyecto sin preocuparte por conflictos de versiones.
''',
    'code_example': '''
// Ejemplo de pom.xml usando starters
<dependencies>
    <!-- Starter para aplicaciones web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- Starter para JPA y bases de datos -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
</dependencies>

// Ejemplo incorrecto: Incluir dependencias manualmente junto con starters
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId> <!-- Redundante con starter-data-jpa -->
    <version>5.4.32.Final</version> <!-- Podr√≠a causar conflictos -->
</dependency>
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Boot',
    'subtopic': 'Configuraci√≥n de propiedades',
    'definition': '''
Spring Boot ofrece un sistema flexible y potente para gestionar la configuraci√≥n de tu aplicaci√≥n mediante propiedades. Estas propiedades pueden definirse en m√∫ltiples fuentes y se unifican en un √∫nico entorno de configuraci√≥n accesible desde cualquier parte de tu c√≥digo.

¬øAlguna vez has tenido que manejar docenas de archivos .properties para diferentes entornos? Spring Boot simplifica esto con un sistema jer√°rquico donde las propiedades pueden sobreescribirse seg√∫n el entorno, con valores predeterminados sensatos y una sintaxis consistente.

El orden de precedencia de las propiedades en Spring Boot es:
1. Propiedades espec√≠ficas de tests (@TestPropertySource)
2. Argumentos de l√≠nea de comandos (--server.port=8080)
3. Variables de entorno
4. application-{profile}.yml/.properties
5. application.yml/.properties (configuraci√≥n base)

Puedes acceder a estas propiedades usando:
- @Value para inyecci√≥n directa
- @ConfigurationProperties para agrupar propiedades relacionadas
- Environment API para acceso program√°tico

Adem√°s, Spring Boot soporta YAML (mejor para configuraciones jer√°rquicas) y propiedades tipo Relaxed Binding (server.port equivale a SERVER_PORT en variables de entorno).
''',
    'code_example': '''
// Ejemplo con @ConfigurationProperties
@ConfigurationProperties(prefix = "app.mail")
public class MailProperties {
    private String host;
    private int port;
    private String username;
    // getters y setters
}

// application.yml
app:
  mail:
    host: smtp.example.com
    port: 587
    username: admin@example.com

// Ejemplo con @Value
@Service
public class NotificationService {
    @Value("{app.notification.enabled}")
    private boolean enabled;
}

// Ejemplo incorrecto: Hardcodeo de valores
@Service
public class PaymentService {
    private String apiUrl = "https://prod.api.com"; // Deber√≠a ser configurable
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Boot',
    'subtopic': 'Spring Boot Actuator',
    'definition': '''
Spring Boot Actuator es tu ventana al interior de tu aplicaci√≥n en producci√≥n. Proporciona endpoints HTTP y JMX que te permiten monitorizar y gestionar tu aplicaci√≥n, exponiendo m√©tricas, informaci√≥n de salud y otras caracter√≠sticas operacionales.

¬øC√≥mo sabes si tu aplicaci√≥n est√° realmente sana en producci√≥n? No basta con que est√© en ejecuci√≥n. Actuator te da visibilidad real sobre el estado de tus conexiones a BD, espacio en disco, uso de memoria y mucho m√°s, todo a trav√©s de una API estandarizada.

Los endpoints principales de Actuator incluyen:
- /health: Estado de salud de la aplicaci√≥n (BD, discos, etc.)
- /metrics: M√©tricas de JVM, sistema y personalizadas
- /info: Informaci√≥n general de la aplicaci√≥n (versi√≥n, descripci√≥n)
- /env: Variables de entorno y propiedades de configuraci√≥n
- /loggers: Configuraci√≥n y niveles de logging

Para usar Actuator, solo necesitas a√±adir la dependencia spring-boot-starter-actuator. Puedes configurar qu√© endpoints exponer (HTTP/JMX), su visibilidad (solo admin o p√∫blicos) y hasta agregar endpoints personalizados. En entornos cloud, esta informaci√≥n se integra autom√°ticamente con plataformas como Kubernetes para tomar decisiones de escalado y recuperaci√≥n.
''',
    'code_example': '''
// Ejemplo: Configuraci√≥n b√°sica de Actuator
# application.properties
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.metrics.tags.application=myapp

// Ejemplo: Endpoint personalizado
@Component
@Endpoint(id = "features")
public class CustomActuatorEndpoint {
    @ReadOperation
    public Map<String, Boolean> features() {
        return Map.of("newCheckout", true, "legacyMode", false);
    }
}

// Ejemplo incorrecto: Exponer todos los endpoints en producci√≥n
# application-prod.properties
management.endpoints.web.exposure.include=*  // ¬°Peligroso!
management.endpoint.env.enabled=true  // Expone configuraciones sensibles
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Data',
    'subtopic': 'Repositorios JPA',
    'definition': '''
Spring Data JPA te permite trabajar con bases de datos de una forma mucho m√°s sencilla y elegante, sin tener que escribir SQL todo el tiempo. Usando interfaces y anotaciones, pod√©s tener operaciones CRUD (crear, leer, actualizar y eliminar) funcionando en minutos.

¬øPero entonces qu√© significa eso de "repositorio JPA"?

B√°sicamente, vos defin√≠s una interfaz que extiende `JpaRepository`, y autom√°ticamente Spring genera la implementaci√≥n por vos. No ten√©s que preocuparte por abrir conexiones, preparar sentencias SQL ni manejar el resultado manualmente. Solo defin√≠s tu entidad, el tipo de su clave primaria, y Spring se encarga del resto. Esto hace que trabajar con persistencia en Java sea mucho m√°s limpio y mantenible. 
  ''',
    'code_example': '''
// Una entidad simple
@Entity
public class Producto {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  private String nombre;
  private Double precio;
}

// Repositorio asociado
public interface ProductoRepository extends JpaRepository<Producto, Long> {
  // No necesitas escribir nada m√°s para tener m√©todos como save(), findAll(), findById(), deleteById()...
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Data',
    'subtopic': 'Consultas derivadas de m√©todos',
    'definition': '''
Una de las cosas m√°s potentes (y m√°gicas) de Spring Data es que puede generar consultas autom√°ticamente bas√°ndose en los nombres de los m√©todos. No necesitas escribir SQL ni JPQL para tareas comunes, solo crear m√©todos con nombres bien descriptivos.

¬øTe est√°s preguntando c√≥mo sabe Spring qu√© consulta hacer solo con el nombre del m√©todo?

Spring analiza el nombre del m√©todo, y si sigue una convenci√≥n como `findByNombre`, autom√°ticamente crea una consulta que busca por el campo `nombre`. Pod√©s encadenar condiciones (`findByNombreAndPrecio`), usar palabras clave como `Containing`, `Between`, `GreaterThan`, etc. Eso s√≠, hay que ser cuidadoso con los nombres largos y seguir bien las reglas.

Esta t√©cnica ahorra mucho tiempo y hace que tu c√≥digo sea m√°s legible, pero no es una soluci√≥n m√°gica para todo. Para consultas m√°s complejas, es mejor usar `@Query` o incluso Criteria API.
  ''',
    'code_example': '''
public interface ProductoRepository extends JpaRepository<Producto, Long> {

  // Buscar por nombre exacto
  List<Producto> findByNombre(String nombre);

  // Buscar productos con precio mayor a un valor
  List<Producto> findByPrecioGreaterThan(Double precio);

  // Buscar por nombre que contenga una palabra
  List<Producto> findByNombreContaining(String fragmento);

  // Esto es v√°lido, pero demasiado largo puede volverse ilegible:
  // List<Producto> findByNombreAndPrecioBetweenAndDisponibleTrueOrderByPrecioDesc(...);
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Data',
    'subtopic': '@Query personalizadas',
    'definition': '''
Aunque los m√©todos derivados son s√∫per √∫tiles, hay momentos en los que necesit√°s m√°s control sobre las consultas. Ah√≠ entra en juego la anotaci√≥n `@Query`. Con ella pod√©s escribir consultas JPQL o SQL directamente dentro de tu repositorio, de forma clara y precisa.

¬øNo te pasa que quer√©s algo m√°s complejo y los nombres de m√©todo ya no alcanzan?

Con `@Query` pod√©s hacer joins, subconsultas, filtros personalizados y todo lo que necesites. Adem√°s, pod√©s combinarlo con par√°metros y usar expresiones din√°micas. Tambi√©n hay soporte para consultas nativas (usando `nativeQuery = true`) si lo necesitas.

Eso s√≠, al usar `@Query` perd√©s un poco de la "magia" autom√°tica de Spring, pero gan√°s mucha m√°s flexibilidad.
  ''',
    'code_example': '''
public interface ProductoRepository extends JpaRepository<Producto, Long> {

  // Consulta con JPQL
  @Query("SELECT p FROM Producto p WHERE p.precio > :precioMinimo")
  List<Producto> buscarCaros(@Param("precioMinimo") Double precio);

  // Consulta nativa
  @Query(value = "SELECT * FROM producto WHERE nombre LIKE %:texto%", nativeQuery = true)
  List<Producto> buscarPorNombreLike(@Param("texto") String texto);
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 3,
    'title_level': 'Spring Framework',
    'topic': 'Spring Data',
    'subtopic': 'Auditor√≠a',
    'definition': '''
La auditor√≠a en aplicaciones es clave cuando necesit√°s rastrear "qui√©n hizo qu√© y cu√°ndo". En Spring Data, esto se puede hacer de forma autom√°tica usando anotaciones y configuraci√≥n m√≠nima.

¬øTe interesa saber qui√©n cre√≥ o actualiz√≥ un registro? Spring te cubre.

Spring Data ofrece soporte de auditor√≠a para capturar datos como fecha de creaci√≥n, fecha de √∫ltima modificaci√≥n, usuario que cre√≥ o modific√≥ un registro, etc. Solo ten√©s que usar anotaciones como `@CreatedDate`, `@LastModifiedDate`, `@CreatedBy` y `@LastModifiedBy`. Adem√°s, necesit√°s habilitar la auditor√≠a en tu configuraci√≥n y proporcionar un auditor-aware para capturar el usuario activo.

Esto es muy √∫til en aplicaciones donde hay varios usuarios y quer√©s llevar trazabilidad de todo.
  ''',
    'code_example': '''
@EntityListeners(AuditingEntityListener.class)
@Entity
public class Producto {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private String nombre;

  @CreatedDate
  private LocalDateTime fechaCreacion;

  @LastModifiedDate
  private LocalDateTime fechaModificacion;

  @CreatedBy
  private String creadoPor;

  @LastModifiedBy
  private String modificadoPor;
}

// En tu configuraci√≥n principal
@EnableJpaAuditing
public class ConfiguracionAuditoria {
  // Tambi√©n necesitas un AuditorAware para registrar el usuario actual
}
  ''',
  });
}

Future<void> insertSrLevel4Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Microservicios',
    'subtopic': 'Principios de microservicios',
    'definition': '''
Los microservicios son una forma de estructurar una aplicaci√≥n grande como un conjunto de servicios peque√±os, independientes y enfocados en una funcionalidad espec√≠fica. A diferencia del enfoque monol√≠tico, ac√° cada pieza puede evolucionar por separado.

¬øTe est√°s preguntando si vale la pena complicarse as√≠?

La idea es que al dividir una aplicaci√≥n en servicios peque√±os, pod√©s escalar, desplegar, mantener y hasta reescribir partes sin tocar el resto. Cada servicio puede estar desarrollado por un equipo distinto, en diferentes tecnolog√≠as incluso, y se comunican generalmente por HTTP o mensajer√≠a. Eso s√≠, no todo es color de rosas: se gana flexibilidad, pero se suma complejidad en infraestructura, monitoreo y comunicaci√≥n entre servicios. Por eso es importante aplicar principios como: responsabilidad √∫nica, independencia de despliegue, resiliencia y observabilidad desde el dise√±o.
  ''',
    'code_example': '''
// No hay c√≥digo directo, pero el principio ser√≠a dividir tu app en servicios:

// Servicio de Autenticaci√≥n -> maneja login y JWT
// Servicio de Productos -> maneja cat√°logo y stock
// Servicio de Pedidos -> maneja √≥rdenes y pagos

// Cada uno tiene su base de datos y API independiente.
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Microservicios',
    'subtopic': 'Spring Cloud',
    'definition': '''
Spring Cloud es una colecci√≥n de herramientas dise√±adas para hacer tu vida m√°s f√°cil cuando trabaj√°s con microservicios. Te ayuda a manejar cosas como configuraci√≥n centralizada, descubrimiento de servicios, tolerancia a fallos, rutas din√°micas y m√°s.

¬øNo te pasa que tener 5 microservicios ya te hace sentir que todo se va de las manos?

Con Spring Cloud, pod√©s tener un *config server* que centraliza las propiedades de todos tus servicios, usar Eureka para el descubrimiento autom√°tico de endpoints, habilitar reintentos autom√°ticos con Resilience4j, y definir rutas din√°micas con Spring Cloud Gateway. Lo mejor: todo se integra fluido con Spring Boot, as√≠ que la curva de aprendizaje es mucho m√°s amigable que armarlo todo desde cero.
  ''',
    'code_example': '''
// Ejemplo simple de Config Server

@SpringBootApplication
@EnableConfigServer
public class ConfigServerApplication {
  public static void main(String[] args) {
    SpringApplication.run(ConfigServerApplication.class, args);
  }
}

// application.properties
server.port=8888
spring.cloud.config.server.git.uri=https://github.com/tu-org/config-repo
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Microservicios',
    'subtopic': 'Service discovery (Eureka)',
    'definition': '''
Eureka es el componente de Spring Cloud que permite a los servicios encontrarse entre s√≠ sin necesidad de conocer direcciones IP o puertos de antemano. Act√∫a como una especie de "gu√≠a telef√≥nica" de servicios.

¬øTe imagin√°s tener que configurar manualmente las direcciones de cada microservicio cada vez?

Con Eureka, cada servicio se registra autom√°ticamente cuando arranca, y otros servicios pueden consultarlo para saber c√≥mo comunicarse. Esto permite balanceo de carga, alta disponibilidad y una arquitectura m√°s din√°mica. Spring Boot lo soporta de forma nativa con solo agregar unas dependencias y anotaciones.
  ''',
    'code_example': '''
// Servidor Eureka
@EnableEurekaServer
@SpringBootApplication
public class EurekaServer {
  public static void main(String[] args) {
    SpringApplication.run(EurekaServer.class, args);
  }
}

// Cliente Eureka
@EnableEurekaClient
@SpringBootApplication
public class ProductoService {
  public static void main(String[] args) {
    SpringApplication.run(ProductoService.class, args);
  }
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Microservicios',
    'subtopic': 'API Gateway (Spring Cloud Gateway)',
    'definition': '''
Un API Gateway es la puerta de entrada a tu sistema de microservicios. En vez de que el cliente se conecte directamente a cada servicio, lo hace a trav√©s del Gateway, que enruta las peticiones y agrega funcionalidades como seguridad, logging, rate limiting y m√°s.

¬øY por qu√© no dejar que el frontend hable con cada microservicio directamente?

Porque con el tiempo vas a necesitar m√°s control: autenticaci√≥n centralizada, transformar respuestas, manejar rutas din√°micas, etc. Spring Cloud Gateway es una soluci√≥n reactiva, liviana y f√°cil de configurar que hace todo esto y m√°s. Es el reemplazo moderno de Zuul, con soporte para programaci√≥n funcional y filtros personalizados.
  ''',
    'code_example': '''
// Ejemplo de configuraci√≥n en application.yml

spring:
  cloud:
    gateway:
      routes:
        - id: producto-service
          uri: lb://producto-service
          predicates:
            - Path=/productos/**
          filters:
            - AddRequestHeader=X-Request-Foo, Bar
      discovery:
        locator:
          enabled: true

// Esto enruta /productos/** al microservicio "producto-service" registrado en Eureka
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Seguridad',
    'subtopic': 'Spring Security',
    'definition': '''
Spring Security es el est√°ndar de facto para implementar seguridad en aplicaciones Spring. Proporciona autenticaci√≥n, autorizaci√≥n y protecci√≥n contra vulnerabilidades comunes de manera declarativa.

¬øSab√≠as que el 70% de las vulnerabilidades en aplicaciones web est√°n relacionadas con fallos de seguridad? Spring Security act√∫a como un filtro robusto que intercepta cada petici√≥n, verificando identidades y permisos antes de permitir el acceso a tus recursos.

Los componentes clave incluyen:
- SecurityFilterChain: Define el flujo de seguridad
- UserDetailsService: Carga informaci√≥n espec√≠fica del usuario
- PasswordEncoder: Para el hashing seguro de contrase√±as
- AuthenticationProvider: L√≥gica personalizada de autenticaci√≥n

Configurarlo correctamente implica:
1. Definir reglas de autorizaci√≥n por URL
2. Configurar el manejo de autenticaci√≥n
3. Establecer pol√≠ticas de sesi√≥n
4. Proteger contra CSRF y XSS
5. Configurar CORS adecuadamente

Spring Security sigue el principio de "secure by default", bloqueando todo acceso hasta que se configure expl√≠citamente. Su arquitectura modular permite adaptarlo desde simples autenticaciones en memoria hasta complejas integraciones con OAuth2 y proveedores de identidad empresariales.
''',
    'code_example': '''
// Configuraci√≥n b√°sica de seguridad
@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/public/**").permitAll()
                .requestMatchers("/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/login")
                .permitAll()
            )
            .logout(logout -> logout
                .permitAll()
            );
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

// Ejemplo incorrecto: Configuraci√≥n insegura
@Configuration
@EnableWebSecurity
public class InsecureConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.authorizeHttpRequests().anyRequest().permitAll(); // ¬°Peligro! Acceso total
        return http.build();
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Seguridad',
    'subtopic': 'Autenticaci√≥n (JWT, OAuth2)',
    'definition': '''
La autenticaci√≥n moderna en aplicaciones Spring va m√°s all√° del usuario/contrase√±a. JWT y OAuth2 son est√°ndares que permiten autenticaci√≥n stateless y federada, esencial para arquitecturas distribuidas y aplicaciones m√≥viles.

¬øPor qu√© JWT se ha vuelto tan popular? Porque resuelve el problema de escalabilidad en sistemas distribuidos. En lugar de almacenar sesiones en el servidor, toda la informaci√≥n necesaria viaja en un token firmado que el cliente presenta en cada petici√≥n.

Spring Security soporta:
- JWT (JSON Web Tokens): Tokens autocontenidos con firma digital
- OAuth2: Flujos de autorizaci√≥n est√°ndar (authorization_code, client_credentials, etc.)
- OpenID Connect: Autenticaci√≥n federada sobre OAuth2

Implementar JWT correctamente requiere:
1. Generar tokens firmados al login
2. Validar firmas en cada petici√≥n
3. Manejar renovaci√≥n de tokens expirados
4. Incluir s√≥lo informaci√≥n necesaria en claims

Para OAuth2, Spring Security 5+ provee integraci√≥n con:
- Proveedores como Google, Facebook, GitHub
- Servidores de autorizaci√≥n (Keycloak, Okta)
- Resource servers para proteger APIs
''',
    'code_example': '''
// Configuraci√≥n JWT con Spring Security
@Configuration
@EnableWebSecurity
public class JwtSecurityConfig {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/auth/login").permitAll()
                .anyRequest().authenticated()
            )
            .addFilterBefore(jwtFilter(), UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public JwtAuthenticationFilter jwtFilter() {
        return new JwtAuthenticationFilter();
    }
}

// Ejemplo de generaci√≥n JWT
public String generateToken(UserDetails userDetails) {
    Map<String, Object> claims = new HashMap<>();
    claims.put("roles", userDetails.getAuthorities());
    
    return Jwts.builder()
        .setClaims(claims)
        .setSubject(userDetails.getUsername())
        .setIssuedAt(new Date())
        .setExpiration(new Date(System.currentTimeMillis() + 3600000))
        .signWith(SignatureAlgorithm.HS256, secretKey)
        .compact();
}

// Ejemplo OAuth2 con Google
spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: your-client-id
            client-secret: your-client-secret
            scope: email, profile
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Seguridad',
    'subtopic': 'Autorizaci√≥n',
    'definition': '''
La autorizaci√≥n determina qu√© puede hacer un usuario autenticado en tu sistema. Spring Security ofrece m√∫ltiples enfoques para implementar controles de acceso granulares, desde simples roles hasta l√≥gicas complejas basadas en dominios.

¬øHas visto sistemas donde los usuarios pueden acceder a funcionalidades que no deber√≠an? Eso es un fallo de autorizaci√≥n. Spring Security proporciona tres enfoques principales:

1. Autorizaci√≥n basada en roles:
   - @PreAuthorize("hasRole('ADMIN')")
   - .hasAuthority("ROLE_ADMIN") en config

2. Autorizaci√≥n basada en expresiones:
   - @PreAuthorize("hasPermission(#id, 'read')")
   - SpEL para l√≥gica compleja

3. Autorizaci√≥n basada en dominios (ACL):
   - Acceso condicional a recursos espec√≠ficos
   - Implementado con @PostAuthorize y consultas

Los m√©todos recomendados son:
- Usar @PreAuthorize para controles preventivos
- @PostAuthorize para verificaciones posteriores
- Method Security para proteger servicios
- Anotaciones personalizadas para reglas complejas

Spring Security tambi√©n soporta:
- Autorizaci√≥n reactiva con WebFlux
- Integraci√≥n con Spring Data para filtrado seguro
- Patr√≥n RBAC (Role-Based Access Control)
''',
    'code_example': '''
// Ejemplo de autorizaci√≥n en m√©todos
@Service
public class OrderService {
    
    @PreAuthorize("hasRole('USER')")
    public Order createOrder(Order order) {
        // l√≥gica
    }
    
    @PreAuthorize("hasRole('ADMIN') or #userId == authentication.principal.id")
    public List<Order> getUserOrders(Long userId) {
        // l√≥gica
    }
    
    @PostAuthorize("returnObject.userId == authentication.principal.id")
    public Order getOrderDetails(Long orderId) {
        // l√≥gica
    }
}

// Configuraci√≥n global
@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class MethodSecurityConfig {
    // Habilitar anotaciones @PreAuthorize
}

// Ejemplo incorrecto: Verificaci√≥n manual insegura
@Service
public class InsecureService {
    public void deleteAccount(Long accountId) {
        // ¬°Sin verificaci√≥n de autorizaci√≥n!
        accountRepository.deleteById(accountId);
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Seguridad',
    'subtopic': 'CSRF y CORS',
    'definition': '''
CSRF (Cross-Site Request Forgery) y CORS (Cross-Origin Resource Sharing) son dos mecanismos de seguridad fundamentales para aplicaciones web modernas. Spring Security proporciona protecci√≥n autom√°tica contra estos vectores de ataque.

¬øSab√≠as que un ataque CSRF puede realizar acciones en nombre de un usuario sin su conocimiento? Y que una mala configuraci√≥n CORS puede exponer tu API a usos maliciosos desde dominios no autorizados. Spring Security maneja ambos escenarios elegantemente.

Protecci√≥n contra CSRF:
- Habilitada por defecto en Spring Security
- Usa tokens sincronizados (synchronizer tokens)
- Excluye autom√°ticamente m√©todos seguros (GET, HEAD, etc.)
- Integraci√≥n con Thymeleaf y formularios autom√°tica

Configuraci√≥n CORS:
- Controla qu√© dominios pueden acceder a tu API
- Define m√©todos HTTP permitidos
- Configura headers expuestos
- Maneja credenciales (cookies, auth)

En APIs REST stateless (con JWT), normalmente:
- Se deshabilita CSRF (pues JWT es inmune a CSRF)
- Se configura CORS cuidadosamente
- Se protegen endpoints sensibles con autenticaci√≥n
''',
    'code_example': '''
// Configuraci√≥n CSRF y CORS t√≠pica para API REST
@Configuration
@EnableWebSecurity
public class ApiSecurityConfig {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Deshabilitado para APIs con JWT
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // resto de configuraci√≥n
        return http.build();
    }
    
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(List.of("https://trusted.com"));
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}

// Ejemplo incorrecto: Configuraci√≥n CORS demasiado permisiva
@Bean
public CorsConfigurationSource insecureCorsConfig() {
    CorsConfiguration config = new CorsConfiguration();
    config.setAllowedOrigins(List.of("*")); // ¬°Permite cualquier origen!
    config.setAllowedMethods(List.of("*"));
    // ...
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Eventos y Mensajer√≠a',
    'subtopic': 'Spring Events',
    'definition': '''
Los eventos en Spring permiten implementar el patr√≥n Observer de forma nativa dentro del contexto de la aplicaci√≥n. Este mecanismo facilita la comunicaci√≥n entre componentes de manera desacoplada, donde los publicadores no necesitan conocer a los suscriptores.

¬øTe has encontrado con c√≥digo donde un servicio llama directamente a m√∫ltiples otros servicios para notificar cambios? Los eventos Spring resuelven este acoplamiento mediante un modelo de publicaci√≥n-suscripci√≥n gestionado por el ApplicationContext.

Caracter√≠sticas clave:
- El publicador usa ApplicationEventPublisher
- Los listeners implementan ApplicationListener o usan @EventListener
- Soporte para eventos s√≠ncronos y as√≠ncronos (@Async)
- Ordenaci√≥n de listeners con @Order
- Eventos personalizados extendiendo ApplicationEvent

Los casos de uso ideales incluyen:
- Notificaciones despu√©s de operaciones cr√≠ticas
- Actualizaciones de cach√©
- Logging y auditor√≠a
- Iniciar procesos secundarios
- Integraci√≥n con otros sistemas

Spring gestiona autom√°ticamente el ciclo de vida de los eventos y garantiza que los listeners reciban las instancias adecuadas, incluso en contextos complejos con herencia de aplicaciones.
''',
    'code_example': '''
// Definici√≥n de evento personalizado
public class OrderCreatedEvent extends ApplicationEvent {
    private final Order order;
    
    public OrderCreatedEvent(Object source, Order order) {
        super(source);
        this.order = order;
    }
    // getter
}

// Publicador de eventos
@Service
public class OrderService {
    private final ApplicationEventPublisher publisher;
    
    public OrderService(ApplicationEventPublisher publisher) {
        this.publisher = publisher;
    }
    
    public Order createOrder(OrderRequest request) {
        Order order = // l√≥gica de creaci√≥n
        publisher.publishEvent(new OrderCreatedEvent(this, order));
        return order;
    }
}

// Listener con anotaci√≥n (recomendado)
@Component
public class OrderEventListener {
    @EventListener
    @Async  // Para procesamiento as√≠ncrono
    public void handleOrderCreated(OrderCreatedEvent event) {
        // L√≥gica de manejo del evento
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Eventos y Mensajer√≠a',
    'subtopic': 'RabbitMQ',
    'definition': '''
RabbitMQ es un broker de mensajer√≠a que implementa el protocolo AMQP, permitiendo comunicaci√≥n as√≠ncrona y confiable entre servicios. Spring AMQP proporciona una excelente integraci√≥n con RabbitMQ, simplificando su uso en aplicaciones Spring.

¬øPor qu√© usar RabbitMQ cuando ya tienes Spring Events? Cuando necesitas:
- Comunicaci√≥n entre servicios distribuidos
- Garant√≠a de entrecia de mensajes
- Tolerancia a fallos
- Escalabilidad horizontal
- Balanceo de carga

Conceptos clave:
- Exchanges: Donde se publican los mensajes (direct, fanout, topic, headers)
- Queues: Donde se almacenan los mensajes
- Bindings: Relaciones entre exchanges y queues
- Routing keys: Criterio de enrutamiento

Spring AMQP abstrae estos conceptos con:
- RabbitTemplate: Para enviar mensajes
- @RabbitListener: Para consumir mensajes
- RabbitAdmin: Para configuraci√≥n declarativa
- MessageConverter: Para serializaci√≥n

Configuraci√≥n t√≠pica incluye:
- Definici√≥n de exchanges/queues
- Configuraci√≥n de reintentos
- Manejo de errores
- Confirmaciones de publicaci√≥n
''',
    'code_example': '''
// Configuraci√≥n b√°sica
@Configuration
public class RabbitConfig {
    public static final String QUEUE = "order.queue";
    public static final String EXCHANGE = "order.exchange";
    public static final String ROUTING_KEY = "order.created";
    
    @Bean
    public Queue queue() {
        return new Queue(QUEUE, true); // durable
    }
    
    @Bean
    public TopicExchange exchange() {
        return new TopicExchange(EXCHANGE);
    }
    
    @Bean
    public Binding binding(Queue queue, TopicExchange exchange) {
        return BindingBuilder.bind(queue).to(exchange).with(ROUTING_KEY);
    }
}

// Env√≠o de mensajes
@Service
public class OrderNotifier {
    private final RabbitTemplate rabbitTemplate;
    
    public void sendOrderCreated(Order order) {
        rabbitTemplate.convertAndSend(
            RabbitConfig.EXCHANGE, 
            RabbitConfig.ROUTING_KEY, 
            order
        );
    }
}

// Consumidor
@Component
public class OrderCreatedListener {
    @RabbitListener(queues = RabbitConfig.QUEUE)
    public void processOrder(Order order) {
        // Procesar orden
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Eventos y Mensajer√≠a',
    'subtopic': 'Kafka',
    'definition': '''
Apache Kafka es una plataforma distribuida de streaming que maneja grandes vol√∫menes de datos con baja latencia. Spring for Apache Kafka proporciona una integraci√≥n s√≥lida para aplicaciones Spring, ideal para arquitecturas basadas en eventos.

¬øCu√°ndo elegir Kafka sobre RabbitMQ? Cuando necesites:
- Alto throughput (cientos de miles de mensajes/segundo)
- Retenci√≥n de mensajes a largo plazo
- Procesamiento de streams en tiempo real
- Reprocesamiento de mensajes
- Escalabilidad extrema

Conceptos clave:
- Topics: Categor√≠as/feeds de mensajes
- Partitions: Paralelismo y escalabilidad
- Brokers: Nodos del cluster Kafka
- Producers: Publicadores de mensajes
- Consumers: Suscriptores a topics

Spring Kafka ofrece:
- KafkaTemplate: Para enviar mensajes
- @KafkaListener: Para consumir mensajes
- ListenerContainerFactory: Para configuraci√≥n
- JsonSerializer/Deserializer: Para objetos JSON

Patrones comunes:
- Event Sourcing
- CQRS
- Change Data Capture
- Log aggregation
''',
    'code_example': '''
// Configuraci√≥n del producer
@Configuration
public class KafkaProducerConfig {
    @Bean
    public ProducerFactory<String, Order> producerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(config);
    }
    
    @Bean
    public KafkaTemplate<String, Order> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}

// Configuraci√≥n del consumer
@Configuration
public class KafkaConsumerConfig {
    @Bean
    public ConsumerFactory<String, Order> consumerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(ConsumerConfig.GROUP_ID_CONFIG, "order-group");
        // m√°s configuraciones
        return new DefaultKafkaConsumerFactory<>(
            config,
            new StringDeserializer(),
            new JsonDeserializer<>(Order.class)
        );
    }
}

// Env√≠o de mensajes
@Service
public class OrderEventPublisher {
    private final KafkaTemplate<String, Order> kafkaTemplate;
    
    public void publishOrderCreated(String topic, Order order) {
        kafkaTemplate.send(topic, order.getId(), order);
    }
}

// Consumidor
@Component
public class OrderEventListener {
    @KafkaListener(topics = "orders", groupId = "order-group")
    public void handleOrder(Order order) {
        // Procesar orden
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 4,
    'title_level': 'Arquitectura Avanzada',
    'topic': 'Eventos y Mensajer√≠a',
    'subtopic': 'Patr√≥n Event Sourcing',
    'definition': '''
Event Sourcing es un patr√≥n arquitect√≥nico que almacena el estado de una aplicaci√≥n como una secuencia de eventos. En lugar de guardar el estado actual, se guardan todos los eventos que llevaron a ese estado, permitiendo reconstruir el estado en cualquier momento.

¬øPor qu√© considerar Event Sourcing? Porque proporciona:
- Historial completo de cambios (auditor√≠a natural)
- Capacidad de viaje en el tiempo (reconstruir estado pasado)
- Resoluci√≥n de conflictos (basado en eventos)
- Flexibilidad para cambiar modelos de lectura

Componentes clave:
- Event Store: Base de datos de eventos (Kafka, EventStoreDB)
- Aggregates: Entidades que procesan comandos y producen eventos
- Projections: Vistas derivadas del stream de eventos
- Command Handlers: Procesan comandos y generan eventos

Spring facilita la implementaci√≥n con:
- Spring Data EventSourcing
- Integraci√≥n con Kafka para event store
- Proyecciones con Spring Projections
- Serializaci√≥n con Jackson

Consideraciones importantes:
- Dise√±o cuidadoso de eventos (inmutables, sem√°nticos)
- Estrategias para snapshots (optimizaci√≥n)
- Separaci√≥n de modelos de comando y consulta (CQRS)
- Manejo de concurrencia (versionado)
''',
    'code_example': '''
// Definici√≥n de evento base
public abstract class DomainEvent {
    private final String aggregateId;
    private final Instant occurredOn;
    
    // constructor, getters
}

// Evento espec√≠fico
public class OrderCreatedEvent extends DomainEvent {
    private final String customerId;
    private final BigDecimal amount;
    // constructor, getters
}

// Aggregate root
public class OrderAggregate {
    private String id;
    private String customerId;
    private BigDecimal amount;
    private OrderStatus status;
    private Long version;
    
    public List<DomainEvent> process(CreateOrderCommand command) {
        // Validaciones
        return List.of(
            new OrderCreatedEvent(
                command.getOrderId(),
                command.getCustomerId(),
                command.getAmount()
            )
        );
    }
    
    public void apply(OrderCreatedEvent event) {
        this.id = event.getAggregateId();
        this.customerId = event.getCustomerId();
        this.amount = event.getAmount();
        this.status = OrderStatus.CREATED;
    }
}

// Repositorio de eventos
public interface EventStore {
    void save(String aggregateId, List<DomainEvent> events);
    List<DomainEvent> getEvents(String aggregateId);
}

// Proyecci√≥n
@Component
public class OrderProjection {
    @EventHandler
    public void on(OrderCreatedEvent event) {
        // Actualizar vista de lectura
    }
}
'''
  });
}

Future<void> insertSrLevel5Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'CI/CD',
    'subtopic': 'GitHub Actions para Java',
    'definition': '''
GitHub Actions es una herramienta de automatizaci√≥n que te permite ejecutar tareas como compilar, testear y desplegar tu aplicaci√≥n directamente desde tu repositorio. Todo sucede en el mismo flujo donde ya viv√≠s: GitHub.

¬øTe gustar√≠a que con solo hacer un push se compile tu app y se corran los tests autom√°ticamente?

Eso es exactamente lo que GitHub Actions te permite hacer. Us√°s un archivo YAML para definir los pasos del flujo (workflow), que se ejecuta ante eventos como push, pull request o publicaci√≥n de una release. Pod√©s compilar con Maven o Gradle, ejecutar tests JUnit, generar artefactos e incluso subirlos a Docker Hub o a un servidor. Es s√∫per flexible, gratis para proyectos p√∫blicos y f√°cil de empezar.
  ''',
    'code_example': '''
// .github/workflows/build.yml

name: Java CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'CI/CD',
    'subtopic': 'Jenkins pipelines',
    'definition': '''
Jenkins es una de las herramientas m√°s conocidas en el mundo DevOps. Con Jenkins pod√©s automatizar desde la compilaci√≥n y pruebas hasta despliegues en producci√≥n, todo con pipelines configurables.

¬øNo ser√≠a ideal que todo el ciclo de vida de tu app est√© automatizado?

Jenkins permite crear "pipelines" definidos como c√≥digo, donde cada etapa representa un paso del proceso: checkout del c√≥digo, build, test, an√°lisis, despliegue, etc. Pod√©s usar la interfaz gr√°fica o definir el pipeline como c√≥digo con Groovy. Aunque requiere algo m√°s de setup inicial (instalaci√≥n, configuraci√≥n de plugins), es muy potente y ampliamente usado en la industria.
  ''',
    'code_example': '''
// Jenkinsfile b√°sico para una app Java con Maven

pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        git 'https://github.com/usuario/proyecto-java.git'
      }
    }

    stage('Build') {
      steps {
        sh 'mvn clean package'
      }
    }

    stage('Test') {
      steps {
        sh 'mvn test'
      }
    }
  }
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'CI/CD',
    'subtopic': 'SonarQube para an√°lisis est√°tico',
    'definition': '''
SonarQube es una herramienta que analiza tu c√≥digo fuente en busca de errores, vulnerabilidades, c√≥digo duplicado y otros posibles problemas que pueden afectar la calidad o mantenibilidad de tu aplicaci√≥n.

¬øTe pas√≥ alguna vez ver c√≥digo viejo y pensar ‚Äú¬øqui√©n escribi√≥ esto?‚Äù... y fuiste vos mismo?

Con SonarQube pod√©s evitar ese tipo de situaciones. Integrado en tu pipeline de CI, escanea autom√°ticamente tu base de c√≥digo y te da un informe visual con m√©tricas, recomendaciones y niveles de severidad. Funciona con Java y muchos otros lenguajes, y se puede usar tanto en un servidor propio como desde la nube. Tambi√©n se integra con GitHub para mostrar advertencias directamente en los pull requests.
  ''',
    'code_example': '''
// En tu pipeline Jenkinsfile pod√©s integrarlo as√≠:

stage('SonarQube Analysis') {
  steps {
    withSonarQubeEnv('SonarQube') {
      sh 'mvn sonar:sonar'
    }
  }
}

// En pom.xml debes agregar el plugin de sonar
<plugin>
  <groupId>org.sonarsource.scanner.maven</groupId>
  <artifactId>sonar-maven-plugin</artifactId>
  <version>3.9.1.2184</version>
</plugin>
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'CI/CD',
    'subtopic': 'Dockerizaci√≥n de aplicaciones Java',
    'definition': '''
Docker permite empacar tu aplicaci√≥n Java con todo lo que necesita para ejecutarse, en un contenedor que pod√©s correr en cualquier lugar: tu m√°quina, un servidor, o la nube. Es una de las herramientas m√°s potentes en DevOps moderno.

¬øTe gustar√≠a que tu app funcione igual en todas partes, sin "pero en mi m√°quina s√≠ anda"?

Con Docker cre√°s una imagen que incluye tu app, el JDK, las dependencias, configuraci√≥n... todo. Luego pod√©s correrla como contenedor en local o en producci√≥n. En Java es muy com√∫n crear una imagen desde un archivo `.jar` y exponer un puerto para que otros servicios (o el navegador) se puedan conectar.
  ''',
    'code_example': '''
// Dockerfile para una app Java con Spring Boot

FROM openjdk:17-jdk-slim
VOLUME /tmp
COPY target/miapp.jar app.jar
ENTRYPOINT ["java","-jar","/app.jar"]

// Para construir y correr:
 docker build -t miapp .
 docker run -p 8080:8080 miapp
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'Cloud',
    'subtopic': 'Despliegue en AWS (Elastic Beanstalk, ECS)',
    'definition': '''
Amazon Web Services (AWS) ofrece muchas formas de desplegar aplicaciones Java, pero dos de las m√°s populares son Elastic Beanstalk y ECS. Ambas eliminan gran parte del trabajo de infraestructura y permiten centrarse en el c√≥digo.

¬øY cu√°l es la diferencia entre ambas?

Elastic Beanstalk es ideal si quer√©s subir tu app (por ejemplo, un `.jar` o `.war`) y dejar que AWS se encargue de todo: balanceadores, instancias EC2, escalado, monitoreo, etc. Es una soluci√≥n PaaS muy c√≥moda para empezar. Por otro lado, ECS (Elastic Container Service) est√° m√°s orientado a contenedores: sub√≠s una imagen Docker y defin√≠s c√≥mo quer√©s que se ejecute. Es m√°s flexible y potente, pero tambi√©n m√°s complejo.

Ambas opciones se integran bien con CI/CD, y son compatibles con apps Spring Boot, JPA, Hibernate y dem√°s.
  ''',
    'code_example': '''
// Para Elastic Beanstalk:
 mvn package
// Luego sub√≠s el .jar desde la consola de AWS o con EB CLI:
 eb init
 eb create mi-app-java-env
 eb deploy

// Para ECS necesit√°s una imagen Docker y definir una tarea y servicio:
 docker build -t miapp .
 aws ecr create-repository --repository-name miapp
 docker tag miapp:latest <repo-uri>
 docker push <repo-uri>
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'Cloud',
    'subtopic': 'Azure App Service',
    'definition': '''
Azure App Service es la plataforma de Microsoft para desplegar aplicaciones web sin tener que gestionar servidores. Es compatible con Java y permite correr apps Spring Boot, Jakarta EE o incluso contenedores.

¬øQuer√©s hacer deploy sin preocuparte por servidores, firewalls ni escalado?

App Service te permite eso. Solo sub√≠s tu `.jar`, `.war` o imagen Docker, y Azure se encarga del resto. Pod√©s configurar la app desde el portal, usar GitHub Actions para automatizar el despliegue, y escalar horizontalmente sin modificar tu c√≥digo. Adem√°s, tiene integraci√≥n directa con otras herramientas como Azure DevOps, Application Insights y Key Vault.
  ''',
    'code_example': '''
// Para subir desde GitHub Actions:
- name: 'Deploy to Azure Web App'
  uses: azure/webapps-deploy@v2
  with:
    app-name: 'miapp-java'
    publish-profile: {{ secrets.AZURE_PUBLISH_PROFILE }}
    package: 'target/miapp.jar'

// Tambi√©n pod√©s usar Maven plugin:
 mvn azure-webapp:deploy
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'Cloud',
    'subtopic': 'Google App Engine',
    'definition': '''
Google App Engine (GAE) es la plataforma PaaS de Google Cloud que te permite desplegar aplicaciones Java sin preocuparte por servidores, escalado o balanceadores. Solo sub√≠s tu app y Google la hace correr.

¬øQuer√©s que tu app escale autom√°ticamente seg√∫n la demanda sin tocar nada?

GAE lo hace. Pod√©s usarlo en modo "est√°ndar", que corre tu app en un sandbox altamente optimizado (ideal para apps Spring Boot livianas), o en modo "flexible", que usa contenedores para mayor compatibilidad. Se integra bien con Maven, Gradle y otros sistemas de CI/CD. Adem√°s, incluye cosas como logs centralizados, m√©tricas autom√°ticas y versiones paralelas para despliegues seguros.
  ''',
    'code_example': '''
// Estructura t√≠pica de app.yaml
runtime: java17
instance_class: F1
entrypoint: java -jar target/miapp.jar

// Para desplegar:
 gcloud app deploy
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 5,
    'title_level': 'DevOps para Java',
    'topic': 'Cloud',
    'subtopic': 'Serverless (AWS Lambda)',
    'definition': '''
AWS Lambda es una plataforma serverless: vos escrib√≠s una funci√≥n, y AWS se encarga de ejecutarla cuando se necesita, sin que tengas que pensar en servidores. En Java, pod√©s escribir funciones como clases que se ejecutan ante ciertos eventos (como una petici√≥n HTTP o una entrada en S3).

¬øY para qu√© querr√≠as hacer esto en vez de correr un servidor completo?

Porque en muchos casos no necesit√°s una aplicaci√≥n entera corriendo todo el d√≠a. Con Lambda, tu funci√≥n se activa cuando alguien la necesita, se ejecuta, y despu√©s "desaparece", lo que ahorra costos y escala muy bien. El desaf√≠o est√° en optimizar el tiempo de arranque de la JVM y manejar bien la serializaci√≥n de datos. Ideal para microservicios ultra livianos o tareas automatizadas.
  ''',
    'code_example': '''
public class MiFuncionHandler implements RequestHandler<Map<String, Object>, String> {
  @Override
  public String handleRequest(Map<String, Object> input, Context context) {
    return "Hola desde AWS Lambda en Java!";
  }
}

// Para empaquetar:
 mvn package

// Para desplegar:
 aws lambda create-function 
  --function-name miFuncionJava 
  --runtime java17 
  --handler com.miempresa.MiFuncionHandler 
  --memory-size 512 
  --timeout 10 
  --zip-file fileb://target/miapp.zip 
  --role arn:aws:iam::tu-cuenta:role/lambda-role
  ''',
  });
}

Future<void> insertSrLevel6Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java Reactive',
    'subtopic': '¬øQu√© es la programaci√≥n reactiva?',
    'definition': '''
La programaci√≥n reactiva es un enfoque para manejar flujos de datos asincr√≥nicos y sistemas orientados a eventos. En lugar de escribir c√≥digo que espera respuestas (bloqueante), se trabaja con flujos de datos que reaccionan a los cambios y eventos en tiempo real.

¬øTe preguntas por qu√© esto es relevante?

En aplicaciones modernas, especialmente aquellas que manejan m√∫ltiples usuarios o grandes vol√∫menes de datos, la programaci√≥n tradicional puede volverse ineficiente. La programaci√≥n reactiva permite construir sistemas m√°s eficientes y escalables al manejar operaciones de manera no bloqueante y asincr√≥nica.

Los principios clave de la programaci√≥n reactiva incluyen:

- **Responsividad**: el sistema responde de manera oportuna.
- **Resiliencia**: el sistema permanece receptivo incluso en caso de fallos.
- **Elasticidad**: el sistema se adapta a la carga variable.
- **Orientaci√≥n a mensajes**: la comunicaci√≥n se basa en el intercambio de mensajes asincr√≥nicos.

Estos principios ayudan a construir sistemas robustos y escalables, ideales para aplicaciones modernas y distribuidas.
  ''',
    'code_example': '''
// Ejemplo b√°sico de flujo reactivo con RxJava

Observable<String> flujo = Observable.just("Hola", "Mundo");

flujo.subscribe(
  item -> System.out.println("Recibido: " + item),
  error -> System.err.println("Error: " + error),
  () -> System.out.println("Secuencia completada")
);
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java Reactive',
    'subtopic': 'RxJava',
    'definition': '''
RxJava es una biblioteca para componer programas asincr√≥nicos y basados en eventos utilizando secuencias observables. Permite manejar flujos de datos de manera declarativa y funcional.

¬øTe has enfrentado a la complejidad de manejar m√∫ltiples hilos y callbacks?

RxJava simplifica este proceso al proporcionar una API basada en observables que permite componer operaciones asincr√≥nicas de manera m√°s legible y mantenible. Ofrece operadores para transformar, combinar y filtrar flujos de datos, facilitando la construcci√≥n de aplicaciones reactivas.

RxJava es especialmente √∫til en aplicaciones Android y sistemas donde la gesti√≥n eficiente de recursos y la capacidad de respuesta son cruciales.
  ''',
    'code_example': '''
// Ejemplo de RxJava con operadores

Observable<Integer> numeros = Observable.range(1, 5);

numeros
  .map(n -> n * n)
  .filter(n -> n % 2 == 0)
  .subscribe(
    item -> System.out.println("Recibido: " + item),
    error -> System.err.println("Error: " + error),
    () -> System.out.println("Secuencia completada")
  );
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java Reactive',
    'subtopic': 'Project Reactor',
    'definition': '''
Project Reactor es una biblioteca para programaci√≥n reactiva en Java, desarrollada por el equipo de Spring. Proporciona dos tipos principales: `Mono` (para 0 o 1 elemento) y `Flux` (para 0 o N elementos), y est√° basada en la especificaci√≥n Reactive Streams.

¬øTe preguntas c√≥mo manejar flujos de datos de manera eficiente y no bloqueante?

Project Reactor permite construir aplicaciones que manejan flujos de datos asincr√≥nicos de manera eficiente, con soporte para backpressure y una API fluida y funcional. Es la base de Spring WebFlux y se integra perfectamente con el ecosistema de Spring.

Con Project Reactor, puedes crear pipelines de procesamiento de datos que reaccionan a eventos y cambios, facilitando la construcci√≥n de aplicaciones reactivas y escalables.
  ''',
    'code_example': '''
// Ejemplo b√°sico con Project Reactor

Flux<String> flujo = Flux.just("A", "B", "C");

flujo
  .map(String::toLowerCase)
  .subscribe(
    item -> System.out.println("Recibido: " + item),
    error -> System.err.println("Error: " + error),
    () -> System.out.println("Secuencia completada")
  );
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java Reactive',
    'subtopic': 'Spring WebFlux',
    'definition': '''
Spring WebFlux es el m√≥dulo reactivo de Spring para construir aplicaciones web no bloqueantes. Utiliza Project Reactor como motor subyacente y permite desarrollar APIs reactivas y escalables.

¬øTe gustar√≠a construir aplicaciones web que manejen miles de solicitudes concurrentes sin bloquear hilos?

Con Spring WebFlux, puedes crear controladores que devuelven `Mono` o `Flux`, lo que permite manejar solicitudes de manera asincr√≥nica y eficiente. Es ideal para microservicios y aplicaciones que requieren alta concurrencia y baja latencia.

Spring WebFlux se integra con otras partes del ecosistema Spring, como Spring Security y Spring Data, proporcionando una soluci√≥n completa para aplicaciones reactivas.
  ''',
    'code_example': '''
// Controlador reactivo con Spring WebFlux

@RestController
public class UsuarioControlador {

  @GetMapping("/usuarios")
  public Flux<Usuario> obtenerUsuarios() {
    return servicioUsuario.obtenerTodos();
  }
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java Reactive',
    'subtopic': 'R2DBC (Reactive Relational Database Connectivity)',
    'definition': '''
R2DBC es una especificaci√≥n para acceder a bases de datos relacionales de manera reactiva y no bloqueante. A diferencia de JDBC, que es bloqueante, R2DBC permite integrar bases de datos SQL en aplicaciones reactivas.

¬øTe has encontrado con cuellos de botella al acceder a la base de datos en aplicaciones reactivas?

Con R2DBC, puedes realizar operaciones de base de datos de manera asincr√≥nica, manteniendo la naturaleza no bloqueante de tu aplicaci√≥n. Se integra con Spring Data R2DBC y es compatible con bases de datos como PostgreSQL y MySQL.

Esto permite construir aplicaciones completamente reactivas, desde la capa web hasta la base de datos.
  ''',
    'code_example': '''
// Repositorio reactivo con Spring Data R2DBC

public interface UsuarioRepositorio extends ReactiveCrudRepository<Usuario, Long> {
  Flux<Usuario> findByNombre(String nombre);
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Native Image',
    'subtopic': 'GraalVM',
    'definition': '''
GraalVM es una m√°quina virtual universal de alto rendimiento que extiende la JVM de Java. Su objetivo principal es hacer que las aplicaciones corran m√°s r√°pido y consuman menos recursos, pero no solo para Java, ¬°tambi√©n puede ejecutar JavaScript, Python, Ruby, R, y m√°s! Es como la navaja suiza de las m√°quinas virtuales, optimizando el rendimiento de tus programas a un nivel que otras VMs solo pueden so√±ar[cite: 19].

¬øTe est√°s preguntando por qu√© esto importa? Pensemos por un momento en esos momentos en los que necesitas que una aplicaci√≥n Java arranque al instante o que ocupe muy poca memoria. Tradicionalmente, Java, aunque robusto, tiene una "carga inicial" (startup time) y un consumo de memoria m√°s altos en comparaci√≥n con lenguajes como C++ o Go. Ah√≠ es donde GraalVM entra en juego, ofreciendo una soluci√≥n elegante a estos desaf√≠os.

GraalVM mejora el rendimiento de varias maneras. Una de las m√°s destacadas es la "compilaci√≥n AOT" (Ahead-Of-Time), que permite compilar el c√≥digo Java directamente a un ejecutable nativo antes de que la aplicaci√≥n se ejecute. Esto significa que no necesitas una JVM para correr tu aplicaci√≥n; ya es un archivo ejecutable por s√≠ mismo, como cualquier programa de Windows o Linux. Esto reduce dr√°sticamente el tiempo de inicio y el consumo de memoria, lo cual es ideal para microservicios, funciones serverless o aplicaciones de l√≠nea de comandos. Adem√°s, GraalVM tambi√©n incluye un compilador JIT (Just-In-Time) de pr√≥xima generaci√≥n que puede optimizar el c√≥digo en tiempo de ejecuci√≥n de una manera m√°s avanzada que la JVM tradicional. Es como tener lo mejor de ambos mundos: la velocidad de la compilaci√≥n nativa y la flexibilidad de la JVM[cite: 19].
''',
    'code_example': '''
// Ejemplo b√°sico de c√≥mo GraalVM puede compilar una aplicaci√≥n Java a un ejecutable nativo
// Primero, aseg√∫rate de tener GraalVM instalado y configurado.
// Compila tu aplicaci√≥n Java normalmente:
// javac MiAplicacion.java

// Luego, usa el comando 'native-image' de GraalVM para crear el ejecutable nativo:
// native-image -jar MiAplicacion.jar

// Despu√©s de esto, tendr√°s un archivo ejecutable (por ejemplo, MiAplicacion.exe en Windows, o MiAplicacion en Linux)
// que puedes ejecutar directamente sin necesidad de una JVM instalada.

// MiAplicacion.java
public class MiAplicacion {
    public static void main(String[] args) {
        System.out.println("¬°Hola desde un ejecutable nativo de GraalVM!");
    }
}
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Native Image',
    'subtopic': 'Compilaci√≥n nativa con Spring Native',
    'definition': '''
La compilaci√≥n nativa con Spring Native es una extensi√≥n del framework Spring que te permite tomar tus aplicaciones Spring Boot y compilarlas en ejecutables nativos usando GraalVM. ¬°Es una combinaci√≥n explosiva! Piensa en toda la potencia de Spring Boot, con su auto-configuraci√≥n y su ecosistema robusto, ahora con el beneficio adicional de arranques ultrarr√°pidos y un consumo de memoria m√≠nimo, caracter√≠sticas intr√≠nsecas de los ejecutables nativos[cite: 19].

¬øPero entonces qu√© significa eso para tu d√≠a a d√≠a como desarrollador? Significa que puedes seguir desarrollando tus aplicaciones Spring Boot de la manera que ya conoces y amas, pero con un "superpoder" adicional para la producci√≥n. Las aplicaciones Spring tradicionalmente pueden tardar unos segundos en arrancar, lo cual no es un problema para servicios de larga duraci√≥n, pero en entornos de microservicios o serverless, donde la agilidad es clave, cada segundo cuenta. Spring Native, al aprovechar GraalVM, reduce ese tiempo de arranque a milisegundos, lo que permite escalar m√°s r√°pidamente y optimizar el uso de recursos[cite: 19].

Bajo el cap√≥, Spring Native hace un trabajo inteligente para que la compilaci√≥n nativa sea posible y eficiente para las aplicaciones Spring. Spring es conocido por su uso extensivo de reflexi√≥n, proxies y generaci√≥n din√°mica de clases, caracter√≠sticas que pueden ser un desaf√≠o para la compilaci√≥n AOT. Spring Native se encarga de analizar tu aplicaci√≥n durante la compilaci√≥n para entender qu√© partes del c√≥digo necesitan ser incluidas en el ejecutable nativo y para configurar GraalVM correctamente. Esto incluye optimizaciones para los beans de Spring, las configuraciones, y todas esas convenciones que hacen a Spring tan productivo. Es un proceso que automatiza gran parte de la complejidad de hacer que una aplicaci√≥n Java, con todas las caracter√≠sticas de Spring, se comporte como un ejecutable nativo de alto rendimiento[cite: 19].
''',
    'code_example': '''
// Para usar Spring Native, t√≠picamente agregar√≠as la dependencia a tu proyecto Spring Boot
// y luego usar√≠as el plugin de Maven o Gradle para compilar la imagen nativa.

// En un pom.xml (Maven):
/*
<dependency>
    <groupId>org.springframework.experimental</groupId>
    <artifactId>spring-native</artifactId>
    <version>0.11.x</version> // Aseg√∫rate de usar la versi√≥n compatible con tu Spring Boot
</dependency>

<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <configuration>
        <image>
            <builder>paketobuildpacks/builder-jammy-base:latest</builder>
        </option>
    </configuration>
</plugin>
*/

// Ejemplo de una clase simple de Spring Boot
// MiAplicacionSpring.java
package com.ejemplo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class MiAplicacionSpring {

    public static void main(String[] args) {
        SpringApplication.run(MiAplicacionSpring.class, args);
    }

    @GetMapping("/")
    public String home() {
        return "¬°Hola desde Spring Boot compilado nativamente!";
    }
}

// Para compilar a imagen nativa, usar√≠as:
// mvn spring-boot:build-image
// Esto generar√≠a una imagen Docker con tu aplicaci√≥n compilada nativamente.
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Native Image',
    'subtopic': 'Ventajas y limitaciones',
    'definition': '''
Cuando hablamos de las "Native Images" en Java, estamos tocando un tema fascinante que trae consigo una serie de ventajas impresionantes, pero como casi todo en tecnolog√≠a, tambi√©n tiene sus bemoles. Vamos a desglosarlo para entender bien d√≥nde brilla y d√≥nde debemos ser un poco m√°s cautelosos.

**Ventajas:**

* **Arranque Rapid√≠simo:** ¬°Esta es la estrella del show! Las aplicaciones compiladas nativamente inician en milisegundos. ¬øPor qu√© es esto genial? Imagina microservicios que escalan en segundos o funciones serverless que se ejecutan al instante. Esto es un cambio de juego para la computaci√≥n en la nube, donde el tiempo de arranque puede afectar los costos y la reactividad[cite: 19].
* **Menor Consumo de Memoria:** Al no necesitar una JVM completa en tiempo de ejecuci√≥n, las aplicaciones nativas usan significativamente menos memoria. Esto es crucial para reducir los costos de infraestructura en la nube y para entornos con recursos limitados[cite: 19].
* **Distribuci√≥n Simplificada:** Empaquetas tu aplicaci√≥n en un solo ejecutable binario. ¬°Se acab√≥ el "problema de la JVM"! No necesitas asegurarte de que el entorno de destino tenga la versi√≥n correcta de Java instalada; simplemente copias y ejecutas el archivo[cite: 19].
* **Seguridad Mejorada:** Al eliminar la necesidad de la JVM y algunas de sus dependencias din√°micas, la superficie de ataque potencial de tu aplicaci√≥n puede reducirse.

**Limitaciones:**

* **Tiempo de Compilaci√≥n M√°s Largo:** El proceso de compilar una imagen nativa puede ser considerablemente m√°s lento que la compilaci√≥n est√°ndar de Java. Esto se debe a que GraalVM realiza un an√°lisis exhaustivo de todo el c√≥digo de la aplicaci√≥n y sus dependencias para optimizarlo[cite: 19].
* **Menos Optimizaci√≥n en Tiempo de Ejecuci√≥n (a veces):** Aunque GraalVM es potente, las JVM tradicionales, con su compilaci√≥n JIT y su capacidad de adaptarse din√°micamente al comportamiento del programa en tiempo de ejecuci√≥n, a veces pueden alcanzar picos de rendimiento m√°s altos en aplicaciones de muy larga duraci√≥n. Para algunas cargas de trabajo muy espec√≠ficas, la JVM "calentada" podr√≠a superar a una imagen nativa[cite: 19].
* **Restricciones de Reflectividad y Recursos Din√°micos:** Java es muy din√°mico. Las im√°genes nativas requieren que todo lo que se usa en tiempo de ejecuci√≥n (como la reflexi√≥n, la carga din√°mica de clases, o el acceso a recursos externos) sea conocido en tiempo de compilaci√≥n. Esto significa que a veces necesitas configuraciones especiales (hint files) para "ense√±arle" a GraalVM sobre estas partes din√°micas de tu c√≥digo o de las librer√≠as que usas. ¬°No es imposible, pero a√±ade una capa de complejidad!
* **Soporte Limitado para Algunas Librer√≠as:** Aunque el ecosistema est√° creciendo r√°pidamente, no todas las librer√≠as de Java est√°n 100% listas para la compilaci√≥n nativa sin ajustes. Algunas pueden usar caracter√≠sticas muy din√°micas que GraalVM no puede optimizar completamente de forma autom√°tica.
''',
    'code_example': '''
// Ejemplo conceptual: las ventajas y limitaciones no se representan directamente con c√≥digo,
// sino con el comportamiento y la configuraci√≥n de la aplicaci√≥n.

// Para ver las ventajas, imagina el arranque de una aplicaci√≥n Spring Boot:
// Con JVM est√°ndar:
// java -jar my-spring-app.jar
// (Tiempo de arranque: 2-5 segundos, o m√°s)

// Con Native Image (despu√©s de compilarla con 'native-image' o Spring Boot build-image):
// ./my-spring-app-native
// (Tiempo de arranque: ~50-100 milisegundos)

// Ejemplo de una limitaci√≥n (reflexi√≥n):
// Si tienes un c√≥digo que usa reflexi√≥n sin los hints adecuados para GraalVM,
// podr√≠a fallar en tiempo de ejecuci√≥n cuando se compila a nativo.

/*
// Clase para la que se usa reflexi√≥n
public class MiClaseDinamica {
    public String mensaje() {
        return "Hola desde MiClaseDinamica";
    }
}

// C√≥digo que usa reflexi√≥n
public class ReflexionEjemplo {
    public static void main(String[] args) throws Exception {
        Class<?> clazz = Class.forName("MiClaseDinamica");
        Object instance = clazz.getDeclaredConstructor().newInstance();
        java.lang.reflect.Method method = clazz.getMethod("mensaje");
        System.out.println(method.invoke(instance));
    }
}
*/
// Para que el ejemplo de reflexi√≥n funcione en una Native Image,
// necesitar√≠as un archivo 'reflection-config.json' para GraalVM
// que le diga que 'MiClaseDinamica' y su m√©todo 'mensaje' deben ser
// accesibles v√≠a reflexi√≥n. Esto no es c√≥digo Java, sino configuraci√≥n de GraalVM.
'''
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java en la Nube',
    'subtopic': 'Caracter√≠sticas de Java para la nube',
    'definition': '''
Java ha sido un pilar en el desarrollo de software durante d√©cadas, y su adaptaci√≥n a la nube no es la excepci√≥n. Su filosof√≠a de "escribir una vez, ejecutar en cualquier lugar" facilita la portabilidad de aplicaciones en entornos de nube variados.

¬øTe preguntas por qu√© Java sigue siendo relevante en la era de la computaci√≥n en la nube?

Adem√°s de su portabilidad, Java ofrece caracter√≠sticas integradas de seguridad, como la verificaci√≥n de clases y la gesti√≥n de permisos, que son esenciales en entornos donde la protecci√≥n de datos es cr√≠tica. Su gesti√≥n autom√°tica de memoria contribuye a la estabilidad y eficiencia de las aplicaciones desplegadas en la nube.

Estas caracter√≠sticas hacen de Java una opci√≥n s√≥lida para desarrollar aplicaciones escalables, seguras y eficientes en plataformas de nube modernas.
  ''',
    'code_example': '''
// Ejemplo de una clase Java simple que puede ejecutarse en diferentes entornos de nube

public class AplicacionNube {
  public static void main(String[] args) {
    System.out.println("Aplicaci√≥n Java en la nube ejecut√°ndose correctamente.");
  }
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java en la Nube',
    'subtopic': 'Contenedores y orquestaci√≥n',
    'definition': '''
El uso de contenedores, como Docker, ha revolucionado la forma en que se despliegan las aplicaciones. Java se integra eficientemente en estos entornos, permitiendo encapsular aplicaciones y sus dependencias de manera consistente.

¬øTe has enfrentado a problemas de "funciona en mi m√°quina" al desplegar aplicaciones?

Con contenedores, puedes crear im√°genes que aseguran que tu aplicaci√≥n Java se ejecute de la misma manera en cualquier entorno. Adem√°s, herramientas de orquestaci√≥n como Kubernetes facilitan la gesti√≥n, escalado y monitoreo de estas aplicaciones en producci√≥n.

Esta combinaci√≥n permite una implementaci√≥n m√°s √°gil, escalable y confiable de aplicaciones Java en la nube.
  ''',
    'code_example': '''
// Dockerfile b√°sico para una aplicaci√≥n Java

FROM openjdk:17-jdk-slim
COPY target/miapp.jar miapp.jar
ENTRYPOINT ["java", "-jar", "miapp.jar"]
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java en la Nube',
    'subtopic': 'Microservicios y arquitecturas desacopladas',
    'definition': '''
La arquitectura de microservicios implica dividir una aplicaci√≥n en componentes peque√±os e independientes que se comunican entre s√≠. Java, con frameworks como Spring Boot y Micronaut, facilita la creaci√≥n de estos servicios.

¬øTe preguntas c√≥mo manejar aplicaciones complejas de manera m√°s eficiente?

Al adoptar microservicios, puedes desarrollar, desplegar y escalar cada componente de forma independiente, lo que mejora la agilidad y la resiliencia de la aplicaci√≥n. Esta arquitectura es especialmente beneficiosa en entornos de nube, donde la escalabilidad y la disponibilidad son esenciales.

Java proporciona las herramientas necesarias para implementar microservicios robustos y eficientes que se integran perfectamente en ecosistemas de nube modernos.
  ''',
    'code_example': '''
// Ejemplo de un microservicio simple con Spring Boot

@RestController
public class SaludoControlador {

  @GetMapping("/saludo")
  public String saludar() {
    return "¬°Hola desde el microservicio!";
  }
}
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java en la Nube',
    'subtopic': 'Integraci√≥n con servicios en la nube',
    'definition': '''
Los principales proveedores de servicios en la nube, como AWS, Azure y Google Cloud, ofrecen SDKs y herramientas que facilitan la integraci√≥n de aplicaciones Java con sus servicios.

¬øTe gustar√≠a aprovechar servicios como almacenamiento, bases de datos o funciones sin servidor en tus aplicaciones Java?

Con las integraciones disponibles, puedes conectar tu aplicaci√≥n Java a servicios como Amazon S3, Azure Blob Storage o Google Cloud Functions de manera sencilla. Esto permite ampliar las capacidades de tu aplicaci√≥n sin tener que gestionar la infraestructura subyacente.

Estas integraciones agilizan el desarrollo y despliegue de aplicaciones Java modernas y escalables en la nube.
  ''',
    'code_example': '''
// Ejemplo de uso del SDK de AWS para subir un archivo a S3

AmazonS3 s3 = AmazonS3ClientBuilder.standard().build();
s3.putObject("mi-bucket", "archivo.txt", new File("archivo.txt"));
  ''',
  });

  await db.insert('programming_content', {
    'language': 'Java',
    'module': 'Sr',
    'level': 6,
    'title_level': 'T√≥picos Avanzados',
    'topic': 'Java en la Nube',
    'subtopic': 'Desaf√≠os y consideraciones',
    'definition': '''
Aunque Java ofrece muchas ventajas en entornos de nube, tambi√©n presenta desaf√≠os que deben considerarse para asegurar un rendimiento √≥ptimo.

¬øTe has enfrentado a problemas de latencia o consumo de recursos en tus aplicaciones Java en la nube?

Algunos desaf√≠os comunes incluyen la gesti√≥n eficiente de la memoria, tiempos de inicio de la aplicaci√≥n y la necesidad de ajustar la configuraci√≥n de la JVM para entornos de nube espec√≠ficos. Adem√°s, la migraci√≥n de aplicaciones legadas a la nube puede requerir refactorizaci√≥n y adaptaci√≥n a nuevas arquitecturas.

Abordar estos desaf√≠os con buenas pr√°cticas y herramientas adecuadas es esencial para aprovechar al m√°ximo las capacidades de Java en la nube.
  ''',
    'code_example': '''
// Configuraci√≥n de par√°metros de la JVM para optimizar el rendimiento en la nube

java -Xms512m -Xmx1024m -XX:+UseG1GC -jar miapp.jar
  ''',
  });
}
