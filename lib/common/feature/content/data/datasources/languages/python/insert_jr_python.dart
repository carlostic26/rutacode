import 'package:sqflite_common/sqlite_api.dart';

Future<void> insertPythonJrLevel1Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 1,
    'tittle_level': 'Fundamentos de Python',
    'topic': 'Sintaxis B√°sica',
    'subtopic': 'Estructura de un programa Python',
    'definition': '''
Cuando empiezas a escribir en Python, lo primero que notas es su limpieza visual. A diferencia de otros lenguajes, aqu√≠ no necesitas escribir llaves o puntos y comas por todos lados. Todo fluye de forma m√°s directa y natural.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, resulta que esa sencillez hace que Python sea muy f√°cil de leer y escribir. Ideal si est√°s dando tus primeros pasos en el mundo de la programaci√≥n o si vienes de otros lenguajes m√°s verbosos.

Un programa en Python normalmente arranca ejecutando las instrucciones de arriba hacia abajo. Puedes tener declaraciones de variables, funciones definidas con `def`, bloques condicionales y bucles. Todo esto organizado de forma jer√°rquica usando la indentaci√≥n (espacios al inicio de cada l√≠nea) en lugar de s√≠mbolos como en otros lenguajes. Lo esencial es que el c√≥digo se vea limpio y bien estructurado, porque Python realmente se preocupa por la forma en la que escribes. De hecho, un error de indentaci√≥n puede hacer que tu programa ni siquiera arranque.

Algunas reglas b√°sicas: el c√≥digo se ejecuta en el orden en que lo escribes (a menos que uses condiciones o funciones), puedes definir funciones antes de usarlas, y todo comienza con la l√≠nea principal, o simplemente el primer bloque que se ejecuta si no tienes una funci√≥n `main()` como tal. 
''',
    'code_example': '''
# Estructura b√°sica de un programa Python

# Esto es una funci√≥n
def saludar():
    print("Hola desde Python")

# Llamamos a la funci√≥n
saludar()

# Tambi√©n podemos hacer operaciones b√°sicas
numero = 5 + 3
print("El resultado es:", numero)

# Incorrecto: sin indentaci√≥n
# def error():
# print("Esto da error")  # ‚Üê Error de indentaci√≥n
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 1,
    'tittle_level': 'Fundamentos de Python',
    'topic': 'Sintaxis B√°sica',
    'subtopic': 'Comentarios (#, """)',
    'definition': '''
Hablemos de los comentarios en Python.  Son esas peque√±as notas que le dejas a tu futuro yo (o a otros programadores) dentro del c√≥digo.  Piensa en ellos como post-its que te ayudan a recordar qu√© hace cada parte del programa.

Seguramente te preguntar√°s, ¬øpor qu√© son tan importantes? Bueno, los comentarios son cruciales para hacer que tu c√≥digo sea m√°s legible y comprensible.  Cuando escribes c√≥digo, puede que todo tenga sentido en ese momento, pero cr√©eme, cuando vuelvas a verlo semanas o meses despu√©s, ¬°te alegrar√°s de haber dejado comentarios!

Ahora, vamos al grano.  En Python, tienes dos formas principales de escribir comentarios: los comentarios de una sola l√≠nea y los comentarios multil√≠nea.  Los comentarios de una sola l√≠nea empiezan con el s√≠mbolo `#`.  Todo lo que escribas despu√©s del `#` en esa l√≠nea ser√° ignorado por el int√©rprete de Python.  Son perfectos para explicar una l√≠nea de c√≥digo o a√±adir una nota r√°pida.  Por otro lado, los comentarios multil√≠nea se escriben usando tres comillas dobles `"""` al principio y al final del bloque de texto.  Estos son ideales para explicar funciones completas, bloques de c√≥digo complejos o cualquier cosa que requiera una explicaci√≥n m√°s extensa.  Usar buenos comentarios es una habilidad clave; ¬°te lo agradecer√°s a ti mismo en el futuro! üöÄ
''',
    'code_example': '''
# Este es un comentario de una sola l√≠nea
print("¬°Hola, mundo!")  # Imprime "¬°Hola, mundo!"

"""
Este es un comentario
multil√≠nea.
Puede ocupar varias l√≠neas.
"""

def mi_funcion(parametro):
    """
    Esta funci√≥n hace algo muy importante.
    Recibe un par√°metro y devuelve un resultado.
    """
    # Aqu√≠ va el c√≥digo de la funci√≥n
    return parametro * 2

# Ejemplo de un comentario innecesario (¬°Evitar!)
# x = x + 1  # Suma 1 a x
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 1,
    'tittle_level': 'Fundamentos de Python',
    'topic': 'Sintaxis B√°sica',
    'subtopic': 'Indentaci√≥n',
    'definition': '''
Hablemos de la indentaci√≥n en Python.  Si vienes de otros lenguajes, esto te va a parecer... peculiar.  En Python, la indentaci√≥n no es solo para que el c√≥digo se vea bonito (aunque ayuda üíÖ), ¬°es parte de la sintaxis del lenguaje!

¬øTe est√°s preguntando qu√© significa "indentaci√≥n"? B√°sicamente, es el espacio en blanco al principio de una l√≠nea de c√≥digo.  En otros lenguajes, se usan llaves `{}` o palabras clave como `begin` y `end` para definir bloques de c√≥digo (como el cuerpo de una funci√≥n o un bucle).  Python, en cambio, usa la indentaci√≥n.

Ahora, profundicemos.  La indentaci√≥n le dice al int√©rprete de Python qu√© l√≠neas de c√≥digo pertenecen a qu√© bloque.  Por ejemplo, las l√≠neas dentro de una funci√≥n o un bucle `for` deben estar indentadas.  Si la indentaci√≥n es incorrecta, Python lanzar√° un error (`IndentationError`) y tu programa no funcionar√°.  La convenci√≥n es usar 4 espacios por nivel de indentaci√≥n, aunque tambi√©n puedes usar tabulaciones (¬°pero es mejor no mezclarlos!).  Esto puede parecer quisquilloso, pero te obliga a escribir c√≥digo limpio y legible.  Al final, lo agradecer√°s (aunque al principio te cueste un poco üòÖ).
''',
    'code_example': '''
def mi_funcion():
    print("Esta l√≠nea est√° indentada, pertenece a la funci√≥n")
    if True:
        print("Esta l√≠nea tambi√©n est√° indentada, pertenece al if")
    print("Esta l√≠nea tambi√©n pertenece a la funci√≥n")

print("Esta l√≠nea no est√° indentada, est√° fuera de la funci√≥n")

# Ejemplo de error de indentaci√≥n
# def otra_funcion():
# print("Esta l√≠nea deber√≠a estar indentada") # IndentationError: expected an indented block
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 1,
    'tittle_level': 'Fundamentos de Python',
    'topic': 'Sintaxis B√°sica',
    'subtopic': 'Bloques de c√≥digo',
    'definition': '''
Siguiendo con la idea de la indentaci√≥n, hablemos ahora de los bloques de c√≥digo en Python.  Un bloque de c√≥digo es un conjunto de l√≠neas de c√≥digo que se agrupan y se tratan como una unidad.  Piensa en ellos como p√°rrafos en un libro; cada p√°rrafo tiene un prop√≥sito y contribuye a la historia general.

¬øTe preguntas d√≥nde encontramos estos bloques? Los bloques de c√≥digo aparecen en varias partes de un programa Python, como dentro de funciones, bucles (`for` y `while`), sentencias condicionales (`if`, `elif`, `else`) y clases.  La clave para definir un bloque en Python es la indentaci√≥n.  Todas las l√≠neas dentro de un bloque deben estar indentadas al mismo nivel.

Ahora, lo importante.  La indentaci√≥n consistente es crucial.  Si mezclas diferentes niveles de indentaci√≥n dentro de un bloque, Python se confundir√° y te dar√° un error.  Esto puede parecer un poco estricto, pero tiene una gran ventaja: hace que el c√≥digo sea mucho m√°s f√°cil de leer y entender.  Puedes ver de un vistazo qu√© l√≠neas pertenecen a qu√© bloque, lo que facilita la depuraci√≥n y el mantenimiento del c√≥digo.  Adem√°s, fomenta un estilo de programaci√≥n limpio y organizado.  As√≠ que, ¬°abraza la indentaci√≥n y escribe c√≥digo Python como un pro! üòé
''',
    'code_example': '''
def mi_funcion():
    # Este es un bloque de c√≥digo dentro de la funci√≥n
    print("Inicio de la funci√≥n")
    if True:
        # Este es un bloque de c√≥digo dentro del if
        print("Dentro del if")
        print("Otra l√≠nea dentro del if")
    print("Fin de la funci√≥n")

for i in range(3):
    # Este es un bloque de c√≥digo dentro del bucle for
    print("Inicio del bucle")
    print("Valor de i:", i)
    print("Fin del bucle")

# Ejemplo de indentaci√≥n incorrecta (¬°Error!)
# if True:
# print("Esta l√≠nea deber√≠a estar indentada")
#  print("Esta l√≠nea tambi√©n deber√≠a estar indentada") # IndentationError: unindent does not match any outer indentation level
'''
  });

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Tipos de Datos y Variables',
      'subtopic': 'Tipos b√°sicos (int, float, bool, str)',
      'definition': '''
Hablemos de los tipos b√°sicos de datos en Python.  Estos son los bloques de construcci√≥n fundamentales con los que trabajamos para representar informaci√≥n.  Piensa en ellos como los ingredientes esenciales en la cocina de la programaci√≥n.

Seguramente te estar√°s preguntando, ¬øqu√© tipos son esos? Bueno, tenemos los enteros (`int`), que son n√∫meros enteros sin decimales (como 5, -10, 0).  Luego est√°n los flotantes (`float`), que son n√∫meros con decimales (como 3.14, -2.5, 0.0).  Tambi√©n tenemos los booleanos (`bool`), que representan valores de verdad: `True` o `False`.  Y finalmente, las cadenas (`str`), que son secuencias de caracteres (como "Hola", "Python", "123").

Ahora, profundicemos un poco m√°s.  Cada tipo de dato tiene sus propias caracter√≠sticas y operaciones permitidas.  Por ejemplo, puedes sumar dos `int` o dos `float`, pero no puedes sumar directamente un `int` y un `str` (a menos que los conviertas primero).  Los booleanos son muy √∫tiles para controlar el flujo del programa (como en las sentencias `if`).  Y las cadenas son esenciales para trabajar con texto.  Entender estos tipos b√°sicos es crucial para escribir programas que manejen la informaci√≥n correctamente.  ¬°Dominarlos te abrir√° un mundo de posibilidades! üöÄ
''',
      'code_example': '''
# Ejemplos de tipos b√°sicos
edad = 30          # int
altura = 1.75      # float
es_estudiante = True  # bool
nombre = "Carlos"    # str

# Operaciones con int y float
suma = edad + 10
altura_duplicada = altura * 2

# Operaciones con str
saludo = "Hola, " + nombre  # Concatenaci√≥n

# Ejemplo de error de tipo (¬°Cuidado!)
# suma_incorrecta = edad + nombre  # TypeError: unsupported operand type(s) for +: 'int' and 'str'
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Tipos de Datos y Variables',
      'subtopic': 'Tipos complejos (list, tuple, set, dict)',
      'definition': '''
Ahora, hablemos de los tipos de datos complejos en Python.  Estos son como contenedores que pueden almacenar m√∫ltiples valores, lo que nos permite organizar la informaci√≥n de manera m√°s eficiente.  Piensa en ellos como las estanter√≠as y cajones de tu habitaci√≥n, que te ayudan a mantener todo en orden.

Seguramente te estar√°s preguntando, ¬øcu√°les son estos tipos? Tenemos las listas (`list`), que son secuencias ordenadas de elementos que pueden ser de cualquier tipo (incluso otras listas).  Luego est√°n las tuplas (`tuple`), que son similares a las listas pero inmutables (es decir, no se pueden modificar despu√©s de su creaci√≥n).  Tambi√©n tenemos los conjuntos (`set`), que son colecciones no ordenadas de elementos √∫nicos.  Y finalmente, los diccionarios (`dict`), que almacenan pares clave-valor, permiti√©ndote acceder a los valores mediante sus claves.

Profundicemos un poco.  Las listas son muy vers√°tiles y se usan mucho para almacenar colecciones de elementos que pueden cambiar a lo largo del tiempo.  Las tuplas son √∫tiles cuando quieres asegurarte de que los datos no se modifiquen.  Los conjuntos son ideales para eliminar duplicados y realizar operaciones de conjuntos (como la uni√≥n y la intersecci√≥n).  Y los diccionarios son perfectos para representar relaciones entre datos, como un diccionario de palabras y sus definiciones.  Dominar estos tipos complejos te permitir√° manejar grandes cantidades de informaci√≥n de manera efectiva.  ¬°Prep√°rate para llevar tu programaci√≥n al siguiente nivel! üöÄ
''',
      'code_example': '''
# Ejemplos de tipos complejos
mi_lista = [1, 2, 3, "a", "b"]  # list
mi_tupla = (4, 5, 6)             # tuple
mi_conjunto = {7, 8, 9}           # set
mi_diccionario = {"clave1": "valor1", "clave2": "valor2"}  # dict

# Operaciones con listas
mi_lista.append("c")  # Agregar un elemento
mi_lista[0] = 10      # Modificar un elemento

# Error con tuplas (¬°No se pueden modificar!)
# mi_tupla[0] = 40  # TypeError: 'tuple' object does not support item assignment
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Tipos de Datos y Variables',
      'subtopic': 'Declaraci√≥n e inicializaci√≥n de variables',
      'definition': '''
Ahora, hablemos de c√≥mo declarar e inicializar variables en Python.  Las variables son como etiquetas que le pones a los datos para poder referirte a ellos m√°s tarde.  Imagina que est√°s organizando cajas üì¶ en un almac√©n; cada caja necesita una etiqueta para saber qu√© contiene, ¬øverdad?  Pues las variables son esas etiquetas en el mundo de la programaci√≥n.

Seguramente te estar√°s preguntando, ¬øc√≥mo se crean estas etiquetas? En Python, es muy sencillo.  Simplemente eliges un nombre para la variable y le asignas un valor usando el operador de asignaci√≥n `=`.  Por ejemplo, si quieres guardar tu edad, puedes escribir `edad = 30`.  ¬°Y ya est√°!  Python autom√°ticamente determina el tipo de dato de la variable bas√°ndose en el valor que le asignas.

Profundicemos un poco m√°s.  La primera vez que le asignas un valor a una variable, se dice que la est√°s "inicializando".  Despu√©s de eso, puedes cambiar el valor de la variable tantas veces como quieras.  Los nombres de las variables deben seguir ciertas reglas: pueden contener letras, n√∫meros y guiones bajos, pero deben empezar con una letra o un guion bajo.  Adem√°s, Python distingue entre may√∫sculas y min√∫sculas, as√≠ que `edad` y `Edad` son variables diferentes.  Elegir buenos nombres para las variables es crucial para que tu c√≥digo sea f√°cil de leer y entender.  ¬°Un buen nombre puede ahorrarte muchos dolores de cabeza en el futuro! üòÖ
''',
      'code_example': '''
# Declaraci√≥n e inicializaci√≥n de variables
edad = 30
nombre = "Alice"
altura = 1.65
es_estudiante = True

# Cambiando el valor de una variable
edad = 31

# Nombres de variables v√°lidos
mi_variable = 10
_mi_variable = 20
miVariable1 = 30

# Nombres de variables inv√°lidos (¬°Evitar!)
# 1mi_variable = 40  # SyntaxError: invalid syntax
# mi-variable = 50  # SyntaxError: invalid syntax
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Tipos de Datos y Variables',
      'subtopic': '√Åmbito de variables (global, local)',
      'definition': '''
Ahora, hablemos del √°mbito de las variables en Python.  El √°mbito de una variable se refiere a la parte del programa donde esa variable es accesible.  Piensa en ello como el territorio de una variable; algunas variables solo son conocidas dentro de su propio "barrio", mientras que otras son conocidas en toda la "ciudad".

Seguramente te estar√°s preguntando, ¬øcu√°les son esos "barrios" y "ciudades" en Python? Bueno, tenemos el √°mbito local y el √°mbito global.  Una variable local se define dentro de una funci√≥n y solo es accesible dentro de esa funci√≥n.  Es como una variable que solo existe dentro de una "habitaci√≥n" espec√≠fica.  Por otro lado, una variable global se define fuera de cualquier funci√≥n y es accesible desde cualquier parte del programa.  Es como una variable que est√° disponible en toda la "casa".

Profundicemos un poco m√°s.  Es importante entender la diferencia entre estos √°mbitos para evitar confusiones y errores.  Si intentas acceder a una variable local fuera de su funci√≥n, Python te dar√° un error.  Adem√°s, si tienes una variable local y una variable global con el mismo nombre, la variable local "oculta" a la variable global dentro de la funci√≥n.  Usar variables globales con moderaci√≥n es una buena pr√°ctica, ya que pueden hacer que el c√≥digo sea m√°s dif√≠cil de entender y mantener.  ¬°Un buen manejo del √°mbito de las variables es clave para escribir c√≥digo limpio y organizado! üöÄ
''',
      'code_example': '''
# Variable global
variable_global = "Soy global"

def mi_funcion():
    # Variable local
    variable_local = "Soy local"
    print(variable_local)  # Acceso a la variable local
    print(variable_global) # Acceso a la variable global

mi_funcion()
print(variable_global)  # Acceso a la variable global
# print(variable_local)  # Error: NameError: name 'variable_local' is not defined

def otra_funcion():
    variable_global = "Soy global pero modificada localmente" # Esto CREA una nueva variable local
    print(variable_global)

otra_funcion()
print(variable_global)
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Operadores',
      'subtopic': 'Operadores aritm√©ticos (+, -, *, /, %, **, //)',
      'definition': '''
Hablemos de los operadores aritm√©ticos en Python. Son los s√≠mbolos que usamos para realizar operaciones matem√°ticas, ¬°como en la calculadora! Piensa en ellos como las herramientas b√°sicas para hacer c√°lculos en tus programas.

Seguramente te estar√°s preguntando, ¬øcu√°les son esos operadores? Bueno, tenemos los cl√°sicos: `+` para la suma, `-` para la resta, `*` para la multiplicaci√≥n y `/` para la divisi√≥n. Pero Python tambi√©n nos da algunos extras interesantes.

Profundicemos un poco. El operador `%` nos da el resto de una divisi√≥n (√∫til para saber si un n√∫mero es par o impar), `**` se usa para elevar un n√∫mero a una potencia (como 2 al cubo ser√≠a `2 ** 3`), y `//` realiza la divisi√≥n entera, descartando la parte decimal. Estos operadores nos permiten hacer c√°lculos complejos de manera sencilla. ¬°Son una parte esencial de la caja de herramientas de cualquier programador! üöÄ
''',
      'code_example': '''
# Ejemplos de operadores aritm√©ticos
a = 10
b = 3

suma = a + b       # 13
resta = a - b      # 7
multiplicacion = a * b # 30
division = a / b    # 3.333...
resto = a % b       # 1
potencia = a ** b    # 1000
division_entera = a // b # 3

# Ejemplo de uso del operador % para verificar si un n√∫mero es par
numero = 7
if numero % 2 == 0:
    print(f"{numero} es par")
else:
    print(f"{numero} es impar")

# Un error com√∫n es dividir por cero (¬°Cuidado!)
# division_por_cero = 10 / 0  # ZeroDivisionError: division by zero
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Operadores',
      'subtopic': 'Operadores de comparaci√≥n (==, !=, >, <, >=, <=)',
      'definition': '''
Ahora, hablemos de los operadores de comparaci√≥n en Python. Estos operadores nos permiten comparar valores y determinar si una afirmaci√≥n es verdadera o falsa. Son como los jueces que deciden si dos cosas son iguales, diferentes, mayores, menores, etc.

Seguramente te estar√°s preguntando, ¬øcu√°les son esos jueces? Tenemos `==` para verificar si dos valores son iguales, `!=` para verificar si son diferentes, `>` para mayor que, `<` para menor que, `>=` para mayor o igual que, y `<=` para menor o igual que.

Profundicemos un poco. Estos operadores siempre devuelven un valor booleano: `True` si la comparaci√≥n es verdadera, y `False` si es falsa. Son esenciales para controlar el flujo de un programa, por ejemplo, para decidir si se debe ejecutar un bloque de c√≥digo o no (¬°lo veremos m√°s adelante con las estructuras de control!). ¬°Dominar estos operadores te permitir√° tomar decisiones inteligentes en tu c√≥digo! üöÄ
''',
      'code_example': '''
# Ejemplos de operadores de comparaci√≥n
a = 10
b = 5

igual = a == b       # False
diferente = a != b   # True
mayor_que = a > b    # True
menor_que = a < b    # False
mayor_o_igual = a >= b # True
menor_o_igual = a <= b # False

# Uso com√∫n en una sentencia if
if a > b:
    print("a es mayor que b")
else:
    print("a no es mayor que b")

# Un error com√∫n es usar = en lugar de == (¬°Cuidado!)
# if a = b:  # SyntaxError: invalid syntax
#     print("Esto est√° mal")
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Operadores',
      'subtopic': 'Operadores l√≥gicos (and, or, not)',
      'definition': '''
Sigamos con los operadores l√≥gicos en Python. Estos operadores nos permiten combinar o negar condiciones. Son como los conectores y negadores en una oraci√≥n, que nos permiten crear afirmaciones m√°s complejas.

Seguramente te estar√°s preguntando, ¬øcu√°les son esos conectores y negadores? Tenemos `and` para "y" l√≥gico (ambas condiciones deben ser verdaderas), `or` para "o" l√≥gico (al menos una condici√≥n debe ser verdadera), y `not` para la negaci√≥n (invierte el valor de la condici√≥n).

Profundicemos un poco. Los operadores l√≥gicos tambi√©n devuelven valores booleanos (`True` o `False`). Son muy √∫tiles para crear condiciones compuestas en las sentencias `if` y los bucles. Por ejemplo, puedes verificar si un n√∫mero est√° dentro de un rango usando `and`, o si cumple alguna de varias condiciones usando `or`. ¬°Dominar estos operadores te permitir√° crear l√≥gica compleja en tu c√≥digo! üöÄ
''',
      'code_example': '''
# Ejemplos de operadores l√≥gicos
a = True
b = False

y_logico = a and b   # False
o_logico = a or b    # True
no_logico = not a    # False

# Uso com√∫n en una sentencia if
edad = 20
es_estudiante = True

if edad >= 18 and es_estudiante:
    print("Eres mayor de edad y estudiante")
else:
    print("No cumples ambas condiciones")

# Un error com√∫n es confundir and con or (¬°Cuidado!)
# if edad >= 18 or es_estudiante:
#     print("Esto no es lo que quer√≠amos")
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Operadores',
      'subtopic': 'Operadores de asignaci√≥n (=, +=, -=, *=, /=, %=, **=, //=)',
      'definition': '''
Finalmente, hablemos de los operadores de asignaci√≥n en Python. Ya conocemos el operador `=` para asignar un valor a una variable. Pero Python nos ofrece algunos operadores de asignaci√≥n combinados que nos permiten realizar una operaci√≥n y una asignaci√≥n al mismo tiempo. Son como atajos para hacer nuestro c√≥digo m√°s conciso.

Seguramente te estar√°s preguntando, ¬øcu√°les son esos atajos? Tenemos `+=` para sumar y asignar, `-=` para restar y asignar, `*=` para multiplicar y asignar, `/=` para dividir y asignar, `%=` para calcular el resto y asignar, `**=` para elevar a una potencia y asignar, y `//=` para dividir entero y asignar.

Profundicemos un poco. Estos operadores modifican el valor de la variable original. Por ejemplo, `x += 5` es equivalente a `x = x + 5`. Son muy √∫tiles para actualizar contadores o acumuladores en bucles. ¬°Dominar estos operadores te permitir√° escribir c√≥digo m√°s eficiente y legible! üöÄ
''',
      'code_example': '''
# Ejemplos de operadores de asignaci√≥n
x = 10

x += 5     # x es ahora 15 (x = x + 5)
x -= 3     # x es ahora 12 (x = x - 3)
x *= 2     # x es ahora 24 (x = x * 2)
x /= 4     # x es ahora 6.0 (x = x / 4)
x %= 5     # x es ahora 1.0 (x = x % 5)
x **= 2    # x es ahora 36.0 (x = x ** 2)
x //= 7    # x es ahora 5.0 (x = x // 7)

# Un error com√∫n es usar el operador de asignaci√≥n incorrecto (¬°Cuidado!)
# x =+ 5  # Esto es v√°lido, pero no hace lo que probablemente quer√≠as (es equivalente a x = +5)
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Estructuras de Control',
      'subtopic': 'Sentencias if-elif-else',
      'definition': '''
Hablemos de las sentencias `if-elif-else` en Python. Estas estructuras nos permiten tomar decisiones en nuestro c√≥digo, ejecutando diferentes bloques de c√≥digo seg√∫n si se cumplen ciertas condiciones. Piensa en ellas como los "si... entonces... sino..." de la vida real, pero aplicados a la programaci√≥n.

Seguramente te estar√°s preguntando, ¬øc√≥mo funcionan exactamente? Bueno, la sentencia `if` eval√∫a una condici√≥n. Si la condici√≥n es verdadera (`True`), se ejecuta el bloque de c√≥digo que est√° debajo del `if`. Si la condici√≥n es falsa (`False`), se puede usar la sentencia `else` para especificar un bloque de c√≥digo alternativo que se ejecutar√°. Adem√°s, se pueden usar las sentencias `elif` (abreviatura de "else if") para evaluar condiciones adicionales en caso de que la condici√≥n del `if` sea falsa.

Profundicemos un poco. Puedes usar tantas sentencias `elif` como necesites para cubrir diferentes casos. Es importante recordar que solo se ejecutar√° uno de los bloques de c√≥digo (`if`, `elif` o `else`). Si la condici√≥n del `if` es verdadera, los `elif` y el `else` se ignoran. Si la condici√≥n del `if` es falsa, se eval√∫an los `elif` en orden, y si ninguna de sus condiciones es verdadera, se ejecuta el bloque del `else` (si est√° presente). ¬°Dominar estas sentencias te permitir√° crear programas que respondan de manera inteligente a diferentes situaciones! üöÄ
''',
      'code_example': '''
# Ejemplos de sentencias if-elif-else
edad = 25

if edad < 18:
    print("Eres menor de edad")
elif edad >= 18 and edad < 65:
    print("Eres adulto")
else:
    print("Eres adulto mayor")

# Otro ejemplo
nota = 85

if nota >= 90:
    print("Excelente")
elif nota >= 80:
    print("Muy bien")
elif nota >= 70:
    print("Bien")
else:
    print("A mejorar")

# Un error com√∫n es olvidar los dos puntos (:) al final de la l√≠nea if, elif o else (¬°Cuidado!)
# if edad < 18
#     print("Esto est√° mal")  # SyntaxError: invalid syntax
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Estructuras de Control',
      'subtopic': 'Bucles (for, while)',
      'definition': '''
Ahora, hablemos de los bucles en Python. Los bucles nos permiten repetir un bloque de c√≥digo varias veces. Son como los "haz esto una y otra vez" de la programaci√≥n, lo que nos ahorra mucho trabajo cuando necesitamos realizar la misma tarea repetidamente.

Seguramente te estar√°s preguntando, ¬øqu√© tipos de bucles hay? Python nos ofrece dos tipos principales: el bucle `for` y el bucle `while`. El bucle `for` se usa para iterar sobre una secuencia (como una lista, una tupla o un rango de n√∫meros) y ejecutar el bloque de c√≥digo para cada elemento de la secuencia. El bucle `while` se usa para ejecutar un bloque de c√≥digo mientras se cumpla una condici√≥n.

Profundicemos un poco. Los bucles son una herramienta poderosa para automatizar tareas repetitivas. Por ejemplo, puedes usar un bucle `for` para procesar todos los elementos de una lista, o un bucle `while` para ejecutar un juego hasta que el usuario decida terminar. Es importante asegurarse de que la condici√≥n del bucle `while` eventualmente se vuelva falsa, de lo contrario, el bucle se ejecutar√° indefinidamente (¬°lo que se conoce como un bucle infinito y puede colgar tu programa!). ¬°Dominar los bucles te permitir√° escribir c√≥digo mucho m√°s eficiente! üöÄ
''',
      'code_example': '''
# Ejemplos de bucles
# Bucle for
for i in range(5):  # Itera 5 veces (de 0 a 4)
    print("Valor de i:", i)

# Bucle while
contador = 0
while contador < 5:
    print("Contador:", contador)
    contador += 1  # Incrementa el contador

# Ejemplo de bucle infinito (¬°Cuidado!)
# while True:
#     print("Esto se repetir√° para siempre")

# Un error com√∫n es olvidar incrementar el contador en un bucle while (¬°Cuidado!)
# contador = 0
# while contador < 5:
#     print("Contador:", contador)
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Estructuras de Control',
      'subtopic': 'Break y continue',
      'definition': '''
Sigamos con las sentencias `break` y `continue` en Python. Estas sentencias nos permiten tener un control m√°s preciso sobre la ejecuci√≥n de los bucles. Son como los botones de "pausa" y "saltar" para los bucles.

Seguramente te estar√°s preguntando, ¬øqu√© hacen exactamente? La sentencia `break` se usa para salir de un bucle inmediatamente. Cuando se encuentra un `break`, el bucle se detiene y la ejecuci√≥n contin√∫a con la siguiente instrucci√≥n despu√©s del bucle. La sentencia `continue`, por otro lado, se usa para saltar el resto de la iteraci√≥n actual del bucle y pasar a la siguiente iteraci√≥n. Cuando se encuentra un `continue`, el bloque de c√≥digo restante dentro del bucle se omite para la iteraci√≥n actual, y el bucle contin√∫a con la siguiente iteraci√≥n.

Profundicemos un poco. `break` es √∫til cuando encuentras una condici√≥n que hace que no sea necesario seguir iterando en el bucle. `continue` es √∫til cuando quieres saltar algunas iteraciones basadas en una condici√≥n espec√≠fica, pero quieres que el bucle siga ejecut√°ndose. ¬°Dominar estas sentencias te dar√° un mayor control sobre tus bucles! üöÄ
''',
      'code_example': '''
# Ejemplos de break y continue
# Break
for i in range(10):
    if i == 5:
        break  # Sale del bucle cuando i es 5
    print("Valor de i (break):", i)

# Continue
for i in range(10):
    if i % 2 == 0:
        continue  # Salta las iteraciones donde i es par
    print("Valor de i (continue):", i)

# Ejemplo de uso de break para encontrar un elemento en una lista
lista = [1, 5, 10, 15, 20]
objetivo = 10
encontrado = False
for elemento in lista:
    if elemento == objetivo:
        encontrado = True
        break
if encontrado:
    print("Elemento encontrado")
else:
    print("Elemento no encontrado")
'''
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 1,
      'tittle_level': 'Fundamentos de Python',
      'topic': 'Estructuras de Control',
      'subtopic': 'Pass statement',
      'definition': '''
Finalmente, hablemos de la sentencia `pass` en Python. Esta sentencia es un poco peculiar, ya que no hace nada. Es como un marcador de posici√≥n que le dice a Python: "Aqu√≠ ir√° algo, pero todav√≠a no s√© qu√©".

Seguramente te estar√°s preguntando, ¬øpor qu√© necesitamos una sentencia que no hace nada? Bueno, `pass` es √∫til en situaciones donde la sintaxis de Python requiere que haya un bloque de c√≥digo, pero a√∫n no has decidido qu√© c√≥digo poner all√≠. Por ejemplo, puedes usar `pass` dentro de una funci√≥n o una sentencia condicional que a√∫n no has implementado.

Profundicemos un poco. `pass` es especialmente √∫til durante el desarrollo y la planificaci√≥n del c√≥digo. Te permite escribir la estructura b√°sica de tu programa sin tener que preocuparte por los detalles de implementaci√≥n de inmediato. Tambi√©n puede ser √∫til para evitar errores de sintaxis cuando est√°s escribiendo c√≥digo y a√∫n no has completado una parte. Aunque `pass` en s√≠ mismo no realiza ninguna acci√≥n, juega un papel importante en la escritura de c√≥digo limpio y estructurado. ¬°Es una herramienta sencilla pero poderosa! üöÄ
''',
      'code_example': '''
# Ejemplos de pass statement
def mi_funcion():
    pass  # La funci√≥n a√∫n no est√° implementada

if True:
    pass  # El bloque if a√∫n no est√° implementado
else:
    print("Esto s√≠ se ejecuta")

for i in range(5):
    if i == 3:
        pass  # No hacer nada cuando i es 3
    else:
        print("Valor de i:", i)

# Ejemplo de uso de pass en una clase vac√≠a
class MiClase:
    pass
'''
    },
  );
}

Future<void> insertPythonJrLevel2Data(Database db) async {
  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 2,
      'tittle_level': 'Programaci√≥n Orientada a Objetos',
      'topic': 'Clases y Objetos',
      'subtopic': 'Definici√≥n de clases (class)',
      'definition': '''
¬°Entramos al fascinante mundo de la Programaci√≥n Orientada a Objetos (POO)! Para empezar, hablemos de las clases. Piensa en una clase como un plano o una plantilla para crear objetos. Es como el molde para hacer galletas üç™, donde el molde define la forma y las caracter√≠sticas de cada galleta.

Seguramente te estar√°s preguntando, ¬øqu√© define exactamente una clase? Una clase define los atributos (las caracter√≠sticas) y los m√©todos (las acciones) que tendr√°n los objetos creados a partir de ella. Los atributos son como las variables que almacenan informaci√≥n sobre el objeto, y los m√©todos son como las funciones que definen el comportamiento del objeto.

Profundicemos un poco. En Python, se usa la palabra clave `class` para definir una clase. El nombre de la clase generalmente sigue la convenci√≥n de usar CamelCase (por ejemplo, `MiClase`, `CocheDeportivo`). Dentro de la clase, se definen los atributos y los m√©todos. Un m√©todo especial llamado `__init__` es el constructor de la clase (lo veremos en detalle m√°s adelante). ¬°Las clases son la base de la POO y nos permiten crear c√≥digo m√°s organizado y reutilizable! üöÄ
''',
      'code_example': '''
# Definici√≥n de una clase simple
class Coche:
    # Atributos (caracter√≠sticas)
    marca = "Toyota"
    modelo = "Corolla"
    color = "Azul"

    # M√©todos (acciones)
    def arrancar(self):
        print("El coche est√° arrancando")

    def acelerar(self):
        print("El coche est√° acelerando")

    def frenar(self):
        print("El coche est√° frenando")

# Ejemplo de una clase m√°s compleja con atributos din√°micos
class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

    def saludar(self):
        print(f"Hola, mi nombre es {self.nombre} y tengo {self.edad} a√±os")

# Un error com√∫n es olvidar los dos puntos (:) al final de la definici√≥n de la clase (¬°Cuidado!)
# class Coche
#     pass  # SyntaxError: invalid syntax
''',
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 2,
      'tittle_level': 'Programaci√≥n Orientada a Objetos',
      'topic': 'Clases y Objetos',
      'subtopic': 'Creaci√≥n de objetos',
      'definition': '''
Ahora que sabemos qu√© es una clase, hablemos de c√≥mo crear objetos a partir de ella. Un objeto es una instancia espec√≠fica de una clase. Volviendo a la analog√≠a de las galletas, la clase es el molde, y cada galleta individual que haces con ese molde es un objeto.

Seguramente te estar√°s preguntando, ¬øc√≥mo se crean estos objetos? En Python, se crea un objeto llamando al nombre de la clase como si fuera una funci√≥n. Por ejemplo, si tenemos una clase llamada `Coche`, podemos crear un objeto de esa clase escribiendo `mi_coche = Coche()`. Esto crea una nueva instancia de la clase `Coche` y la asigna a la variable `mi_coche`.

Profundicemos un poco. Cada objeto tiene sus propios valores para los atributos definidos en la clase. Si la clase tiene un constructor (`__init__`), puedes pasarle argumentos al crear el objeto para inicializar los atributos con valores espec√≠ficos. Los objetos pueden acceder a los m√©todos de su clase para realizar acciones. ¬°Los objetos son la esencia de la POO y nos permiten trabajar con datos y comportamientos de manera organizada! üöÄ
''',
      'code_example': '''
# Definici√≥n de la clase Coche (del ejemplo anterior)
class Coche:
    def __init__(self, marca, modelo, color):
        self.marca = marca
        self.modelo = modelo
        self.color = color

    def arrancar(self):
        print(f"El coche {self.marca} {self.modelo} est√° arrancando")

# Creaci√≥n de objetos de la clase Coche
mi_coche1 = Coche("Toyota", "Corolla", "Azul")
mi_coche2 = Coche("Honda", "Civic", "Rojo")

# Acceso a los atributos de los objetos
print(mi_coche1.marca)  # Imprime "Toyota"
print(mi_coche2.color)  # Imprime "Rojo"

# Llamada a los m√©todos de los objetos
mi_coche1.arrancar()  # Imprime "El coche Toyota Corolla est√° arrancando"

# Un error com√∫n es intentar acceder a un atributo que no existe (¬°Cuidado!)
# print(mi_coche1.velocidad)  # AttributeError: 'Coche' object has no attribute 'velocidad'
''',
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 2,
      'tittle_level': 'Programaci√≥n Orientada a Objetos',
      'topic': 'Clases y Objetos',
      'subtopic': 'Atributos y m√©todos',
      'definition': '''
Hablemos ahora de los atributos y m√©todos de una clase. Como mencionamos antes, los atributos son las caracter√≠sticas de un objeto, y los m√©todos son las acciones que puede realizar. Piensa en un objeto como un sustantivo, los atributos son los adjetivos que lo describen, y los m√©todos son los verbos que describen lo que hace.

Seguramente te estar√°s preguntando, ¬øc√≥mo se definen y se usan los atributos y m√©todos? Los atributos se definen como variables dentro de la clase. Pueden ser atributos de instancia (que pertenecen a cada objeto individual) o atributos de clase (que pertenecen a la clase en s√≠ misma). Los m√©todos son funciones definidas dentro de la clase. El primer par√°metro de un m√©todo siempre es `self`, que es una referencia al objeto que llama al m√©todo.

Profundicemos un poco. Los atributos de instancia se definen dentro del constructor (`__init__`) usando `self.nombre_del_atributo = valor`. Cada objeto tendr√° su propio conjunto de valores para estos atributos. Los atributos de clase se definen fuera del constructor y son compartidos por todos los objetos de la clase. Los m√©todos se definen como funciones normales, pero siempre incluyen `self` como primer par√°metro. Dentro de un m√©todo, puedes acceder a los atributos del objeto usando `self.nombre_del_atributo` y llamar a otros m√©todos del mismo objeto usando `self.nombre_del_metodo()`. ¬°Los atributos y m√©todos son los componentes clave que definen el comportamiento y el estado de los objetos! üöÄ
''',
      'code_example': '''
# Definici√≥n de la clase Coche (con atributos de clase y de instancia)
class Coche:
    # Atributo de clase
    numero_de_ruedas = 4

    def __init__(self, marca, modelo, color):
        # Atributos de instancia
        self.marca = marca
        self.modelo = modelo
        self.color = color
        self.velocidad = 0

    def arrancar(self):
        print(f"El coche {self.marca} {self.modelo} est√° arrancando")

    def acelerar(self, incremento):
        self.velocidad += incremento
        print(f"El coche {self.marca} {self.modelo} est√° acelerando a {self.velocidad} km/h")

    def frenar(self, decremento):
        self.velocidad -= decremento
        if self.velocidad < 0:
            self.velocidad = 0
        print(f"El coche {self.marca} {self.modelo} est√° frenando a {self.velocidad} km/h")

# Creaci√≥n de un objeto
mi_coche = Coche("Toyota", "Corolla", "Azul")

# Acceso a atributos y llamada a m√©todos
print(mi_coche.numero_de_ruedas)  # Imprime 4 (atributo de clase)
print(mi_coche.marca)            # Imprime "Toyota" (atributo de instancia)
mi_coche.arrancar()
mi_coche.acelerar(50)
mi_coche.frenar(20)

# Un error com√∫n es olvidar el self al definir un m√©todo (¬°Cuidado!)
# def arrancar():
#     print("El coche est√° arrancando")  # TypeError: Coche.arrancar() takes 0 positional arguments but 1 was given
''',
    },
  );

  await db.insert(
    'programming_content',
    {
      'language': 'Python',
      'module': 'Jr',
      'level': 2,
      'tittle_level': 'Programaci√≥n Orientada a Objetos',
      'topic': 'Clases y Objetos',
      'subtopic': 'Constructores (init)',
      'definition': '''
Finalmente, hablemos del constructor (`__init__`) de una clase en Python. El constructor es un m√©todo especial que se llama autom√°ticamente cuando se crea un objeto de la clase. Piensa en √©l como el "maestro de ceremonias" que se encarga de inicializar el objeto con los valores iniciales adecuados.

Seguramente te estar√°s preguntando, ¬øpara qu√© sirve exactamente el constructor? El constructor se utiliza principalmente para asignar valores iniciales a los atributos del objeto. Recibe como argumentos los valores que se pasan al crear el objeto y los asigna a los atributos usando `self.nombre_del_atributo = valor`. El primer par√°metro del constructor siempre es `self`, que es una referencia al objeto que se est√° creando.

Profundicemos un poco. El constructor es opcional; si no defines un constructor en tu clase, Python proporcionar√° un constructor predeterminado que no hace nada. Sin embargo, en la mayor√≠a de los casos, querr√°s definir un constructor para inicializar los objetos con los valores correctos. El constructor puede tener cualquier n√∫mero de par√°metros (adem√°s de `self`), lo que te permite crear objetos con diferentes estados iniciales. ¬°El constructor es una parte fundamental de la creaci√≥n de objetos y asegura que los objetos est√©n listos para usar desde el principio! üöÄ
''',
      'code_example': '''
# Definici√≥n de la clase Persona (con constructor)
class Persona:
    def __init__(self, nombre, edad, ciudad):
        self.nombre = nombre
        self.edad = edad
        self.ciudad = ciudad

    def saludar(self):
        print(f"Hola, mi nombre es {self.nombre}, tengo {self.edad} a√±os y vivo en {self.ciudad}")

# Creaci√≥n de objetos de la clase Persona
persona1 = Persona("Alice", 30, "Nueva York")
persona2 = Persona("Bob", 25, "Londres")

# Llamada al m√©todo saludar de los objetos
persona1.saludar()
persona2.saludar()

# Ejemplo de una clase sin constructor (Python proporciona uno predeterminado)
class Animal:
    def hacer_sonido(self):
        print("Sonido gen√©rico de animal")

animal = Animal()
animal.hacer_sonido()

# Un error com√∫n es escribir mal el nombre del constructor (¬°Cuidado!)
# def init(self, nombre):  # Debe ser __init__
#     self.nombre = nombre
''',
    },
  );

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Pilares de la POO',
    'subtopic': 'Encapsulamiento (convenci√≥n _ y __)',
    'definition': '''
El encapsulamiento es uno de los pilares fundamentales de la programaci√≥n orientada a objetos. En Python, aunque no existe un mecanismo estricto para restringir el acceso a los atributos y m√©todos, se utilizan convenciones para indicar el nivel de acceso.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, el encapsulamiento te permite proteger los datos internos de una clase, evitando que sean modificados accidentalmente desde fuera de la misma. Esto ayuda a mantener la integridad de los datos y facilita el mantenimiento del c√≥digo.

En Python, se utilizan las siguientes convenciones:

- Un solo guion bajo (`_atributo`) indica que el atributo o m√©todo es de uso interno y no debe ser accedido directamente desde fuera de la clase.
- Dos guiones bajos (`__atributo`) activan el name mangling, lo que cambia el nombre del atributo internamente para evitar colisiones en clases heredadas.

Estas convenciones no impiden el acceso, pero sirven como una se√±al para los desarrolladores sobre c√≥mo deben interactuar con los componentes de una clase.
''',
    'code_example': '''
class CuentaBancaria:
    def __init__(self, titular, saldo):
        self.titular = titular
        self._saldo = saldo  # Convenci√≥n de atributo protegido
        self.__numero_cuenta = "123456789"  # Name mangling para atributo privado

    def mostrar_saldo(self):
        print(f"Saldo disponible: {self._saldo}")

cuenta = CuentaBancaria("Ana", 1000)
cuenta.mostrar_saldo()  # Salida: Saldo disponible: 1000

# Acceso directo al atributo protegido (no recomendado)
print(cuenta._saldo)  # Salida: 1000

# Intento de acceso al atributo privado
# print(cuenta.__numero_cuenta)  # Esto generar√° un error

# Acceso al atributo privado mediante name mangling
print(cuenta._CuentaBancaria__numero_cuenta)  # Salida: 123456789
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Pilares de la POO',
    'subtopic': 'Herencia (super())',
    'definition': '''
La herencia permite crear nuevas clases basadas en clases existentes, reutilizando su c√≥digo y extendiendo su funcionalidad. En Python, la funci√≥n `super()` se utiliza para llamar a m√©todos de la clase padre desde una clase hija.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, la herencia te permite escribir c√≥digo m√°s limpio y evitar la duplicaci√≥n, facilitando la escalabilidad y el mantenimiento de tus programas.

Al utilizar `super()`, puedes acceder a m√©todos y atributos de la clase padre sin necesidad de referenciarla directamente por su nombre. Esto es especialmente √∫til en entornos con m√∫ltiples niveles de herencia, ya que hace que el c√≥digo sea m√°s flexible y menos propenso a errores.

Por ejemplo, si tienes una clase `Animal` con un m√©todo `hablar()`, y una clase `Perro` que hereda de `Animal`, puedes utilizar `super().hablar()` dentro de `Perro` para llamar al m√©todo de la clase padre y luego agregar comportamiento adicional.
''',
    'code_example': '''
class Animal:
    def __init__(self, nombre):
        self.nombre = nombre

    def hablar(self):
        print(f"{self.nombre} hace un sonido.")

class Perro(Animal):
    def __init__(self, nombre, raza):
        super().__init__(nombre)
        self.raza = raza

    def hablar(self):
        super().hablar()
        print(f"{self.nombre} ladra.")

perro = Perro("Fido", "Labrador")
perro.hablar()
# Salida:
# Fido hace un sonido.
# Fido ladra.
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Pilares de la POO',
    'subtopic': 'Polimorfismo',
    'definition': '''
El polimorfismo permite que diferentes clases respondan a la misma interfaz o m√©todo de manera distinta. En otras palabras, puedes llamar al mismo m√©todo en diferentes objetos y obtener comportamientos espec√≠ficos seg√∫n la clase del objeto.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, el polimorfismo te permite escribir c√≥digo m√°s flexible y reutilizable, ya que puedes dise√±ar funciones que operen con objetos de diferentes clases, siempre que implementen ciertos m√©todos.

En Python, el polimorfismo se logra mediante la sobreescritura de m√©todos en clases derivadas. Por ejemplo, si tienes una clase `Animal` con un m√©todo `hablar()`, y clases `Perro` y `Gato` que heredan de `Animal`, cada una puede implementar su propia versi√≥n de `hablar()`. Al llamar a `hablar()` en una instancia de `Perro` o `Gato`, se ejecutar√° el m√©todo correspondiente a la clase del objeto.
''',
    'code_example': '''
class Animal:
    def hablar(self):
        print("El animal hace un sonido.")

class Perro(Animal):
    def hablar(self):
        print("El perro ladra.")

class Gato(Animal):
    def hablar(self):
        print("El gato ma√∫lla.")

def hacer_hablar(animal):
    animal.hablar()

animales = [Perro(), Gato(), Animal()]
for animal in animales:
    hacer_hablar(animal)
# Salida:
# El perro ladra.
# El gato ma√∫lla.
# El animal hace un sonido.
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Pilares de la POO',
    'subtopic': 'M√©todos especiales (str, repr, etc.)',
    'definition': '''
Los m√©todos especiales en Python, tambi√©n conocidos como "dunder methods" (por los dobles guiones bajos), permiten definir comportamientos personalizados para objetos de tus clases. Entre los m√°s comunes est√°n `__str__()` y `__repr__()`.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, estos m√©todos te permiten controlar c√≥mo se representan tus objetos como cadenas de texto, lo cual es √∫til para la depuraci√≥n y la presentaci√≥n de informaci√≥n al usuario.

- `__str__()`: Define la representaci√≥n informal de un objeto, utilizada por la funci√≥n `print()` y `str()`. Deber√≠a devolver una cadena legible para el usuario final.
- `__repr__()`: Define la representaci√≥n oficial de un objeto, utilizada por la funci√≥n `repr()`. Deber√≠a devolver una cadena que, idealmente, pueda ser utilizada para recrear el objeto.

Implementar estos m√©todos en tus clases mejora la legibilidad y facilita el trabajo con tus objetos, especialmente durante la depuraci√≥n.
''',
    'code_example': '''
class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

    def __str__(self):
        return f"{self.nombre}, {self.edad} a√±os"

    def __repr__(self):
        return f"Persona('{self.nombre}', {self.edad})"

persona = Persona("Ana", 30)
print(str(persona))   # Salida: Ana, 30 a√±os
print(repr(persona))  # Salida: Persona('Ana', 30)
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Conceptos Avanzados',
    'subtopic': 'Decoradores (@)',
    'definition': '''
Los decoradores en Python son una herramienta poderosa que permite modificar o extender el comportamiento de funciones o m√©todos sin alterar su c√≥digo original. Se representan con el s√≠mbolo `@` seguido del nombre del decorador y se colocan justo encima de la definici√≥n de la funci√≥n o m√©todo que se desea decorar.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, los decoradores son ampliamente utilizados en frameworks como Flask y Django para tareas como la gesti√≥n de rutas o la autenticaci√≥n de usuarios. Tambi√©n son √∫tiles para a√±adir funcionalidades como el registro de eventos, la medici√≥n de tiempos de ejecuci√≥n o la validaci√≥n de datos, todo sin modificar el c√≥digo base de las funciones.

Un decorador es, en esencia, una funci√≥n que recibe otra funci√≥n como argumento y devuelve una nueva funci√≥n que ampl√≠a o modifica el comportamiento de la original. Esta capacidad de abstracci√≥n y reutilizaci√≥n hace que los decoradores sean una herramienta esencial para escribir c√≥digo limpio y mantenible.
''',
    'code_example': '''
def decorador_saludo(funcion_original):
    def nueva_funcion():
        print("Hola, antes de la funci√≥n original.")
        funcion_original()
        print("Adi√≥s, despu√©s de la funci√≥n original.")
    return nueva_funcion

@decorador_saludo
def funcion_principal():
    print("Esta es la funci√≥n principal.")

funcion_principal()
# Salida:
# Hola, antes de la funci√≥n original.
# Esta es la funci√≥n principal.
# Adi√≥s, despu√©s de la funci√≥n original.
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Conceptos Avanzados',
    'subtopic': 'Properties',
    'definition': '''
Las properties en Python permiten controlar el acceso y modificaci√≥n de atributos de una clase mediante m√©todos especiales, sin cambiar la interfaz p√∫blica de la clase. Utilizando el decorador `@property`, puedes definir m√©todos que se comportan como atributos, lo que facilita la encapsulaci√≥n y la validaci√≥n de datos.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, las properties te permiten agregar l√≥gica adicional al acceso o modificaci√≥n de atributos sin que el usuario de la clase tenga que cambiar la forma en que interact√∫a con ella. Esto es especialmente √∫til cuando necesitas validar datos, calcular valores din√°micamente o mantener la compatibilidad con versiones anteriores de tu c√≥digo.

Al definir una property, puedes crear m√©todos getter, setter y deleter para un atributo, lo que te brinda un control total sobre su comportamiento. Esto mejora la mantenibilidad y la claridad de tu c√≥digo.
''',
    'code_example': '''
class Circulo:
    def __init__(self, radio):
        self._radio = radio

    @property
    def radio(self):
        return self._radio

    @radio.setter
    def radio(self, valor):
        if valor <= 0:
            raise ValueError("El radio debe ser positivo.")
        self._radio = valor

    @property
    def area(self):
        import math
        return math.pi * (self._radio ** 2)

c = Circulo(5)
print(c.area)  # Salida: 78.53981633974483
c.radio = 10
print(c.area)  # Salida: 314.1592653589793
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Conceptos Avanzados',
    'subtopic': 'Clases abstractas (abc module)',
    'definition': '''
Las clases abstractas en Python, proporcionadas por el m√≥dulo `abc`, permiten definir interfaces comunes para un conjunto de clases relacionadas. Una clase abstracta puede contener m√©todos abstractos que deben ser implementados por cualquier clase que la herede, asegurando as√≠ una estructura coherente en la jerarqu√≠a de clases.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, las clases abstractas son √∫tiles cuando deseas establecer un contrato que todas las subclases deben cumplir. Esto es especialmente valioso en sistemas grandes y complejos, donde mantener una arquitectura coherente es crucial.

Para definir una clase abstracta, se hereda de `ABC` y se utilizan los decoradores `@abstractmethod` para marcar los m√©todos que deben ser implementados por las subclases. Esto ayuda a prevenir errores y facilita la comprensi√≥n del dise√±o del sistema.
''',
    'code_example': '''
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def hacer_sonido(self):
        pass

class Perro(Animal):
    def hacer_sonido(self):
        return "Guau"

class Gato(Animal):
    def hacer_sonido(self):
        return "Miau"

perro = Perro()
print(perro.hacer_sonido())  # Salida: Guau

gato = Gato()
print(gato.hacer_sonido())  # Salida: Miau
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 2,
    'tittle_level': 'Programaci√≥n Orientada a Objetos',
    'topic': 'Conceptos Avanzados',
    'subtopic': 'Dataclasses (Python 3.7+)',
    'definition': '''
Las dataclasses, introducidas en Python 3.7, son una forma concisa y eficiente de crear clases que principalmente almacenan datos. Al utilizar el decorador `@dataclass`, Python genera autom√°ticamente m√©todos especiales como `__init__`, `__repr__` y `__eq__`, lo que reduce la cantidad de c√≥digo repetitivo y mejora la legibilidad.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, las dataclasses simplifican la creaci√≥n de clases de datos, lo que es especialmente √∫til en aplicaciones que manejan grandes cantidades de informaci√≥n estructurada, como en el procesamiento de datos o en APIs.

Adem√°s, las dataclasses permiten definir atributos con tipos espec√≠ficos y valores predeterminados, y ofrecen opciones avanzadas como la inmutabilidad y la ordenaci√≥n autom√°tica, lo que las convierte en una herramienta poderosa para el desarrollo moderno en Python.
''',
    'code_example': '''
from dataclasses import dataclass

@dataclass
class Persona:
    nombre: str
    edad: int
    ciudad: str = "Lima"

p = Persona("Ana", 30)
print(p)  # Salida: Persona(nombre='Ana', edad=30, ciudad='Lima')
'''
  });
}

Future<void> insertPythonJrLevel3Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Estructuras de Datos',
    'subtopic': 'Listas y operaciones',
    'definition': '''
Las listas en Python son colecciones ordenadas y mutables que permiten almacenar m√∫ltiples elementos, incluso de diferentes tipos. Son una de las estructuras de datos m√°s vers√°tiles y ampliamente utilizadas en Python.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, las listas te permiten almacenar y manipular conjuntos de datos de manera eficiente. Puedes agregar, eliminar o modificar elementos f√°cilmente, lo que las hace ideales para tareas como el procesamiento de datos, la implementaci√≥n de algoritmos y la gesti√≥n de colecciones din√°micas.

Algunas operaciones comunes con listas incluyen:

- `append()`: Agrega un elemento al final de la lista.
- `extend()`: Agrega todos los elementos de una lista al final de otra.
- `insert()`: Inserta un elemento en una posici√≥n espec√≠fica.
- `remove()`: Elimina la primera aparici√≥n de un elemento.
- `pop()`: Elimina y devuelve el √∫ltimo elemento (o uno en una posici√≥n espec√≠fica).
- `sort()`: Ordena la lista en su lugar.
- `reverse()`: Invierte el orden de los elementos en la lista.
- `len()`: Devuelve la cantidad de elementos en la lista.
- `sum()`: Devuelve la suma de los elementos num√©ricos de la lista.
- `max()` y `min()`: Devuelven el valor m√°ximo y m√≠nimo de la lista, respectivamente.
''',
    'code_example': '''
# Crear una lista
numeros = [3, 1, 4, 1, 5, 9]

# Agregar un elemento al final
numeros.append(2)

# Insertar un elemento en la posici√≥n 2
numeros.insert(2, 6)

# Eliminar el primer elemento con valor 1
numeros.remove(1)

# Ordenar la lista
numeros.sort()

# Invertir el orden de la lista
numeros.reverse()

# Mostrar la lista resultante
print(numeros)  # Salida: [9, 6, 5, 4, 3, 2, 1]
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Estructuras de Datos',
    'subtopic': 'Tuplas (inmutables)',
    'definition': '''
Las tuplas en Python son colecciones ordenadas e inmutables de elementos. Se utilizan cuando se desea almacenar una secuencia de elementos que no deben cambiar a lo largo del tiempo.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, al ser inmutables, las tuplas pueden ser utilizadas como claves en diccionarios y elementos de conjuntos, lo que no es posible con listas. Adem√°s, su inmutabilidad proporciona una mayor seguridad y puede mejorar el rendimiento en ciertas situaciones.

Las tuplas se definen utilizando par√©ntesis `()` o simplemente separando los elementos por comas. Aunque no se pueden modificar despu√©s de su creaci√≥n, es posible acceder a sus elementos mediante √≠ndices, al igual que con las listas.
''',
    'code_example': '''
# Crear una tupla
coordenadas = (10, 20)

# Acceder a los elementos
x = coordenadas[0]
y = coordenadas[1]

print(f"Coordenadas: x={x}, y={y}")  # Salida: Coordenadas: x=10, y=20

# Intentar modificar un elemento (esto generar√° un error)
# coordenadas[0] = 15  # TypeError: 'tuple' object does not support item assignment
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Estructuras de Datos',
    'subtopic': 'Conjuntos (sets)',
    'definition': '''
Los conjuntos en Python, conocidos como `sets`, son colecciones desordenadas de elementos √∫nicos. Se utilizan cuando se necesita almacenar elementos sin duplicados y realizar operaciones matem√°ticas como uniones, intersecciones y diferencias.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, los conjuntos son ideales para eliminar duplicados de una colecci√≥n, verificar la pertenencia de elementos y realizar operaciones de teor√≠a de conjuntos de manera eficiente.

Los conjuntos se definen utilizando llaves `{}` o la funci√≥n `set()`. Al ser desordenados, no mantienen el orden de inserci√≥n de los elementos.
''',
    'code_example': '''
# Crear un conjunto
frutas = {"manzana", "banana", "cereza"}

# Agregar un elemento
frutas.add("naranja")

# Eliminar un elemento
frutas.remove("banana")

# Verificar si un elemento est√° en el conjunto
print("manzana" in frutas)  # Salida: True

# Mostrar el conjunto resultante
print(frutas)  # Salida: {'manzana', 'naranja', 'cereza'}
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Estructuras de Datos',
    'subtopic': 'Diccionarios y operaciones',
    'definition': '''
Los diccionarios en Python son colecciones no ordenadas de pares clave-valor. Se utilizan para almacenar datos que se pueden asociar mediante una clave √∫nica, lo que permite un acceso eficiente a los valores correspondientes.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, los diccionarios son ideales para representar datos estructurados, como registros de bases de datos, configuraciones y cualquier otro tipo de informaci√≥n que requiera una asociaci√≥n clara entre claves y valores.

Los diccionarios se definen utilizando llaves `{}` con pares clave-valor separados por dos puntos `:`. Algunas operaciones comunes incluyen:

- Acceder a un valor mediante su clave.
- Agregar o actualizar pares clave-valor.
- Eliminar pares clave-valor.
- Iterar sobre claves, valores o ambos.
''',
    'code_example': '''
# Crear un diccionario
persona = {
    "nombre": "Ana",
    "edad": 30,
    "ciudad": "Lima"
}

# Acceder a un valor
print(persona["nombre"])  # Salida: Ana

# Agregar una nueva clave-valor
persona["profesion"] = "Ingeniera"

# Actualizar un valor existente
persona["edad"] = 31

# Eliminar una clave-valor
del persona["ciudad"]

# Iterar sobre claves y valores
for clave, valor in persona.items():
    print(f"{clave}: {valor}")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Strings y Manipulaci√≥n',
    'subtopic': 'M√©todos de strings',
    'definition': '''
Los m√©todos de strings en Python son funciones integradas que permiten manipular y analizar cadenas de texto de manera eficiente. Estos m√©todos no modifican la cadena original, sino que devuelven nuevas cadenas con las transformaciones aplicadas.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, dominar estos m√©todos es esencial para tareas comunes como la limpieza de datos, la validaci√≥n de entradas y la generaci√≥n de informes. Por ejemplo, puedes convertir texto a may√∫sculas con `.upper()`, eliminar espacios innecesarios con `.strip()` o reemplazar caracteres espec√≠ficos con `.replace()`.

Algunos m√©todos comunes incluyen:

- `upper()`: Convierte todos los caracteres a may√∫sculas.
- `lower()`: Convierte todos los caracteres a min√∫sculas.
- `strip()`: Elimina espacios en blanco al inicio y al final de la cadena.
- `replace()`: Reemplaza una subcadena por otra.
- `split()`: Divide la cadena en una lista utilizando un separador.
- `join()`: Une una lista de cadenas en una sola cadena, utilizando un separador.
- `find()`: Devuelve el √≠ndice de la primera aparici√≥n de una subcadena.
- `startswith()` y `endswith()`: Verifican si la cadena comienza o termina con una subcadena espec√≠fica.
''',
    'code_example': '''
texto = "  Hola Mundo  "

# Convertir a may√∫sculas
print(texto.upper())  # Salida: "  HOLA MUNDO  "

# Eliminar espacios al inicio y al final
print(texto.strip())  # Salida: "Hola Mundo"

# Reemplazar "Mundo" por "Python"
print(texto.replace("Mundo", "Python"))  # Salida: "  Hola Python  "

# Dividir la cadena en palabras
palabras = texto.strip().split()
print(palabras)  # Salida: ['Hola', 'Mundo']

# Unir las palabras con un gui√≥n
nueva_cadena = "-".join(palabras)
print(nueva_cadena)  # Salida: "Hola-Mundo"
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Strings y Manipulaci√≥n',
    'subtopic': 'Formateo (f-strings, .format())',
    'definition': '''
El formateo de cadenas en Python permite insertar valores din√°micos dentro de cadenas de texto. Las dos t√©cnicas m√°s comunes son las f-strings y el m√©todo `.format()`.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, estas t√©cnicas son fundamentales para generar mensajes personalizados, informes y salidas legibles. Las f-strings, introducidas en Python 3.6, ofrecen una sintaxis concisa y legible para incluir expresiones dentro de cadenas. Por otro lado, `.format()` proporciona una forma m√°s flexible y compatible con versiones anteriores de Python.

Ejemplos de uso:

- **f-strings**: `f"Hola, {nombre}!"`
- **.format()**: `"Hola, {}!".format(nombre)`
''',
    'code_example': '''
nombre = "Ana"
edad = 30

# Usando f-strings
print(f"Hola, {nombre}. Tienes {edad} a√±os.")  # Salida: Hola, Ana. Tienes 30 a√±os.

# Usando .format()
print("Hola, {}. Tienes {} a√±os.".format(nombre, edad))  # Salida: Hola, Ana. Tienes 30 a√±os.

# Formateo con especificadores
pi = 3.14159
print(f"El valor de pi es aproximadamente {pi:.2f}")  # Salida: El valor de pi es aproximadamente 3.14
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Strings y Manipulaci√≥n',
    'subtopic': 'Expresiones regulares b√°sicas (re module)',
    'definition': '''
Las expresiones regulares (regex) en Python, proporcionadas por el m√≥dulo `re`, son herramientas poderosas para buscar, coincidir y manipular patrones dentro de cadenas de texto.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, las expresiones regulares son esenciales para tareas como la validaci√≥n de formatos (por ejemplo, correos electr√≥nicos, n√∫meros de tel√©fono), la extracci√≥n de informaci√≥n espec√≠fica y la limpieza de datos. Permiten definir patrones complejos de b√∫squeda utilizando una sintaxis concisa.

Funciones comunes del m√≥dulo `re`:

- `re.search()`: Busca una coincidencia en cualquier parte de la cadena.
- `re.match()`: Verifica si la cadena comienza con el patr√≥n.
- `re.findall()`: Devuelve todas las coincidencias del patr√≥n en la cadena.
- `re.sub()`: Reemplaza las coincidencias del patr√≥n con una cadena espec√≠fica.
''',
    'code_example': '''
import re

texto = "Mi correo es ejemplo@dominio.com y mi n√∫mero es 123-456-7890."

# Buscar una direcci√≥n de correo electr√≥nico
correo = re.search(r'[\w\.-]+@[\w\.-]+', texto)
if correo:
    print(f"Correo encontrado: {correo.group()}")  # Salida: Correo encontrado: ejemplo@dominio.com

# Buscar todos los n√∫meros de tel√©fono con el formato xxx-xxx-xxxx
telefonos = re.findall(r'\d{3}-\d{3}-\d{4}', texto)
print(f"N√∫meros encontrados: {telefonos}")  # Salida: N√∫meros encontrados: ['123-456-7890']
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Manejo de Archivos',
    'subtopic': 'open(), read(), write()',
    'definition': '''
En Python, la funci√≥n `open()` se utiliza para abrir archivos y permite realizar operaciones de lectura y escritura. Los modos comunes de apertura incluyen:

- `'r'`: Lectura (modo predeterminado).
- `'w'`: Escritura (crea un archivo nuevo o sobrescribe uno existente).
- `'a'`: A√±adir (agrega contenido al final del archivo).
- `'b'`: Modo binario (por ejemplo, `'rb'` o `'wb'`).

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, comprender c√≥mo abrir y manipular archivos es fundamental para tareas como el procesamiento de datos, la lectura de configuraciones y la generaci√≥n de informes. Por ejemplo, puedes leer un archivo de texto l√≠nea por l√≠nea para analizar su contenido o escribir resultados de un programa en un archivo para su posterior revisi√≥n.

Es importante cerrar los archivos despu√©s de su uso para liberar recursos del sistema. Esto se puede hacer utilizando el m√©todo `close()` o, preferiblemente, mediante un administrador de contexto (`with`), que cierra autom√°ticamente el archivo al finalizar el bloque de c√≥digo.
''',
    'code_example': '''
# Abrir un archivo para lectura
archivo = open('ejemplo.txt', 'r')
contenido = archivo.read()
print(contenido)
archivo.close()

# Abrir un archivo para escritura
archivo = open('salida.txt', 'w')
archivo.write('Hola, mundo!')
archivo.close()
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Manejo de Archivos',
    'subtopic': 'Context managers (with)',
    'definition': '''
El uso de un administrador de contexto (`with`) en Python proporciona una forma eficiente y segura de manejar recursos como archivos. Al utilizar `with`, el archivo se abre y se cierra autom√°ticamente, incluso si ocurre una excepci√≥n durante la ejecuci√≥n del bloque de c√≥digo.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, el uso de `with` garantiza que los archivos se cierren correctamente, lo que previene posibles p√©rdidas de datos o bloqueos de archivos. Por ejemplo, al leer un archivo de configuraci√≥n, `with` asegura que el archivo se cierre adecuadamente despu√©s de la lectura, incluso si se produce un error durante el procesamiento del contenido.

Esta pr√°ctica es recomendada para evitar errores comunes relacionados con la gesti√≥n manual de recursos.
''',
    'code_example': '''
# Leer un archivo utilizando with
with open('ejemplo.txt', 'r') as archivo:
    contenido = archivo.read()
    print(contenido)

# Escribir en un archivo utilizando with
with open('salida.txt', 'w') as archivo:
    archivo.write('Hola, mundo!')
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 3,
    'tittle_level': 'Manejo de Datos',
    'topic': 'Manejo de Archivos',
    'subtopic': 'CSV, JSON b√°sico',
    'definition': '''
Python proporciona m√≥dulos integrados para trabajar con archivos CSV y JSON, que son formatos comunes para el almacenamiento y el intercambio de datos.

- **CSV (Comma-Separated Values)**: Utilizado para representar datos tabulares. El m√≥dulo `csv` permite leer y escribir archivos CSV de manera eficiente.

- **JSON (JavaScript Object Notation)**: Formato ligero de intercambio de datos. El m√≥dulo `json` permite la serializaci√≥n y deserializaci√≥n de datos JSON, facilitando la conversi√≥n entre objetos de Python y cadenas JSON.

¬øTe est√°s preguntando por qu√© esto importa? 

Bueno, la capacidad de manejar archivos CSV y JSON es esencial para interactuar con diversas fuentes de datos, como bases de datos, APIs y hojas de c√°lculo. Por ejemplo, puedes leer un archivo CSV que contiene registros de usuarios para procesarlos en tu aplicaci√≥n, o guardar la configuraci√≥n de tu programa en un archivo JSON para facilitar su carga y modificaci√≥n.
''',
    'code_example': '''
import csv
import json

# Leer un archivo CSV
with open('datos.csv', 'r') as archivo_csv:
    lector = csv.reader(archivo_csv)
    for fila in lector:
        print(fila)

# Escribir en un archivo CSV
with open('salida.csv', 'w', newline='') as archivo_csv:
    escritor = csv.writer(archivo_csv)
    escritor.writerow(['Nombre', 'Edad'])
    escritor.writerow(['Ana', 30])

# Leer un archivo JSON
with open('datos.json', 'r') as archivo_json:
    datos = json.load(archivo_json)
    print(datos)

# Escribir en un archivo JSON
datos = {'nombre': 'Ana', 'edad': 30}
with open('salida.json', 'w') as archivo_json:
    json.dump(datos, archivo_json)
'''
  });
}

Future<void> insertPythonJrLevel4Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Tipos de Excepciones',
    'subtopic': 'Jerarqu√≠a de excepciones',
    'definition': '''
En Python, las excepciones est√°n organizadas en una jerarqu√≠a de clases. La clase base de todas las excepciones es la clase `BaseException`, y la mayor√≠a de las excepciones que normalmente encontramos heredan de la clase `Exception`, que a su vez hereda de `BaseException`.

¬øTe est√°s preguntando por qu√© esto importa?

Comprender la jerarqu√≠a de excepciones es crucial para manejar los errores de manera efectiva. Te permite capturar tipos espec√≠ficos de excepciones o capturar grupos m√°s amplios de excepciones seg√∫n su clase padre. Esto proporciona flexibilidad y control sobre c√≥mo responde tu programa a diferentes situaciones excepcionales.

Algunos puntos clave sobre la jerarqu√≠a:

- `BaseException`: La clase base para todas las excepciones.
- `Exception`: La clase base para la mayor√≠a de las excepciones incorporadas.
- Las excepciones m√°s espec√≠ficas (como `TypeError`, `ValueError`, `IOError`, etc.) heredan de `Exception`.
''',
    'code_example': '''
try:
    # C√≥digo que puede lanzar una excepci√≥n
    resultado = 10 / 0  # Esto lanzar√° una ZeroDivisionError
except ZeroDivisionError as e:
    print(f"Error: No se puede dividir por cero. Detalles: {e}")
except Exception as e:
    print(f"Ocurri√≥ una excepci√≥n general: {e}")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Tipos de Excepciones',
    'subtopic': 'Common exceptions (ValueError, TypeError, etc.)',
    'definition': '''
Python tiene varias excepciones incorporadas que se lanzan cuando ocurren ciertos tipos de errores. Estas excepciones comunes cubren una amplia gama de situaciones problem√°ticas que pueden surgir durante la ejecuci√≥n del programa.

¬øTe est√°s preguntando por qu√© esto importa?

Conocer estas excepciones te permite anticipar y manejar errores espec√≠ficos de manera m√°s precisa, mejorando la robustez y la confiabilidad de tu c√≥digo.

Algunas excepciones comunes incluyen:

- `TypeError`: Se lanza cuando una operaci√≥n o funci√≥n se aplica a un objeto de un tipo inapropiado.
- `ValueError`: Se lanza cuando una funci√≥n recibe un argumento del tipo correcto pero con un valor inapropiado.
- `IndexError`: Se lanza cuando se intenta acceder a un √≠ndice que est√° fuera del rango de una secuencia (como una lista o tupla).
- `KeyError`: Se lanza cuando se intenta acceder a una clave que no existe en un diccionario.
- `FileNotFoundError`: Se lanza cuando se intenta abrir un archivo que no existe.
''',
    'code_example': '''
try:
    numero = int("abc")  # Esto lanzar√° un ValueError
except ValueError:
    print("Error: Entrada inv√°lida. Se esperaba un n√∫mero.")

try:
    lista = [1, 2, 3]
    print(lista[5])      # Esto lanzar√° un IndexError
except IndexError:
    print("Error: √çndice fuera de rango.")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Tipos de Excepciones',
    'subtopic': 'Excepciones personalizadas',
    'definition': '''
Adem√°s de las excepciones incorporadas, Python te permite definir tus propias excepciones personalizadas. Esto es √∫til cuando quieres se√±alar condiciones de error espec√≠ficas que son √∫nicas para tu aplicaci√≥n.

¬øTe est√°s preguntando por qu√© esto importa?

Las excepciones personalizadas hacen que tu c√≥digo sea m√°s legible y mantenible, ya que proporcionan nombres claros y descriptivos para los errores que pueden ocurrir. Tambi√©n te permiten organizar tus excepciones en una jerarqu√≠a que se ajuste a las necesidades de tu aplicaci√≥n.

Para crear una excepci√≥n personalizada, simplemente define una nueva clase que herede de la clase `Exception` (o de alguna otra clase de excepci√≥n apropiada).
''',
    'code_example': '''
class ErrorPersonalizado(Exception):
    def __init__(self, mensaje):
        self.mensaje = mensaje

try:
    raise ErrorPersonalizado("Este es un error personalizado.")
except ErrorPersonalizado as e:
    print(f"¬°Ocurri√≥ un error! {e.mensaje}")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Manejo de Errores',
    'subtopic': 'Try-except-else-finally',
    'definition': '''
La estructura `try-except-else-finally` en Python es fundamental para el manejo de excepciones. Permite ejecutar c√≥digo que podr√≠a generar errores (`try`), capturar y manejar esos errores (`except`), ejecutar c√≥digo si no ocurre ninguna excepci√≥n (`else`), y ejecutar c√≥digo que siempre debe realizarse, independientemente de si hubo o no una excepci√≥n (`finally`).

¬øTe est√°s preguntando por qu√© esto importa?

Esta estructura proporciona un control robusto sobre el flujo de ejecuci√≥n de tu programa en presencia de posibles errores. Asegura que los recursos se liberen correctamente (como archivos cerrados) y que se ejecuten acciones necesarias sin importar si el c√≥digo principal tuvo √©xito o no.

- `try`: El bloque de c√≥digo donde puede ocurrir una excepci√≥n.
- `except`: Uno o m√°s bloques que especifican c√≥mo manejar diferentes tipos de excepciones.
- `else`: Un bloque opcional que se ejecuta si el bloque `try` no lanza ninguna excepci√≥n.
- `finally`: Un bloque opcional que siempre se ejecuta, despu√©s del bloque `try` (y cualquier bloque `except` o `else`).
''',
    'code_example': '''
try:
    archivo = open("mi_archivo.txt", "r")
    contenido = archivo.read()
    # Procesar el contenido
except FileNotFoundError:
    print("Error: El archivo no fue encontrado.")
except Exception as e:
    print(f"Ocurri√≥ otro error: {e}")
else:
    print("El archivo fue le√≠do correctamente.")
finally:
    if 'archivo' in locals() and not archivo.closed:
        archivo.close()
        print("El archivo fue cerrado.")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Manejo de Errores',
    'subtopic': 'Raise exceptions',
    'definition': '''
La sentencia `raise` en Python se utiliza para generar expl√≠citamente una excepci√≥n. Puedes usarla para lanzar una excepci√≥n incorporada o una excepci√≥n personalizada que hayas definido.

¬øTe est√°s preguntando por qu√© esto importa?

Generar excepciones es √∫til en varias situaciones:

- Para indicar que ha ocurrido una condici√≥n de error espec√≠fica en tu c√≥digo.
- Para propagar una excepci√≥n que capturaste pero que no puedes manejar completamente en el bloque `except` actual.
- Para probar tu c√≥digo de manejo de excepciones.

Al usar `raise`, puedes controlar el flujo de error de tu programa y asegurarte de que las condiciones excepcionales se se√±alen adecuadamente.
''',
    'code_example': '''
def dividir(a, b):
    if b == 0:
        raise ZeroDivisionError("¬°No se puede dividir por cero!")
    return a / b

try:
    resultado = dividir(10, 0)
    print(resultado)
except ZeroDivisionError as e:
    print(f"Error: {e}")

class ErrorDeValidacion(Exception):
    pass

def validar_entrada(dato):
    if not isinstance(dato, int):
        raise ErrorDeValidacion("La entrada debe ser un n√∫mero entero.")

try:
    validar_entrada("hola")
except ErrorDeValidacion as e:
    print(f"Error de validaci√≥n: {e}")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 4,
    'tittle_level': 'Manejo de Excepciones',
    'topic': 'Manejo de Errores',
    'subtopic': 'Tracebacks',
    'definition': '''
Un "traceback" (o rastreo de pila) es un informe que muestra la secuencia de llamadas a funciones que llevaron a una excepci√≥n. Cuando ocurre una excepci√≥n que no se maneja, Python imprime un traceback que indica d√≥nde ocurri√≥ el error y la ruta de las llamadas de funci√≥n que se realizaron hasta ese punto.

¬øTe est√°s preguntando por qu√© esto importa?

Los tracebacks son herramientas de depuraci√≥n esenciales. Proporcionan informaci√≥n crucial para entender la causa de un error y d√≥nde ocurri√≥ exactamente en tu c√≥digo. Al analizar un traceback, puedes identificar la funci√≥n donde se origin√≥ la excepci√≥n y la secuencia de llamadas que la precedieron, lo que facilita la localizaci√≥n y correcci√≥n de errores.

Un traceback t√≠picamente incluye:

- El tipo de excepci√≥n que ocurri√≥.
- El mensaje de la excepci√≥n.
- La ubicaci√≥n del archivo y el n√∫mero de l√≠nea donde ocurri√≥ la excepci√≥n.
- La pila de llamadas, mostrando la secuencia de funciones que se estaban ejecutando en el momento de la excepci√≥n.
''',
    'code_example': '''
def funcion_c():
    return 10 / 0

def funcion_b():
    return funcion_c()

def funcion_a():
    return funcion_b()

try:
    resultado = funcion_a()
    print(resultado)
except ZeroDivisionError:
    import traceback
    traceback.print_exc()
    # La salida mostrar√° la secuencia de llamadas:
    # Traceback (most recent call last):
    #   File "<stdin>", line 11, in <module>
    #   File "<stdin>", line 9, in funcion_a
    #   File "<stdin>", line 7, in funcion_b
    #   File "<stdin>", line 3, in funcion_c
    # ZeroDivisionError: division by zero
'''
  });
}

Future<void> insertPythonJrLevel5Data(Database db) async {
  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Entorno de Desarrollo',
    'subtopic': 'Instalaci√≥n de Python',
    'definition': '''
Para comenzar a programar en Python, lo primero que necesitas es tenerlo instalado en tu sistema. Afortunadamente, la instalaci√≥n es un proceso sencillo y bien documentado.

¬øTe est√°s preguntando c√≥mo se hace?

Primero, visita el sitio web oficial de Python (python.org) y descarga la versi√≥n m√°s reciente estable para tu sistema operativo (Windows, macOS o Linux). El sitio web proporciona instaladores y gu√≠as detalladas para cada plataforma.

Una vez descargado, ejecuta el instalador y sigue las instrucciones. Es importante asegurarte de que la opci√≥n "Add Python to PATH" est√© marcada (especialmente en Windows), ya que esto facilita el acceso a Python desde la l√≠nea de comandos.

Despu√©s de la instalaci√≥n, puedes verificar que todo est√© correcto abriendo la terminal o el s√≠mbolo del sistema y ejecutando el comando `python --version` o `python3 --version`. Esto deber√≠a mostrar la versi√≥n de Python que has instalado.
''',
    'code_example': '''
# Verificar la instalaci√≥n de Python (en la terminal)
# Windows:
# python --version
# macOS/Linux:
# python3 --version

# Ejemplo de salida:
# Python 3.9.6
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Entorno de Desarrollo',
    'subtopic': 'PIP y entornos virtuales (venv)',
    'definition': '''
Python incluye una herramienta llamada `pip` (Python Package Installer) que se utiliza para instalar y gestionar paquetes de terceros. Adem√°s, los entornos virtuales son una forma de crear espacios aislados para proyectos de Python, lo que evita conflictos entre dependencias de diferentes proyectos.

¬øTe est√°s preguntando por qu√© son importantes?

`pip` simplifica la instalaci√≥n de bibliotecas y frameworks (como Django o Flask) que extienden la funcionalidad de Python. Los entornos virtuales, creados con la biblioteca `venv`, aseguran que cada proyecto tenga sus propias dependencias, sin interferir con las de otros proyectos o con el sistema operativo.

Para crear un entorno virtual, se utiliza el m√≥dulo `venv`. Una vez activado, `pip` instalar√° los paquetes dentro de ese entorno.
''',
    'code_example': '''
# Crear un entorno virtual (en la terminal)
# python3 -m venv .venv  # Crea un entorno en el directorio .venv

# Activar el entorno virtual (en la terminal)
# Windows:
# .venv\\Scripts\\activate
# macOS/Linux:
# source .venv/bin/activate

# Instalar un paquete (dentro del entorno virtual activo)
# pip install requests

# Desactivar el entorno virtual (en la terminal)
# deactivate
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Entorno de Desarrollo',
    'subtopic': 'IDEs (PyCharm, VSCode)',
    'definition': '''
Un IDE (Integrated Development Environment) es una aplicaci√≥n de software que proporciona herramientas para el desarrollo de software. Los IDEs pueden facilitar significativamente la escritura, depuraci√≥n y gesti√≥n de c√≥digo.

¬øTe est√°s preguntando cu√°les son los m√°s populares para Python?

Dos de los IDEs m√°s populares para Python son PyCharm y VSCode (Visual Studio Code).

- **PyCharm:** Es un IDE dedicado a Python, desarrollado por JetBrains. Ofrece caracter√≠sticas avanzadas como autocompletado de c√≥digo, depuraci√≥n integrada, control de versiones y soporte para frameworks como Django.

- **VSCode:** Es un editor de c√≥digo desarrollado por Microsoft que, mediante extensiones, se puede convertir en un poderoso IDE para Python. Es altamente personalizable y cuenta con una gran comunidad y un amplio ecosistema de extensiones.

Ambos IDEs son excelentes opciones, y la elecci√≥n entre uno u otro a menudo depende de las preferencias personales.
''',
    'code_example': '''
# Este no es c√≥digo ejecutable, sino una referencia a herramientas de desarrollo.
# Los IDEs se utilizan para escribir y ejecutar c√≥digo, no se ejecutan dentro del c√≥digo.
# Ejemplo de c√≥digo que podr√≠as escribir en un IDE:

# print("Hola desde el IDE")
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Entorno de Desarrollo',
    'subtopic': 'Ejecuci√≥n desde terminal',
    'definition': '''
Adem√°s de usar un IDE, tambi√©n puedes ejecutar scripts de Python directamente desde la terminal o el s√≠mbolo del sistema. Esto es √∫til para automatizar tareas, ejecutar scripts simples o integrar Python en flujos de trabajo de l√≠nea de comandos.

¬øTe est√°s preguntando c√≥mo se hace?

Para ejecutar un script de Python, simplemente abres la terminal, navegas hasta el directorio donde se encuentra el script y ejecutas el comando `python` (o `python3` en algunos sistemas) seguido del nombre del archivo del script.

Por ejemplo, si tienes un archivo llamado `mi_script.py`, lo ejecutar√≠as con el comando `python mi_script.py`.

Tambi√©n puedes pasar argumentos al script a trav√©s de la l√≠nea de comandos, que luego puedes acceder dentro del script utilizando el m√≥dulo `sys`.
''',
    'code_example': '''
# Contenido del archivo mi_script.py:
# import sys
# print("Argumentos de la l√≠nea de comandos:", sys.argv)

# Ejecuci√≥n en la terminal:
# python mi_script.py arg1 arg2 arg3

# Ejemplo de salida:
# Argumentos de la l√≠nea de comandos: ['mi_script.py', 'arg1', 'arg2', 'arg3']
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Control de Versiones',
    'subtopic': 'Git b√°sico',
    'definition': '''
Git es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el c√≥digo fuente durante el desarrollo de software. Es una herramienta esencial para la colaboraci√≥n y la gesti√≥n de proyectos.

¬øTe est√°s preguntando por qu√© es tan importante?

Git te permite:

-   Llevar un registro de cada modificaci√≥n realizada en el c√≥digo.
-   Volver a versiones anteriores del c√≥digo si es necesario.
-   Trabajar en diferentes caracter√≠sticas o correcciones de errores simult√°neamente (mediante ramas).
-   Colaborar con otros desarrolladores de manera eficiente.

Algunos comandos b√°sicos de Git incluyen `init` (para inicializar un nuevo repositorio), `add` (para agregar archivos al √°rea de preparaci√≥n), `commit` (para guardar los cambios), `push` (para enviar los cambios a un repositorio remoto) y `pull` (para obtener los cambios desde un repositorio remoto).
''',
    'code_example': '''
# Inicializar un nuevo repositorio Git
# git init

# Agregar archivos al √°rea de preparaci√≥n
# git add .

# Guardar los cambios con un mensaje descriptivo
# git commit -m "A√±adida nueva funcionalidad"

# Enviar los cambios a un repositorio remoto
# git push origin main
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Control de Versiones',
    'subtopic': 'GitHub',
    'definition': '''
GitHub es una plataforma de alojamiento de c√≥digo basada en la web que utiliza Git. Adem√°s de proporcionar almacenamiento para tus repositorios Git, GitHub ofrece herramientas para la colaboraci√≥n, como solicitudes de extracci√≥n (pull requests), seguimiento de problemas (issues) y revisi√≥n de c√≥digo.

¬øTe est√°s preguntando c√≥mo se relaciona con Git?

GitHub act√∫a como un repositorio remoto centralizado donde los desarrolladores pueden almacenar y compartir su c√≥digo. Facilita la colaboraci√≥n en proyectos de c√≥digo abierto y privados, y proporciona una interfaz web amigable para gestionar repositorios Git.

Para usar GitHub, necesitas crear una cuenta y luego puedes crear repositorios, subir tu c√≥digo existente o clonar repositorios de otros desarrolladores.
''',
    'code_example': '''
# Este no es c√≥digo ejecutable, sino una referencia a una plataforma web.
# Los comandos de Git se utilizan para interactuar con GitHub desde la terminal.
# Ejemplo de flujo de trabajo t√≠pico:

# 1. Crear un repositorio en GitHub.
# 2. Clonar el repositorio a tu m√°quina local:
#    git clone <URL_del_repositorio>
# 3. Realizar cambios en el c√≥digo.
# 4. Guardar los cambios localmente:
#    git commit -m "Descripci√≥n de los cambios"
# 5. Enviar los cambios a GitHub:
#    git push origin main
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Control de Versiones',
    'subtopic': '.gitignore para Python',
    'definition': '''
El archivo `.gitignore` se utiliza en los repositorios de Git para especificar archivos y directorios que Git debe ignorar. Esto es especialmente √∫til en proyectos de Python para evitar incluir archivos innecesarios o sensibles en el repositorio, como archivos de cach√©, archivos de registro o informaci√≥n de configuraci√≥n local.

¬øTe est√°s preguntando por qu√© necesitas esto?

Incluir archivos innecesarios puede inflar el tama√±o del repositorio, contaminar el historial de cambios y, en algunos casos, exponer informaci√≥n confidencial. El archivo `.gitignore` te permite mantener tu repositorio limpio y organizado.

Algunos ejemplos comunes de entradas en un archivo `.gitignore` de Python incluyen:

-   `__pycache__/`: Directorio de cach√© de bytecode de Python.
-   `*.pyc`: Archivos de bytecode de Python compilados.
-   `.env`: Archivos que contienen variables de entorno locales.
-   `/venv/`: Directorio del entorno virtual.
''',
    'code_example': '''
# Ejemplo de un archivo .gitignore

# Ignorar directorios de cach√© de Python
__pycache__/

# Ignorar archivos de bytecode de Python
*.pyc

# Ignorar archivos de entorno virtual
venv/
.venv/

# Ignorar archivos de configuraci√≥n local
.env
config.ini
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Pruebas Unitarias',
    'subtopic': 'unittest module',
    'definition': '''
El m√≥dulo `unittest` es el framework de pruebas unitarias incorporado de Python. Proporciona herramientas para escribir y ejecutar pruebas, y para organizar las pruebas en colecciones.

¬øTe est√°s preguntando c√≥mo funciona?

`unittest` se basa en los principios de la programaci√≥n orientada a objetos. Las pruebas se definen como m√©todos dentro de clases que heredan de `unittest.TestCase`. Los m√©todos de prueba deben comenzar con el prefijo `test_`.

`unittest` proporciona m√©todos de aserci√≥n (como `assertEqual`, `assertTrue`, `assertFalse`, etc.) para verificar que los resultados reales coincidan con los resultados esperados. Tambi√©n incluye herramientas para configurar y desmontar (setup and teardown) el entorno de prueba.
''',
    'code_example': '''
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual("hello".upper(), "HELLO")

    def test_isupper(self):
        self.assertTrue("HELLO".isupper())
        self.assertFalse("Hello".isupper())

    def test_split(self):
        self.assertEqual("hello world".split(), ["hello", "world"])
        with self.assertRaises(TypeError):
            "hello".split(2)

if __name__ == '__main__':
    unittest.main()
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Pruebas Unitarias',
    'subtopic': 'pytest b√°sico',
    'definition': '''
`pytest` es un framework de pruebas de terceros para Python. Es m√°s conciso y f√°cil de usar que `unittest`, y ofrece caracter√≠sticas potentes como la detecci√≥n autom√°tica de pruebas, fixtures y parametrizaci√≥n.

¬øTe est√°s preguntando qu√© lo hace diferente?

`pytest` simplifica la escritura de pruebas al permitirte usar funciones en lugar de clases. Detecta autom√°ticamente las funciones de prueba que comienzan con `test_` o las clases que comienzan con `Test` y contienen m√©todos que comienzan con `test_`.

`pytest` tambi√©n proporciona un sistema de fixtures para gestionar el estado de las pruebas y un sistema de parametrizaci√≥n para ejecutar la misma prueba con diferentes entradas.
''',
    'code_example': '''
# contenido de test_ejemplo.py
def test_suma():
    assert 1 + 1 == 2

def test_resta():
    assert 5 - 3 == 2

def test_multiplicacion():
    assert 2 * 3 == 6

def test_division():
    assert 10 / 2 == 5
'''
  });

  await db.insert('programming_content', {
    'language': 'Python',
    'module': 'Jr',
    'level': 5,
    'tittle_level': 'Herramientas B√°sicas',
    'topic': 'Pruebas Unitarias',
    'subtopic': 'Assertions',
    'definition': '''
Las "assertions" son expresiones que verifican si una condici√≥n es verdadera o falsa en un punto dado del programa. Se utilizan en las pruebas unitarias para verificar que el c√≥digo se comporta como se espera.

¬øTe est√°s preguntando c√≥mo funcionan?

Los frameworks de pruebas proporcionan m√©todos de aserci√≥n para comparar los resultados reales con los resultados esperados. Si una aserci√≥n falla, la prueba se considera fallida y se informa el error.

Algunas aserciones comunes incluyen:

-   `assertEqual(a, b)`: Verifica si `a` es igual a `b`.
-   `assertTrue(x)`: Verifica si `x` es verdadero.
-   `assertFalse(x)`: Verifica si `x` es falso.
-   `assertIn(a, b)`: Verifica si `a` est√° en `b`.
-   `assertRaise(exc, fun)`: Verifica si la llamada a la funci√≥n `fun` lanza la excepci√≥n `exc`.
''',
    'code_example': '''
import unittest

class TestAssertions(unittest.TestCase):

    def test_igualdad(self):
        self.assertEqual(2 + 2, 4)

    def test_verdadero(self):
        self.assertTrue(5 > 3)

    def test_falso(self):
        self.assertFalse(5 < 3)

    def test_en_lista(self):
        self.assertIn(2, [1, 2, 3])

    def test_excepcion(self):
        with self.assertRaises(TypeError):
            1 + "a"
'''
  });
}
